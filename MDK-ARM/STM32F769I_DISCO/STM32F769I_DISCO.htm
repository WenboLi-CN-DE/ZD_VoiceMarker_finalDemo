<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F769I_DISCO\STM32F769I_DISCO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F769I_DISCO\STM32F769I_DISCO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Sep 09 17:27:57 2022
<BR><P>
<H3>Maximum Stack Usage =       2264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[665]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[665]">cJSON_Delete</a><BR>
 <LI><a href="#[860]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">parse_value</a><BR>
 <LI><a href="#[85d]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">parse_value</a><BR>
 <LI><a href="#[81c]">ndpSendNeighborSol</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[766]">ipv6SendDatagram</a><BR>
 <LI><a href="#[773]">icmpv6SendErrorMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[766]">ipv6SendDatagram</a><BR>
 <LI><a href="#[52b]">touchgfx::TextProvider::getNextCharInternal()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52b]">touchgfx::TextProvider::getNextCharInternal()</a><BR>
 <LI><a href="#[5a1]">touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a1]">touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</a><BR>
 <LI><a href="#[582]">touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[582]">touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</a><BR>
 <LI><a href="#[542]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[542]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a><BR>
 <LI><a href="#[599]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[599]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
 <LI><a href="#[5a3]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a3]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a><BR>
 <LI><a href="#[5a2]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a2]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a><BR>
 <LI><a href="#[6c1]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c1]">dnsParseName</a><BR>
 <LI><a href="#[6ba]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6ba]">dnsCompareName</a><BR>
 <LI><a href="#[7ca]">ipv6ParseFragmentHeader</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d9]">ipv6ProcessPacket</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[26]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[40]">CAN1_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[41]">CAN1_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[42]">CAN1_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3f]">CAN1_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6c]">CAN2_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6d]">CAN2_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6e]">CAN2_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6b]">CAN2_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[94]">CAN3_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[95]">CAN3_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[96]">CAN3_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[93]">CAN3_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[89]">CEC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7a]">DCMI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8e]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8f]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[90]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[91]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a0]">DFSDM_DMAError</a> from stm32f7xx_hal_dfsdm.o(i.DFSDM_DMAError) referenced from stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
 <LI><a href="#[9f]">DFSDM_DMARegularConvCplt</a> from stm32f7xx_hal_dfsdm.o(i.DFSDM_DMARegularConvCplt) referenced from stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
 <LI><a href="#[a1]">DFSDM_DMARegularHalfConvCplt</a> from stm32f7xx_hal_dfsdm.o(i.DFSDM_DMARegularHalfConvCplt) referenced from stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
 <LI><a href="#[37]">DMA1_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[85]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream1_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream3_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream4_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream5_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8d]">DSI_IRQHandler</a> from stm32f7xx_it.o(i.DSI_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[69]">ETH_IRQHandler</a> from stm32f7xx_eth_driver.o(i.ETH_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6a]">ETH_WKUP_IRQHandler</a> from stm32f7xx_it.o(i.ETH_WKUP_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[43]">EXTI9_5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[30]">FLASH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5c]">FMC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7c]">FPU_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4c]">I2C1_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4b]">I2C1_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4e]">I2C2_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4d]">I2C2_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[75]">I2C3_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[74]">I2C3_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8b]">I2C4_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8a]">I2C4_EV_IRQHandler</a> from stm32f7xx_it.o(i.I2C4_EV_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f0]">IdleTaskHook</a> from touchgfxhal.o(i.IdleTaskHook) referenced from freertos.o(i.vApplicationIdleHook)
 <LI><a href="#[a8]">JPEG_DMAErrorCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAErrorCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[a7]">JPEG_DMAInCpltCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAInCpltCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[aa]">JPEG_DMAOutAbortCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutAbortCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[a9]">JPEG_DMAOutCpltCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutCpltCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[97]">JPEG_IRQHandler</a> from stm32f7xx_it.o(i.JPEG_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ae]">JPEG_MCU_Gray_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[b3]">JPEG_MCU_Gray_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[af]">JPEG_MCU_YCCK_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[b4]">JPEG_MCU_YCCK_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[ab]">JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr420_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[ac]">JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[b1]">JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[ad]">JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[b2]">JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[88]">LPTIM1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[84]">LTDC_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[83]">LTDC_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[98]">MDIOS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[25]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6f]">OTG_FS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2d]">PVD_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[87]">QUADSPI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[31]">RCC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7b]">RNG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2f]">RTC_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[82]">SAI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[86]">SAI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a4]">SAI_DMAError</a> from stm32f7xx_hal_sai.o(i.SAI_DMAError) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[a4]">SAI_DMAError</a> from stm32f7xx_hal_sai.o(i.SAI_DMAError) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[a3]">SAI_DMARxCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMARxCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[a2]">SAI_DMARxHalfCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMARxHalfCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
 <LI><a href="#[a6]">SAI_DMATxCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMATxCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[a5]">SAI_DMATxHalfCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMATxHalfCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[5d]">SDMMC1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[92]">SDMMC2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f5]">SDRAMDISK_initialize</a> from sdram_diskio.o(i.SDRAMDISK_initialize) referenced from sdram_diskio.o(.constdata)
 <LI><a href="#[f9]">SDRAMDISK_ioctl</a> from sdram_diskio.o(i.SDRAMDISK_ioctl) referenced from sdram_diskio.o(.constdata)
 <LI><a href="#[f7]">SDRAMDISK_read</a> from sdram_diskio.o(i.SDRAMDISK_read) referenced from sdram_diskio.o(.constdata)
 <LI><a href="#[f6]">SDRAMDISK_status</a> from sdram_diskio.o(i.SDRAMDISK_status) referenced from sdram_diskio.o(.constdata)
 <LI><a href="#[f8]">SDRAMDISK_write</a> from sdram_diskio.o(i.SDRAMDISK_write) referenced from sdram_diskio.o(.constdata)
 <LI><a href="#[8c]">SPDIF_RX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4f]">SPI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7f]">SPI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[80]">SPI5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[81]">SPI6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e6]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(i.main)
 <LI><a href="#[e9]">StarttftpTask</a> from main.o(i.StarttftpTask) referenced from main.o(i.main)
 <LI><a href="#[2b]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[9a]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[2e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[b0]">TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[44]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[47]">TIM1_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[46]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[45]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[48]">TIM2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[49]">TIM3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4a]">TIM4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5e]">TIM5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[62]">TIM6_DAC_IRQHandler</a> from stm32f7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[63]">TIM7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[57]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5a]">TIM8_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[59]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[58]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e7]">TouchGFX_Task</a> from app_touchgfx.o(i.TouchGFX_Task) referenced from main.o(i.main)
 <LI><a href="#[ea]">TriggerTaskfun</a> from main.o(i.TriggerTaskfun) referenced from main.o(i.main)
 <LI><a href="#[60]">UART4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[61]">UART5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7d]">UART7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7e]">UART8_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[51]">USART1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[52]">USART2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[53]">USART3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[73]">USART6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[b6]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32dma.o(i._ZN8STM32DMA10initializeEv)
 <LI><a href="#[118]">Screen1View::setupScreen()</a> from screen1view.o(i._ZN11Screen1View11setupScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[121]">Screen1View::functionPlay()</a> from screen1view.o(i._ZN11Screen1View12functionPlayEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[122]">Screen1View::functionStop()</a> from screen1view.o(i._ZN11Screen1View12functionStopEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[123]">Screen1View::functionPause()</a> from screen1view.o(i._ZN11Screen1View13functionPauseEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[126]">Screen1View::functionVolume(int)</a> from screen1view.o(i._ZN11Screen1View14functionVolumeEi) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11a]">Screen1View::tearDownScreen()</a> from screen1view.o(i._ZN11Screen1View14tearDownScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11e]">Screen1View::handleTickEvent()</a> from screen1view.o(i._ZN11Screen1View15handleTickEventEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[124]">Screen1View::functionRecordStart()</a> from screen1view.o(i._ZN11Screen1View19functionRecordStartEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[120]">Screen1View::function1()</a> from screen1view.o(i._ZN11Screen1View9function1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[116]">Screen1View::~Screen1View()</a> from screen1view.o(i._ZN11Screen1ViewD1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[128]">Screen2View::setupScreen()</a> from screen2view.o(i._ZN11Screen2View11setupScreenEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[130]">Screen2View::functionFtpGet()</a> from screen2view.o(i._ZN11Screen2View14functionFtpGetEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[131]">Screen2View::functionFtpPut()</a> from screen2view.o(i._ZN11Screen2View14functionFtpPutEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[129]">Screen2View::tearDownScreen()</a> from screen2view.o(i._ZN11Screen2View14tearDownScreenEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12c]">Screen2View::functionHttpGet()</a> from screen2view.o(i._ZN11Screen2View15functionHttpGetEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12d]">Screen2View::functionTftpGet()</a> from screen2view.o(i._ZN11Screen2View15functionTftpGetEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12e]">Screen2View::functionTftpPut()</a> from screen2view.o(i._ZN11Screen2View15functionTftpPutEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12f]">Screen2View::functionHttpPost()</a> from screen2view.o(i._ZN11Screen2View16functionHttpPostEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12b]">Screen2View::functionSetHttpFlag()</a> from screen2view.o(i._ZN11Screen2View19functionSetHttpFlagEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[127]">Screen2View::~Screen2View()</a> from screen2view.o(i._ZN11Screen2ViewD1Ev) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[152]">TouchGFXHAL::beginFrame()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10beginFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[133]">TouchGFXHAL::initialize()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[148]">TouchGFXHAL::enableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[135]">TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[149]">TouchGFXHAL::disableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[154]">TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[147]">TouchGFXHAL::configureInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14a]">TouchGFXHAL::enableLCDControllerInterrupt()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14b]">TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[153]">TouchGFXHAL::endFrame()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL8endFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[134]">TouchGFXHAL::taskEntry()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e0]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e0]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[ef]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[ef]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(i.touchgfx_init)
 <LI><a href="#[15d]">MainBoardView::setupScreen()</a> from mainboardview.o(i._ZN13MainBoardView11setupScreenEv) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[15e]">MainBoardView::tearDownScreen()</a> from mainboardview.o(i._ZN13MainBoardView14tearDownScreenEv) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[15c]">MainBoardView::~MainBoardView()</a> from mainboardview.o(i._ZN13MainBoardViewD1Ev) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[15f]">ModelListener::cpuChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[15f]">ModelListener::cpuChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[15f]">ModelListener::cpuChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[15f]">ModelListener::cpuChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[15f]">ModelListener::cpuChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[162]">ModelListener::memChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10memChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[162]">ModelListener::memChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10memChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[162]">ModelListener::memChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10memChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[162]">ModelListener::memChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10memChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[162]">ModelListener::memChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener10memChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[160]">ModelListener::diskChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[160]">ModelListener::diskChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[160]">ModelListener::diskChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[160]">ModelListener::diskChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[160]">ModelListener::diskChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[163]">ModelListener::timeChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[163]">ModelListener::timeChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[163]">ModelListener::timeChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[163]">ModelListener::timeChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[163]">ModelListener::timeChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[164]">ModelListener::zoneChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[164]">ModelListener::zoneChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[164]">ModelListener::zoneChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[164]">ModelListener::zoneChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[164]">ModelListener::zoneChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[161]">ModelListener::diskLoadChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV13ModelListener)
 <LI><a href="#[161]">ModelListener::diskLoadChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[161]">ModelListener::diskLoadChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[161]">ModelListener::diskLoadChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[161]">ModelListener::diskLoadChanged()</a> from mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[125]">Screen1ViewBase::SWITCH_LED()</a> from screen1view.o(i._ZN15Screen1ViewBase10SWITCH_LEDEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[125]">Screen1ViewBase::SWITCH_LED()</a> from screen1view.o(i._ZN15Screen1ViewBase10SWITCH_LEDEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[166]">Screen1ViewBase::setupScreen()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[169]">Screen1ViewBase::functionPlay()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase12functionPlayEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16a]">Screen1ViewBase::functionStop()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase12functionStopEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16b]">Screen1ViewBase::functionPause()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase13functionPauseEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16d]">Screen1ViewBase::functionVolume(int)</a> from screen1viewbase.o(i._ZN15Screen1ViewBase14functionVolumeEi) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16c]">Screen1ViewBase::functionRecordStart()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase19functionRecordStartEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[103]">Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from screen1viewbase.o(i._ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from screen1viewbase.o(.constdata)
 <LI><a href="#[104]">Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)</a> from screen1viewbase.o(i._ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi) referenced from screen1viewbase.o(.constdata)
 <LI><a href="#[168]">Screen1ViewBase::function1()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase9function1Ev) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[165]">Screen1ViewBase::~Screen1ViewBase()</a> from screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16f]">Screen2ViewBase::setupScreen()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase11setupScreenEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[175]">Screen2ViewBase::functionFtpGet()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase14functionFtpGetEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[176]">Screen2ViewBase::functionFtpPut()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase14functionFtpPutEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[171]">Screen2ViewBase::functionHttpGet()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase15functionHttpGetEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[172]">Screen2ViewBase::functionTftpGet()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase15functionTftpGetEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[173]">Screen2ViewBase::functionTftpPut()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase15functionTftpPutEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[174]">Screen2ViewBase::functionHttpPost()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase16functionHttpPostEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[170]">Screen2ViewBase::functionSetHttpFlag()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase19functionSetHttpFlagEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[105]">Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from screen2viewbase.o(i._ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from screen2viewbase.o(.constdata)
 <LI><a href="#[16e]">Screen2ViewBase::~Screen2ViewBase()</a> from screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[18e]">CustomContainer1::initialize()</a> from customcontainer1.o(i._ZN16CustomContainer110initializeEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[15a]">FrontendHeapBase::gotoStartScreen(FrontendApplication&)</a> from touchgfxconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication) referenced from touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[15a]">FrontendHeapBase::gotoStartScreen(FrontendApplication&)</a> from touchgfxconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication) referenced from touchgfxconfiguration.o(.constdata__ZTV16FrontendHeapBase)
 <LI><a href="#[190]">FrontendHeapBase::~FrontendHeapBase()</a> from touchgfxconfiguration.o(i._ZN16FrontendHeapBaseD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV16FrontendHeapBase)
 <LI><a href="#[192]">Screen1Presenter::deactivate()</a> from screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[191]">Screen1Presenter::activate()</a> from screen1presenter.o(i._ZN16Screen1Presenter8activateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[193]">Screen1Presenter::~Screen1Presenter()</a> from screen1presenter.o(i._ZN16Screen1PresenterD1Ev) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[197]">Screen2Presenter::cpuChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter10cpuChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[195]">Screen2Presenter::deactivate()</a> from screen2presenter.o(i._ZN16Screen2Presenter10deactivateEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[19a]">Screen2Presenter::memChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter10memChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[198]">Screen2Presenter::diskChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter11diskChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[19b]">Screen2Presenter::timeChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter11timeChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[19c]">Screen2Presenter::zoneChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter11zoneChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[199]">Screen2Presenter::diskLoadChanged()</a> from screen2presenter.o(i._ZN16Screen2Presenter15diskLoadChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[194]">Screen2Presenter::activate()</a> from screen2presenter.o(i._ZN16Screen2Presenter8activateEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[196]">Screen2Presenter::~Screen2Presenter()</a> from screen2presenter.o(i._ZN16Screen2PresenterD1Ev) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[1a4]">MainBoardViewBase::setupScreen()</a> from mainboardviewbase.o(i._ZN17MainBoardViewBase11setupScreenEv) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[101]">MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from mainboardviewbase.o(i._ZN17MainBoardViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from mainboardviewbase.o(.constdata)
 <LI><a href="#[1a3]">MainBoardViewBase::~MainBoardViewBase()</a> from mainboardviewbase.o(i._ZN17MainBoardViewBaseD1Ev) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[1a6]">MarkerHistoryView::setupScreen()</a> from markerhistoryview.o(i._ZN17MarkerHistoryView11setupScreenEv) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[1a7]">MarkerHistoryView::tearDownScreen()</a> from markerhistoryview.o(i._ZN17MarkerHistoryView14tearDownScreenEv) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[1a5]">MarkerHistoryView::~MarkerHistoryView()</a> from markerhistoryview.o(i._ZN17MarkerHistoryViewD1Ev) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[1a9]">MainBoardPresenter::deactivate()</a> from mainboardpresenter.o(i._ZN18MainBoardPresenter10deactivateEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[1a8]">MainBoardPresenter::activate()</a> from mainboardpresenter.o(i._ZN18MainBoardPresenter8activateEv) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[1aa]">MainBoardPresenter::~MainBoardPresenter()</a> from mainboardpresenter.o(i._ZN18MainBoardPresenterD1Ev) referenced from mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
 <LI><a href="#[1af]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1b5]">sub_InformationView::setupScreen()</a> from sub_informationview.o(i._ZN19sub_InformationView11setupScreenEv) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[1b6]">sub_InformationView::tearDownScreen()</a> from sub_informationview.o(i._ZN19sub_InformationView14tearDownScreenEv) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[1b4]">sub_InformationView::~sub_InformationView()</a> from sub_informationview.o(i._ZN19sub_InformationViewD1Ev) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[1b8]">CustomContainer1Base::initialize()</a> from customcontainer1base.o(i._ZN20CustomContainer1Base10initializeEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[18f]">CustomContainer1Base::functionPlay()</a> from customcontainer1.o(i._ZN20CustomContainer1Base12functionPlayEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[18f]">CustomContainer1Base::functionPlay()</a> from customcontainer1.o(i._ZN20CustomContainer1Base12functionPlayEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[fa]">CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from customcontainer1base.o(i._ZN20CustomContainer1Base21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from customcontainer1base.o(.constdata)
 <LI><a href="#[1b7]">CustomContainer1Base::~CustomContainer1Base()</a> from customcontainer1base.o(i._ZN20CustomContainer1BaseD1Ev) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[1b9]">HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[1bc]">HardwareMJPEGDecoder::getNumberOfFrames()</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[1ba]">HardwareMJPEGDecoder::gotoFrame(unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[da]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[da]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[1be]">STM32TouchController::sampleTouch(int&, int&)</a> from stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[1bd]">STM32TouchController::init()</a> from stm32touchcontroller.o(i._ZN20STM32TouchController4initEv) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[dc]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[dc]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[159]">TouchGFXGeneratedHAL::FlushCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[159]">TouchGFXGeneratedHAL::FlushCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c7]">TouchGFXGeneratedHAL::beginFrame()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10beginFrameEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1bf]">TouchGFXGeneratedHAL::initialize()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10initializeEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[158]">TouchGFXGeneratedHAL::InvalidateCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[158]">TouchGFXGeneratedHAL::InvalidateCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c3]">TouchGFXGeneratedHAL::enableInterrupts()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16enableInterruptsEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c0]">TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c4]">TouchGFXGeneratedHAL::disableInterrupts()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17disableInterruptsEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c9]">TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c2]">TouchGFXGeneratedHAL::configureInterrupts()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL19configureInterruptsEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c5]">TouchGFXGeneratedHAL::enableLCDControllerInterrupt()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c8]">TouchGFXGeneratedHAL::endFrame()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL8endFrameEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[13b]">TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[13b]">TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1cb]">MarkerHistoryViewBase::setupScreen()</a> from markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBase11setupScreenEv) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[102]">MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from markerhistoryviewbase.o(.constdata)
 <LI><a href="#[1ca]">MarkerHistoryViewBase::~MarkerHistoryViewBase()</a> from markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBaseD1Ev) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[1cd]">MarkerHistoryPresenter::deactivate()</a> from markerhistorypresenter.o(i._ZN22MarkerHistoryPresenter10deactivateEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[1cc]">MarkerHistoryPresenter::activate()</a> from markerhistorypresenter.o(i._ZN22MarkerHistoryPresenter8activateEv) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[1ce]">MarkerHistoryPresenter::~MarkerHistoryPresenter()</a> from markerhistorypresenter.o(i._ZN22MarkerHistoryPresenterD1Ev) referenced from markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
 <LI><a href="#[df]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[df]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[fb]">FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[fd]">FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[fe]">FrontendApplicationBase::gotoMainBoardScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoMainBoardScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[ff]">FrontendApplicationBase::gotoMarkerHistoryScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase39gotoMarkerHistoryScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[fc]">FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[100]">FrontendApplicationBase::gotosub_InformationScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase41gotosub_InformationScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[1d0]">FrontendApplicationBase::~FrontendApplicationBase()</a> from touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1d2]">sub_InformationViewBase::setupScreen()</a> from sub_informationviewbase.o(i._ZN23sub_InformationViewBase11setupScreenEv) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[106]">sub_InformationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from sub_informationviewbase.o(i._ZN23sub_InformationViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from sub_informationviewbase.o(.constdata)
 <LI><a href="#[1d1]">sub_InformationViewBase::~sub_InformationViewBase()</a> from sub_informationviewbase.o(i._ZN23sub_InformationViewBaseD1Ev) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[1d4]">sub_InformationPresenter::deactivate()</a> from sub_informationpresenter.o(i._ZN24sub_InformationPresenter10deactivateEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[1d3]">sub_InformationPresenter::activate()</a> from sub_informationpresenter.o(i._ZN24sub_InformationPresenter8activateEv) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[1d5]">sub_InformationPresenter::~sub_InformationPresenter()</a> from sub_informationpresenter.o(i._ZN24sub_InformationPresenterD1Ev) referenced from sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
 <LI><a href="#[1d6]">DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::setRGBBuffer(unsigned char*, unsigned)</a> from touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj) referenced from touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE)
 <LI><a href="#[f3]">DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream()</a> from touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev) referenced from touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev)
 <LI><a href="#[db]">DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev) referenced from touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE)
 <LI><a href="#[db]">DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[1dd]">STM32DMA::getDMAType()</a> from stm32dma.o(i._ZN8STM32DMA10getDMATypeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1da]">STM32DMA::initialize()</a> from stm32dma.o(i._ZN8STM32DMA10initializeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d7]">STM32DMA::getBlitCaps()</a> from stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e1]">STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e2]">STM32DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1dc]">STM32DMA::signalDMAInterrupt()</a> from stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[dd]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[dd]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[1e6]">touchgfx::KeySampler::init()</a> from keysampler.o(i._ZN8touchgfx10KeySampler4initEv) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[1e7]">touchgfx::KeySampler::sample(unsigned char&)</a> from keysampler.o(i._ZN8touchgfx10KeySampler6sampleERh) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[d9]">touchgfx::KeySampler::~KeySampler()</a> from keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[d9]">touchgfx::KeySampler::~KeySampler()</a> from keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev) referenced from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
 <LI><a href="#[1ec]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1ec]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1ec]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1e9]">touchgfx::Transition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1ed]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1ed]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1ed]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1eb]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1eb]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1ea]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1ea]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1e8]">touchgfx::Transition::~Transition()</a> from frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[1ae]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1ae]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1ae]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1ae]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1b2]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1b2]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1b2]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1b2]">touchgfx::Application::drawCachedAreas()</a> from application.o(i._ZN8touchgfx11Application15drawCachedAreasEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1ac]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1ac]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1ac]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1ac]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1cf]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1cf]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1cf]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1b1]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1b1]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1b1]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1b1]">touchgfx::Application::clearCachedAreas()</a> from application.o(i._ZN8touchgfx11Application16clearCachedAreasEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1ab]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1ab]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1ab]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1ab]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1ad]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1ad]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1ad]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1ad]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1ee]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1b3]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1b3]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1b3]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[1b3]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1f8]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1f7]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1fc]">touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1d8]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d8]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1ff]">touchgfx::DMA_Interface::getDMAType()</a> from dma.o(i._ZN8touchgfx13DMA_Interface10getDMATypeEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1fe]">touchgfx::DMA_Interface::initialize()</a> from dma.o(i._ZN8touchgfx13DMA_Interface10initializeEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1e3]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e3]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1e4]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e4]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1e0]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e0]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1df]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1df]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1e5]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e5]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1d9]">touchgfx::DMA_Interface::flush()</a> from stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d9]">touchgfx::DMA_Interface::flush()</a> from stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1db]">touchgfx::DMA_Interface::start()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5startEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1db]">touchgfx::DMA_Interface::start()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5startEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1de]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1de]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[b5]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[b5]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_arial_30_4bpp.o(i._Z21getFont_arial_30_4bppv)
 <LI><a href="#[b5]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_consola_20_4bpp.o(i._Z23getFont_consola_20_4bppv)
 <LI><a href="#[b5]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
 <LI><a href="#[218]">touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)</a> from scalableimage.o(i._ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1fd]">touchgfx::AbstractButton::executeAction()</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1fd]">touchgfx::AbstractButton::executeAction()</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[1fd]">touchgfx::AbstractButton::executeAction()</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1fd]">touchgfx::AbstractButton::executeAction()</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1fd]">touchgfx::AbstractButton::executeAction()</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[219]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[219]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[219]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[219]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[21c]">touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from buttonwithicon.o(i._ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[21a]">touchgfx::ButtonWithIcon::~ButtonWithIcon()</a> from screen1view.o(i._ZN8touchgfx14ButtonWithIconD1Ev) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1b0]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[1b0]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[1b0]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[221]">touchgfx::SnapshotWidget::makeSnapshot(unsigned short)</a> from snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEt) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[220]">touchgfx::SnapshotWidget::makeSnapshot()</a> from snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[224]">touchgfx::ButtonWithLabel::~ButtonWithLabel()</a> from screen2view.o(i._ZN8touchgfx15ButtonWithLabelD1Ev) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[228]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[22b]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[22c]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[22a]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::init()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[229]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tearDown()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[227]">touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::~SlideTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[22d]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[230]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[231]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[232]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[22f]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[22e]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[233]">touchgfx::MCUInstrumentation::setMCUActive(bool)</a> from touchgfxhal.o(i._ZN8touchgfx18MCUInstrumentation12setMCUActiveEb) referenced from touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[234]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[234]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[235]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[235]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[237]">touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[23f]">touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[23a]">touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[23b]">touchgfx::ScrollableContainer::handleTickEvent()</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleTickEventEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[238]">touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[239]">touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[23e]">touchgfx::ScrollableContainer::moveChildrenRelative(short, short)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[23c]">touchgfx::ScrollableContainer::add(touchgfx::Drawable&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[241]">touchgfx::ScrollableContainer::doScroll(short, short)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer8doScrollEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[236]">touchgfx::ScrollableContainer::~ScrollableContainer()</a> from markerhistoryview.o(i._ZN8touchgfx19ScrollableContainerD1Ev) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[242]">touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)</a> from mainboardviewbase.o(i._ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx20AbstractPainterColorE)
 <LI><a href="#[243]">touchgfx::AbstractPainterRGB565::~AbstractPainterRGB565__sub_object()</a> from mainboardviewbase.o(i._ZN8touchgfx21AbstractPainterRGB565D2Ev) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[244]">touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</a> from screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[251]">touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards()</a> from screen1viewbase.o(i._ZN8touchgfx24TextAreaWithTwoWildcardsD1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[254]">touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()</a> from screen1view.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[257]">touchgfx::CortexMMCUInstrumentation::getCPUCycles()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[258]">touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[256]">touchgfx::CortexMMCUInstrumentation::init()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[d8]">touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[d8]">touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev) referenced from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
 <LI><a href="#[259]">touchgfx::Box::~Box()</a> from markerhistoryview.o(i._ZN8touchgfx3BoxD1Ev) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[263]">touchgfx::HAL::FlushCache()</a> from hal.o(i._ZN8touchgfx3HAL10FlushCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[260]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[150]">touchgfx::HAL::getDMAType()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[150]">touchgfx::HAL::getDMAType()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[150]">touchgfx::HAL::getDMAType()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[25d]">touchgfx::HAL::initialize()</a> from hal.o(i._ZN8touchgfx3HAL10initializeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[13c]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[13c]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[13c]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[141]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[141]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[141]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[262]">touchgfx::HAL::InvalidateCache()</a> from hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[146]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[146]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[146]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[138]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[138]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[138]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[140]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[140]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[140]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[25e]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[136]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[136]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[136]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[14f]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14f]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[14f]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[139]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[139]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[139]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[14c]">touchgfx::HAL::setAnimationStorage(void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14c]">touchgfx::HAL::setAnimationStorage(void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[14c]">touchgfx::HAL::setAnimationStorage(void*)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[145]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[145]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[145]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[144]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[144]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[144]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[132]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[132]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[132]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[14d]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14d]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[14d]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[1c6]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1c6]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[157]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[157]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[157]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[151]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[151]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[151]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[155]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[155]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[155]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[156]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[156]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[156]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[13d]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[13d]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[13d]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[13f]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[13f]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[13f]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[13e]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[13e]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[13e]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[143]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[143]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[143]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[142]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[142]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[142]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[261]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[137]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[137]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[137]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[25f]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[14e]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[14e]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[14e]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[2c3]">touchgfx::LCD::drawTextureMapQuad(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</a> from lcd.o(i._ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2c5]">touchgfx::LCD::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</a> from lcd.o(i._ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2c2]">touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</a> from lcd.o(i._ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[f4]">touchgfx::Rect::Rect()</a> from customcontainer1base.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
 <LI><a href="#[26a]">touchgfx::View&lang;Screen1Presenter&rang;::~View()</a> from screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[26c]">touchgfx::View&lang;Screen2Presenter&rang;::~View()</a> from screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[26d]">touchgfx::View&lang;MainBoardPresenter&rang;::~View()</a> from mainboardviewbase.o(i._ZN8touchgfx4ViewI18MainBoardPresenterED1Ev) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[26e]">touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View()</a> from markerhistoryviewbase.o(i._ZN8touchgfx4ViewI22MarkerHistoryPresenterED1Ev) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[26f]">touchgfx::View&lang;sub_InformationPresenter&rang;::~View()</a> from sub_informationviewbase.o(i._ZN8touchgfx4ViewI24sub_InformationPresenterED1Ev) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[217]">touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</a> from image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[217]">touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</a> from image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[270]">touchgfx::Image::~Image()</a> from mainboardview.o(i._ZN8touchgfx5ImageD1Ev) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[b7]">touchgfx::BlitOp::BlitOp()</a> from stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32dma.o(i._ZN8STM32DMAC1Ev)
 <LI><a href="#[226]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[226]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[273]">touchgfx::Button::~Button()</a> from mainboardview.o(i._ZN8touchgfx6ButtonD1Ev) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[274]">touchgfx::Canvas::~Canvas()</a> from line.o(i._ZN8touchgfx6CanvasD1Ev) referenced from line.o(.constdata__ZTVN8touchgfx6CanvasE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[26b]">touchgfx::Screen::setupScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[11f]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[167]">touchgfx::Screen::tearDownScreen()</a> from mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[119]">touchgfx::Screen::afterTransition()</a> from mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[11c]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[12a]">touchgfx::Screen::handleTickEvent()</a> from mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[11b]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[11d]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from mainboardview.o(.constdata__ZTV13MainBoardView)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from sub_informationview.o(.constdata__ZTV19sub_InformationView)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
 <LI><a href="#[117]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[275]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[27a]">touchgfx::Slider::setValueRange(int, int)</a> from slider.o(i._ZN8touchgfx6Slider13setValueRangeEii) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[279]">touchgfx::Slider::setValueRange(int, int, int)</a> from slider.o(i._ZN8touchgfx6Slider13setValueRangeEiii) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[277]">touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)</a> from slider.o(i._ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[276]">touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)</a> from slider.o(i._ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[278]">touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from slider.o(i._ZN8touchgfx6Slider19setupVerticalSliderEttttt) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[27c]">touchgfx::Slider::updateIndicatorPosition(short)</a> from slider.o(i._ZN8touchgfx6Slider23updateIndicatorPositionEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[27b]">touchgfx::Slider::setValue(int)</a> from slider.o(i._ZN8touchgfx6Slider8setValueEi) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[1f3]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[282]">touchgfx::Widget::~Widget__sub_object()</a> from mainboardview.o(i._ZN8touchgfx6WidgetD2Ev) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[b8]">touchgfx::CWRUtil::Q5::Q5()</a> from line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev) referenced from line.o(i._ZN8touchgfx4LineC1Ev)
 <LI><a href="#[283]">touchgfx::Outline::~Outline()</a> from outline.o(i._ZN8touchgfx7OutlineD1Ev) referenced from outline.o(.constdata__ZTVN8touchgfx7OutlineE)
 <LI><a href="#[285]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[284]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[288]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)</a> from screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[287]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()</a> from screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[28b]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[28a]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[28e]">touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from mainboardviewbase.o(t._ZN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[28d]">touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from mainboardviewbase.o(i._ZN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[291]">touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from customcontainer1base.o(t._ZN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[290]">touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from customcontainer1base.o(i._ZN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvED1Ev) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[294]">touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from markerhistoryviewbase.o(t._ZN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[293]">touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from markerhistoryviewbase.o(i._ZN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[297]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[296]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()</a> from frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[29a]">touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from sub_informationviewbase.o(t._ZN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[299]">touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from sub_informationviewbase.o(i._ZN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[29d]">touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
 <LI><a href="#[29c]">touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</a> from frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[187]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[1f4]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[185]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[186]">touchgfx::Drawable::handleTickEvent()</a> from customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[183]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[184]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[17f]">touchgfx::Drawable::setX(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[180]">touchgfx::Drawable::setY(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[188]">touchgfx::Drawable::moveTo(short, short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[181]">touchgfx::Drawable::setWidth(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[182]">touchgfx::Drawable::setHeight(short)</a> from customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[2bf]">touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2ba]">touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2c4]">touchgfx::LCD16bpp::getTextureMapperDrawScanLine(const touchgfx::TextureSurface&, unsigned short, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2bd]">touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2bc]">touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[29e]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
 <LI><a href="#[b9]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
 <LI><a href="#[b9]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[29f]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
 <LI><a href="#[ba]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
 <LI><a href="#[ba]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[2a0]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
 <LI><a href="#[bb]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
 <LI><a href="#[bb]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[2a1]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
 <LI><a href="#[bc]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
 <LI><a href="#[bc]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[2a2]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[c5]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[c5]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
 <LI><a href="#[2a3]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c6]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c6]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
 <LI><a href="#[2a4]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[bf]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[bf]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
 <LI><a href="#[2a5]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[c1]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[c1]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[2a6]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[cd]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[cd]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
 <LI><a href="#[2a7]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[bd]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[bd]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[2a8]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c0]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c0]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
 <LI><a href="#[2a9]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c2]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c2]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[2aa]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[ce]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[ce]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
 <LI><a href="#[2ab]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[d1]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[d1]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
 <LI><a href="#[2ac]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[be]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[be]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[2ad]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[c3]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[c3]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[2ae]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d2]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d2]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
 <LI><a href="#[2af]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[c9]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[c9]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
 <LI><a href="#[2b0]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[cb]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[cb]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[2b1]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[d3]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[d3]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
 <LI><a href="#[2b2]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c4]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[c4]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[2b3]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[c7]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[c7]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[2b4]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[ca]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[ca]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
 <LI><a href="#[2b5]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[cc]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[cc]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[2b6]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d4]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d4]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
 <LI><a href="#[2b7]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[c8]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[c8]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[2b8]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[cf]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[cf]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[2b9]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d0]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[d0]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[2bb]">touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2be]">touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2c6]">touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[de]">touchgfx::LCD16bpp::~LCD16bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[de]">touchgfx::LCD16bpp::~LCD16bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[248]">touchgfx::TextArea::setWidth(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea8setWidthEs) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[248]">touchgfx::TextArea::setWidth(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea8setWidthEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[248]">touchgfx::TextArea::setWidth(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea8setWidthEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[248]">touchgfx::TextArea::setWidth(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea8setWidthEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[249]">touchgfx::TextArea::setHeight(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea9setHeightEs) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[249]">touchgfx::TextArea::setHeight(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea9setHeightEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[249]">touchgfx::TextArea::setHeight(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea9setHeightEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[249]">touchgfx::TextArea::setHeight(short)</a> from markerhistoryviewbase.o(i._ZN8touchgfx8TextArea9setHeightEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[2c7]">touchgfx::TextArea::~TextArea()</a> from mainboardview.o(i._ZN8touchgfx8TextAreaD1Ev) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[18d]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[18d]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[18d]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[18d]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[18d]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[17c]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17c]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17c]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17c]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[189]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18c]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[18c]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[18c]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[18c]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[18c]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18a]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[18a]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[18a]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[18a]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18b]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[18b]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[18b]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[18b]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[18b]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[2cb]">touchgfx::Container::~Container()</a> from markerhistoryview.o(i._ZN8touchgfx9ContainerD1Ev) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[2cd]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[2cc]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EED1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[2cf]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[2ce]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[2d1]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEE)
 <LI><a href="#[2d0]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEE)
 <LI><a href="#[2d3]">touchgfx::Presenter::deactivate()</a> from mainboardpresenter.o(i._ZN8touchgfx9Presenter10deactivateEv) referenced from mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[2d2]">touchgfx::Presenter::activate()</a> from mainboardpresenter.o(i._ZN8touchgfx9Presenter8activateEv) referenced from mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[2d4]">touchgfx::Presenter::~Presenter()</a> from mainboardpresenter.o(i._ZN8touchgfx9PresenterD1Ev) referenced from mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[13a]">TouchGFXHAL::getTFTFrameBuffer() const</a> from touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[1bb]">HardwareMJPEGDecoder::getCurrentFrameNumber() const</a> from hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[1c1]">TouchGFXGeneratedHAL::getTFTFrameBuffer() const</a> from touchgfxgeneratedhal.o(i._ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv) referenced from touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
 <LI><a href="#[1f1]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f1]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1f0]">touchgfx::CanvasWidget::getSolidRect() const</a> from line.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f0]">touchgfx::CanvasWidget::getSolidRect() const</a> from line.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1f6]">touchgfx::CanvasWidget::getMinimalRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1ef]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1ef]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1f5]">touchgfx::CanvasWidget::getAlpha() const</a> from line.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f5]">touchgfx::CanvasWidget::getAlpha() const</a> from line.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[20b]">touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[20d]">touchgfx::GeneratedFont::getGSUBTable() const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getGSUBTableEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[20f]">touchgfx::GeneratedFont::getPixelData(const touchgfx::GlyphNode*) const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[20e]">touchgfx::GeneratedFont::getContextualFormsTable() const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[210]">touchgfx::PainterRGB565::getRenderingMethod() const</a> from painterrgb565.o(i._ZNK8touchgfx13PainterRGB56518getRenderingMethodEv) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[213]">touchgfx::PainterRGB565::paint(unsigned char*, short, short, short, short, unsigned char) const</a> from painterrgb565.o(i._ZNK8touchgfx13PainterRGB5655paintEPhssssh) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[212]">touchgfx::PainterRGB565::tearDown() const</a> from painterrgb565.o(i._ZNK8touchgfx13PainterRGB5658tearDownEv) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[215]">touchgfx::ScalableImage::getSolidRect() const</a> from scalableimage.o(i._ZNK8touchgfx13ScalableImage12getSolidRectEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[214]">touchgfx::ScalableImage::draw(const touchgfx::Rect&) const</a> from scalableimage.o(i._ZNK8touchgfx13ScalableImage4drawERKNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[21b]">touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const</a> from buttonwithicon.o(i._ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[21e]">touchgfx::SnapshotWidget::getSolidRect() const</a> from snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget12getSolidRectEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[21f]">touchgfx::SnapshotWidget::invalidateContent() const</a> from snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget17invalidateContentEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[21d]">touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const</a> from snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[222]">touchgfx::AbstractPainter::getRenderingMethod() const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[222]">touchgfx::AbstractPainter::getRenderingMethod() const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[211]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[211]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[211]">touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[223]">touchgfx::AbstractPainter::tearDown() const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[223]">touchgfx::AbstractPainter::tearDown() const</a> from mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[225]">touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</a> from buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[23d]">touchgfx::ScrollableContainer::getContainedArea() const</a> from scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer16getContainedAreaEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[240]">touchgfx::ScrollableContainer::getChildrenContainedArea() const</a> from scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[24e]">touchgfx::TextAreaWithOneWildcard::getWildcard1() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[252]">touchgfx::TextAreaWithTwoWildcards::getWildcard1() const</a> from screen1viewbase.o(i._ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[253]">touchgfx::TextAreaWithTwoWildcards::getWildcard2() const</a> from screen1viewbase.o(i._ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard2Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[247]">touchgfx::TextAreaWithWildcardBase::invalidateContent() const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[247]">touchgfx::TextAreaWithWildcardBase::invalidateContent() const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[247]">touchgfx::TextAreaWithWildcardBase::invalidateContent() const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[250]">touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[250]">touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[250]">touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[245]">touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[245]">touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[245]">touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const</a> from textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[25b]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[25c]">touchgfx::Box::invalidateContent() const</a> from box.o(i._ZNK8touchgfx3Box17invalidateContentEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[25a]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[264]">touchgfx::Font::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from texts.o(i._ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[265]">touchgfx::Font::getGSUBTable() const</a> from texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[265]">touchgfx::Font::getGSUBTable() const</a> from texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[207]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[207]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[207]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[204]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[204]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[204]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[209]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[209]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[209]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[20a]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[20a]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[20a]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[203]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[203]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[203]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[202]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[202]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[202]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[205]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[205]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[205]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[206]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[206]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[206]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[20c]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[20c]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[20c]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[208]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[208]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[208]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[266]">touchgfx::Font::getContextualFormsTable() const</a> from texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[266]">touchgfx::Font::getContextualFormsTable() const</a> from texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[201]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[201]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[201]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[268]">touchgfx::Line::getMinimalRect() const</a> from line.o(i._ZNK8touchgfx4Line14getMinimalRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[269]">touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</a> from line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[267]">touchgfx::Line::invalidateContent() const</a> from line.o(i._ZNK8touchgfx4Line17invalidateContentEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[272]">touchgfx::Image::getSolidRect() const</a> from image.o(i._ZNK8touchgfx5Image12getSolidRectEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[216]">touchgfx::Image::invalidateContent() const</a> from image.o(i._ZNK8touchgfx5Image17invalidateContentEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[216]">touchgfx::Image::invalidateContent() const</a> from image.o(i._ZNK8touchgfx5Image17invalidateContentEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[271]">touchgfx::Image::draw(const touchgfx::Rect&) const</a> from image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1fa]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1fa]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1fa]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1fa]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1fb]">touchgfx::Button::invalidateContent() const</a> from button.o(i._ZNK8touchgfx6Button17invalidateContentEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1fb]">touchgfx::Button::invalidateContent() const</a> from button.o(i._ZNK8touchgfx6Button17invalidateContentEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1fb]">touchgfx::Button::invalidateContent() const</a> from button.o(i._ZNK8touchgfx6Button17invalidateContentEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1fb]">touchgfx::Button::invalidateContent() const</a> from button.o(i._ZNK8touchgfx6Button17invalidateContentEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1f9]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[1f9]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[27e]">touchgfx::Slider::positionToValue(short) const</a> from slider.o(i._ZNK8touchgfx6Slider15positionToValueEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[27d]">touchgfx::Slider::valueToPosition(int) const</a> from slider.o(i._ZNK8touchgfx6Slider15valueToPositionEi) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[281]">touchgfx::Slider::getValueRangeSize() const</a> from slider.o(i._ZNK8touchgfx6Slider17getValueRangeSizeEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[27f]">touchgfx::Slider::getIndicatorRadius() const</a> from slider.o(i._ZNK8touchgfx6Slider18getIndicatorRadiusEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[280]">touchgfx::Slider::getIndicatorPositionRangeSize() const</a> from slider.o(i._ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[286]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[289]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::isValid() const</a> from screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[28c]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[28f]">touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from mainboardviewbase.o(t._ZNK8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[292]">touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from customcontainer1base.o(t._ZNK8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[295]">touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from markerhistoryviewbase.o(t._ZNK8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[298]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[29b]">touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from sub_informationviewbase.o(t._ZNK8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[17a]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[17d]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[179]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[1f2]">touchgfx::Drawable::invalidateContent() const</a> from customcontainer1base.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[1f2]">touchgfx::Drawable::invalidateContent() const</a> from customcontainer1base.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[1f2]">touchgfx::Drawable::invalidateContent() const</a> from customcontainer1base.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[1f2]">touchgfx::Drawable::invalidateContent() const</a> from customcontainer1base.o(i._ZNK8touchgfx8Drawable17invalidateContentEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[17e]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[2c0]">touchgfx::LCD16bpp::framebufferFormat() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[2c1]">touchgfx::LCD16bpp::framebufferStride() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferStrideEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[24a]">touchgfx::TextArea::getAlignment() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getAlignmentEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[24a]">touchgfx::TextArea::getAlignment() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getAlignmentEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[24a]">touchgfx::TextArea::getAlignment() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getAlignmentEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[24a]">touchgfx::TextArea::getAlignment() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getAlignmentEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[246]">touchgfx::TextArea::getSolidRect() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[246]">touchgfx::TextArea::getSolidRect() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[246]">touchgfx::TextArea::getSolidRect() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[246]">touchgfx::TextArea::getSolidRect() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[24c]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[24c]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[24c]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[24c]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[255]">touchgfx::TextArea::getWildcard1() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getWildcard1Ev) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[255]">touchgfx::TextArea::getWildcard1() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getWildcard1Ev) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[24f]">touchgfx::TextArea::getWildcard2() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getWildcard2Ev) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[24f]">touchgfx::TextArea::getWildcard2() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getWildcard2Ev) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[24f]">touchgfx::TextArea::getWildcard2() const</a> from markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getWildcard2Ev) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[24b]">touchgfx::TextArea::getTextHeight() const</a> from textarea.o(i._ZNK8touchgfx8TextArea13getTextHeightEv) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[24b]">touchgfx::TextArea::getTextHeight() const</a> from textarea.o(i._ZNK8touchgfx8TextArea13getTextHeightEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[24b]">touchgfx::TextArea::getTextHeight() const</a> from textarea.o(i._ZNK8touchgfx8TextArea13getTextHeightEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[24b]">touchgfx::TextArea::getTextHeight() const</a> from textarea.o(i._ZNK8touchgfx8TextArea13getTextHeightEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[2c9]">touchgfx::TextArea::invalidateContent() const</a> from textarea.o(i._ZNK8touchgfx8TextArea17invalidateContentEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[24d]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[24d]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
 <LI><a href="#[24d]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[24d]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[2ca]">touchgfx::TextArea::calculateBoundingArea() const</a> from textarea.o(i._ZNK8touchgfx8TextArea21calculateBoundingAreaEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[2c8]">touchgfx::TextArea::draw(const touchgfx::Rect&) const</a> from textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[200]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[200]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[178]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[178]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[178]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[178]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[178]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[17b]">touchgfx::Container::invalidateContent() const</a> from container.o(i._ZNK8touchgfx9Container17invalidateContentEv) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[17b]">touchgfx::Container::invalidateContent() const</a> from container.o(i._ZNK8touchgfx9Container17invalidateContentEv) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[17b]">touchgfx::Container::invalidateContent() const</a> from container.o(i._ZNK8touchgfx9Container17invalidateContentEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[17b]">touchgfx::Container::invalidateContent() const</a> from container.o(i._ZNK8touchgfx9Container17invalidateContentEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[17b]">touchgfx::Container::invalidateContent() const</a> from container.o(i._ZNK8touchgfx9Container17invalidateContentEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[177]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from customcontainer1.o(.constdata__ZTV16CustomContainer1)
 <LI><a href="#[177]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
 <LI><a href="#[177]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[177]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[177]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[19d]">thunk{-4} to Screen2Presenter::cpuChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter10cpuChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[1a0]">thunk{-4} to Screen2Presenter::memChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter10memChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[19e]">thunk{-4} to Screen2Presenter::diskChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter11diskChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[1a1]">thunk{-4} to Screen2Presenter::timeChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter11timeChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[1a2]">thunk{-4} to Screen2Presenter::zoneChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter11zoneChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[19f]">thunk{-4} to Screen2Presenter::diskLoadChanged()</a> from screen2presenter.o(i._ZThn4_N16Screen2Presenter15diskLoadChangedEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 12 times from hardwaremjpegdecoder.o(.constdata__ZTV12MJPEGDecoder)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx12FontProviderE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from customcontainer1base.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen1viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_6SliderEivEE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRNS_8DrawableEvvEE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIvvvEE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx15TouchControllerE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 11 times from touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15VideoControllerE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from touchgfxhal.o(.constdata__ZTVN8touchgfx16ButtonControllerE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[15b]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[9b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[2d9]">__sti___15_Application_cpp_63cd8d44</a> from application.o(i.__sti___15_Application_cpp_63cd8d44) referenced from application.o(.init_array)
 <LI><a href="#[2d5]">__sti___15_TouchGFXHAL_cpp_c3b64dc6</a> from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6) referenced from touchgfxhal.o(.init_array)
 <LI><a href="#[2d8]">__sti___21_typedtextdatabase_cpp_05ec7672</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[2d7]">__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</a> from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb) referenced from touchgfxgeneratedhal.o(.init_array)
 <LI><a href="#[2d6]">__sti___25_TouchGFXConfiguration_cpp_f5abfd34</a> from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34) referenced from touchgfxconfiguration.o(.init_array)
 <LI><a href="#[2da]">__sti___7_LCD_cpp_86507772</a> from lcd.o(i.__sti___7_LCD_cpp_86507772) referenced from lcd.o(.init_array)
 <LI><a href="#[9d]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[9c]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[d6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[d7]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e1]">dhcpClientProcessMessage</a> from dhcp_client_misc.o(i.dhcpClientProcessMessage) referenced from dhcp_client.o(i.dhcpClientStart)
 <LI><a href="#[e2]">dnsProcessResponse</a> from dns_client.o(i.dnsProcessResponse) referenced from dns_client.o(i.dnsResolve)
 <LI><a href="#[d5]">fputc</a> from debug.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[d5]">fputc</a> from debug.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[20]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[20]">free</a> from mallocr.o(i.__free$realloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[15]">ft6x06_Init</a> from ft6x06.o(i.ft6x06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[16]">ft6x06_ReadID</a> from ft6x06.o(i.ft6x06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[17]">ft6x06_Reset</a> from ft6x06.o(i.ft6x06_Reset) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1c]">ft6x06_TS_ClearIT</a> from ft6x06.o(i.ft6x06_TS_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[19]">ft6x06_TS_DetectTouch</a> from ft6x06.o(i.ft6x06_TS_DetectTouch) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1e]">ft6x06_TS_DisableIT</a> from ft6x06.o(i.ft6x06_TS_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1b]">ft6x06_TS_EnableIT</a> from ft6x06.o(i.ft6x06_TS_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1a]">ft6x06_TS_GetXY</a> from ft6x06.o(i.ft6x06_TS_GetXY) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1d]">ft6x06_TS_ITStatus</a> from ft6x06.o(i.ft6x06_TS_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[18]">ft6x06_TS_Start</a> from ft6x06.o(i.ft6x06_TS_Start) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[eb]">ftpTaskfun</a> from main.o(i.ftpTaskfun) referenced from main.o(i.main)
 <LI><a href="#[9e]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[10a]">lan8742DisableIrq</a> from lan8742_driver.o(i.lan8742DisableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[109]">lan8742EnableIrq</a> from lan8742_driver.o(i.lan8742EnableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[10b]">lan8742EventHandler</a> from lan8742_driver.o(i.lan8742EventHandler) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[107]">lan8742Init</a> from lan8742_driver.o(i.lan8742Init) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[108]">lan8742Tick</a> from lan8742_driver.o(i.lan8742Tick) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[e3]">llmnrProcessQuery</a> from llmnr_responder.o(i.llmnrProcessQuery) referenced from llmnr_responder.o(i.llmnrResponderInit)
 <LI><a href="#[99]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1f]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[1f]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[ec]">nbnsProcessMessage</a> from nbns_common.o(i.nbnsProcessMessage) referenced from nbns_common.o(i.nbnsInit)
 <LI><a href="#[ed]">netTask</a> from net.o(i.netTask) referenced from net.o(i.netInit)
 <LI><a href="#[f1]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[ee]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[f2]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[e4]">pvPortMalloc</a> from heap_4.o(i.pvPortMalloc) referenced from main.o(i.main)
 <LI><a href="#[21]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[21]">realloc</a> from mallocr.o(i.realloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[10f]">stm32f7xxEthDisableIrq</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthDisableIrq) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[10e]">stm32f7xxEthEnableIrq</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthEnableIrq) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[110]">stm32f7xxEthEventHandler</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthEventHandler) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[10c]">stm32f7xxEthInit</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthInit) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[115]">stm32f7xxEthReadPhyReg</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthReadPhyReg) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[111]">stm32f7xxEthSendPacket</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthSendPacket) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[10d]">stm32f7xxEthTick</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthTick) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[112]">stm32f7xxEthUpdateMacAddrFilter</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthUpdateMacAddrFilter) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[113]">stm32f7xxEthUpdateMacConfig</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthUpdateMacConfig) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[114]">stm32f7xxEthWritePhyReg</a> from stm32f7xx_eth_driver.o(i.stm32f7xxEthWritePhyReg) referenced from stm32f7xx_eth_driver.o(.constdata)
 <LI><a href="#[e5]">vPortFree</a> from heap_4.o(i.vPortFree) referenced from main.o(i.main)
 <LI><a href="#[e8]">videoTaskFunc</a> from touchgfxgeneratedhal.o(i.videoTaskFunc) referenced from main.o(i.main)
 <LI><a href="#[a]">wm8994_DeInit</a> from wm8994.o(i.wm8994_DeInit) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[9]">wm8994_Init</a> from wm8994.o(i.wm8994_Init) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[d]">wm8994_Pause</a> from wm8994.o(i.wm8994_Pause) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[c]">wm8994_Play</a> from wm8994.o(i.wm8994_Play) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[b]">wm8994_ReadID</a> from wm8994.o(i.wm8994_ReadID) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[14]">wm8994_Reset</a> from wm8994.o(i.wm8994_Reset) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[e]">wm8994_Resume</a> from wm8994.o(i.wm8994_Resume) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[10]">wm8994_SetFrequency</a> from wm8994.o(i.wm8994_SetFrequency) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[12]">wm8994_SetMute</a> from wm8994.o(i.wm8994_SetMute) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[13]">wm8994_SetOutputMode</a> from wm8994.o(i.wm8994_SetOutputMode) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[11]">wm8994_SetVolume</a> from wm8994.o(i.wm8994_SetVolume) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[f]">wm8994_Stop</a> from wm8994.o(i.wm8994_Stop) referenced 2 times from wm8994.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[8ff]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2dc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[309]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[900]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2de]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[901]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[902]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[903]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[904]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2df]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[905]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8e9]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8e8]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; xTaskCallApplicationTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8dc]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e5]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strRemoveTrailingSpace
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCheckCharset
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[9e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[803]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>

<P><STRONG><a name="[2ef]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[67b]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
</UL>

<P><STRONG><a name="[2e8]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
</UL>

<P><STRONG><a name="[906]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthSendPacket
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthReceivePacket
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrFormatIpv6AddrRecord
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[3de]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetLocalAddr
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapQuad(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[746]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[8d2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>

<P><STRONG><a name="[907]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[908]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[909]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientInit
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDeinit
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInit
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDeinit
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[90a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[33a]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[33b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[728]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCheckCharset
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[66f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientGetHeaderField
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPasvCommand
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[72a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[654]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsLocalHostAddr
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[6c3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatRequestHeader
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPasvCommand
</UL>

<P><STRONG><a name="[7dc]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[2ed]"></a>strtok_r</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok$wrapper
</UL>

<P><STRONG><a name="[2ec]"></a>_strtok$wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[71c]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientParsePasvReply
</UL>

<P><STRONG><a name="[744]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseConnectionField
</UL>

<P><STRONG><a name="[74f]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
</UL>

<P><STRONG><a name="[2ee]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientGetHeaderField
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseTransferEncodingField
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
</UL>

<P><STRONG><a name="[2f0]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseConnectionField
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
</UL>

<P><STRONG><a name="[2ff]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2f5]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2f8]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseContentLengthField
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseChunkSize
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientParsePasvReply
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
</UL>

<P><STRONG><a name="[2db]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TouchGFXHAL_cpp_c3b64dc6
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_consola_20_4bpp()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_arial_30_4bpp()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>

<P><STRONG><a name="[90b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[645]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[90c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[90d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2fa]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[300]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[90e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[63c]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[2e0]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[305]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[307]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[642]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2dd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[90f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[910]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[911]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[912]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[303]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[913]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[914]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>AUDIO_GetWavObjectNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, explorer.o(i.AUDIO_GetWavObjectNumber))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[8e6]"></a>AUDIO_IO_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f769i_discovery.o(i.AUDIO_IO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_DeInit
</UL>

<P><STRONG><a name="[30a]"></a>AUDIO_IO_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AUDIO_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[30c]"></a>AUDIO_IO_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AUDIO_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_ReadID
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[30e]"></a>AUDIO_IO_Read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AUDIO_IO_Read &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_ReadID
</UL>

<P><STRONG><a name="[310]"></a>AUDIO_IO_Write</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>

<P><STRONG><a name="[314]"></a>AUDIO_MenuProcess</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, menu.o(i.AUDIO_MenuProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AUDIO_MenuProcess &rArr; AUDIO_ShowWavFiles &rArr; AUDIO_StorageParse &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ChangeSelectMode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ShowWavFiles
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[313]"></a>AUDIO_PLAYER_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, waveplayer.o(i.AUDIO_PLAYER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AUDIO_PLAYER_Init &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_InitApplication
</UL>

<P><STRONG><a name="[319]"></a>AUDIO_PLAYER_Process</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, waveplayer.o(i.AUDIO_PLAYER_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = AUDIO_PLAYER_Process &rArr; AUDIO_PLAYER_Start &rArr; GetFileInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetVolume
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_GetWavObjectNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[318]"></a>AUDIO_PLAYER_Start</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, waveplayer.o(i.AUDIO_PLAYER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AUDIO_PLAYER_Start &rArr; GetFileInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfo
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_GetWavObjectNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[31c]"></a>AUDIO_REC_Process</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, waverecorder.o(i.AUDIO_REC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AUDIO_REC_Process &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Resume
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Pause
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_HeaderUpdate
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[31b]"></a>AUDIO_REC_Start</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, waverecorder.o(i.AUDIO_REC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AUDIO_REC_Start &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_AllocScratch
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_EncInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[316]"></a>AUDIO_ShowWavFiles</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, explorer.o(i.AUDIO_ShowWavFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AUDIO_ShowWavFiles &rArr; AUDIO_StorageParse &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageInit
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[31a]"></a>AUDIO_StorageInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, explorer.o(i.AUDIO_StorageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AUDIO_StorageInit &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ShowWavFiles
</UL>

<P><STRONG><a name="[336]"></a>AUDIO_StorageParse</STRONG> (Thumb, 206 bytes, Stack size 344 bytes, explorer.o(i.AUDIO_StorageParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = AUDIO_StorageParse &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_ShowWavFiles
</UL>

<P><STRONG><a name="[334]"></a>BSP_AUDIO_IN_AllocScratch</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_AllocScratch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_IN_AllocScratch
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
</UL>

<P><STRONG><a name="[33e]"></a>BSP_AUDIO_IN_ClockConfig</STRONG> (Thumb, 118 bytes, Stack size 160 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_AUDIO_IN_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[3fb]"></a>BSP_AUDIO_IN_Error_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Error_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>

<P><STRONG><a name="[386]"></a>BSP_AUDIO_IN_HalfTransfer_CallBack</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, waverecorder.o(i.BSP_AUDIO_IN_HalfTransfer_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxHalfCpltCallback
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvHalfCpltCallback
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvCpltCallback
</UL>

<P><STRONG><a name="[333]"></a>BSP_AUDIO_IN_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_AUDIO_IN_Init &rArr; BSP_AUDIO_IN_InitEx &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
</UL>

<P><STRONG><a name="[341]"></a>BSP_AUDIO_IN_InitEx</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_AUDIO_IN_InitEx &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_GetState
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_MspInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_ClockConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_In_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_In_DeInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Init
</UL>

<P><STRONG><a name="[342]"></a>BSP_AUDIO_IN_MspInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_AUDIO_IN_MspInit &rArr; SAI_AUDIO_IN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_FilterMspInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_ChannelMspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[32f]"></a>BSP_AUDIO_IN_Pause</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_AUDIO_IN_Pause &rArr; HAL_DFSDM_FilterRegularStop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStop_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[335]"></a>BSP_AUDIO_IN_Record</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_AUDIO_IN_Record &rArr; HAL_DFSDM_FilterRegularStart_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStart_DMA
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
</UL>

<P><STRONG><a name="[330]"></a>BSP_AUDIO_IN_Resume</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_AUDIO_IN_Resume &rArr; HAL_DFSDM_FilterRegularStart_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStart_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[32c]"></a>BSP_AUDIO_IN_Stop</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_AUDIO_IN_Stop &rArr; HAL_DFSDM_FilterRegularStop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStop_DMA
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[387]"></a>BSP_AUDIO_IN_TransferComplete_CallBack</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, waverecorder.o(i.BSP_AUDIO_IN_TransferComplete_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCpltCallback
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvHalfCpltCallback
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvCpltCallback
</UL>

<P><STRONG><a name="[345]"></a>BSP_AUDIO_OUT_ClockConfig</STRONG> (Thumb, 102 bytes, Stack size 160 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[3fa]"></a>BSP_AUDIO_OUT_Error_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Error_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>

<P><STRONG><a name="[404]"></a>BSP_AUDIO_OUT_HalfTransfer_CallBack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, waveplayer.o(i.BSP_AUDIO_OUT_HalfTransfer_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>

<P><STRONG><a name="[31e]"></a>BSP_AUDIO_OUT_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_GetState
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_Init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[347]"></a>BSP_AUDIO_OUT_MspInit</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_AUDIO_OUT_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[323]"></a>BSP_AUDIO_OUT_Pause</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Pause
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAPause
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[329]"></a>BSP_AUDIO_OUT_Play</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_AUDIO_OUT_Play &rArr; HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[324]"></a>BSP_AUDIO_OUT_Resume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAResume
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[35a]"></a>BSP_AUDIO_OUT_SetAudioFrameSlot</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_SetAudioFrameSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_AUDIO_OUT_SetAudioFrameSlot &rArr; HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[322]"></a>BSP_AUDIO_OUT_SetVolume</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_AUDIO_OUT_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::functionVolume(int)
</UL>

<P><STRONG><a name="[31d]"></a>BSP_AUDIO_OUT_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[402]"></a>BSP_AUDIO_OUT_TransferComplete_CallBack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, waveplayer.o(i.BSP_AUDIO_OUT_TransferComplete_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>

<P><STRONG><a name="[35c]"></a>BSP_LED_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32d]"></a>BSP_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[315]"></a>BSP_LED_On</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[35e]"></a>BSP_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Toggle &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::functionRecordStart()
</UL>

<P><STRONG><a name="[360]"></a>BSP_PB_GetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_PB_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::sample()
</UL>

<P><STRONG><a name="[362]"></a>BSP_PB_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f769i_discovery.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::init()
</UL>

<P><STRONG><a name="[33c]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f769i_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMDISK_initialize
</UL>

<P><STRONG><a name="[367]"></a>BSP_SDRAM_Initialization_sequence</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f769i_discovery_sdram.o(i.BSP_SDRAM_Initialization_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_SDRAM_Initialization_sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[365]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.BSP_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[4cd]"></a>BSP_TS_GetState</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, stm32touchcontroller.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::sampleTouch(int&, int&)
</UL>

<P><STRONG><a name="[4ce]"></a>BSP_TS_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32touchcontroller.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::init()
</UL>

<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[50f]"></a>CRC_Lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[85]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[373]"></a>DSI_IO_WriteCmd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, touchgfxhal.o(i.DSI_IO_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[8d]"></a>DSI_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DSI_IRQHandler &rArr; HAL_DSI_IRQHandler &rArr; HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ETH_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_eth_driver.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.ETH_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WKUP_IRQHandler &rArr; HAL_ETH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3b8]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S1_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
</UL>

<P><STRONG><a name="[37d]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37e]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[406]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[408]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[409]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[407]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[382]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[380]"></a>HAL_CRC_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[381]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[36e]"></a>HAL_DFSDM_ChannelInit</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DFSDM_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_GetChannelFromInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_Init
</UL>

<P><STRONG><a name="[384]"></a>HAL_DFSDM_ChannelMspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_ChannelMspInit))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
</UL>

<P><STRONG><a name="[370]"></a>HAL_DFSDM_FilterConfigRegChannel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterConfigRegChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DFSDM_FilterConfigRegChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_Init
</UL>

<P><STRONG><a name="[36b]"></a>HAL_DFSDM_FilterErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_DMAError
</UL>

<P><STRONG><a name="[36f]"></a>HAL_DFSDM_FilterInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DFSDM_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterMspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_Init
</UL>

<P><STRONG><a name="[385]"></a>HAL_DFSDM_FilterMspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterMspInit))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterInit
</UL>

<P><STRONG><a name="[36c]"></a>HAL_DFSDM_FilterRegConvCpltCallback</STRONG> (Thumb, 670 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.HAL_DFSDM_FilterRegConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DFSDM_FilterRegConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_TransferComplete_CallBack
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_DMARegularConvCplt
</UL>

<P><STRONG><a name="[36d]"></a>HAL_DFSDM_FilterRegConvHalfCpltCallback</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.HAL_DFSDM_FilterRegConvHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DFSDM_FilterRegConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_TransferComplete_CallBack
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_DMARegularHalfConvCplt
</UL>

<P><STRONG><a name="[34d]"></a>HAL_DFSDM_FilterRegularStart_DMA</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_DFSDM_FilterRegularStart_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_RegConvStart
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Resume
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
</UL>

<P><STRONG><a name="[34c]"></a>HAL_DFSDM_FilterRegularStop_DMA</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DFSDM_FilterRegularStop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_RegConvStop
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Pause
</UL>

<P><STRONG><a name="[38d]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[43b]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[371]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[38e]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[38c]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[38f]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_msp.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[38a]"></a>HAL_DMA_Abort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStop_DMA
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>

<P><STRONG><a name="[429]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[353]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
</UL>

<P><STRONG><a name="[427]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAErrorCallback
</UL>

<P><STRONG><a name="[372]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[354]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_FilterMspInit
</UL>

<P><STRONG><a name="[388]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStart_DMA
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
</UL>

<P><STRONG><a name="[444]"></a>HAL_DSI_ConfigAdaptedCommandMode</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigAdaptedCommandMode))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[443]"></a>HAL_DSI_ConfigCommand</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigCommand))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[442]"></a>HAL_DSI_ConfigErrorMonitor</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigErrorMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[440]"></a>HAL_DSI_ConfigFlowControl</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigFlowControl))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[43e]"></a>HAL_DSI_ConfigHostTimeouts</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigHostTimeouts))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[43f]"></a>HAL_DSI_ConfigPhyTimer</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigPhyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_ConfigPhyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[393]"></a>HAL_DSI_EndOfRefreshCallback</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, touchgfxhal.o(i.HAL_DSI_EndOfRefreshCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_DSI_EndOfRefreshCallback &rArr; LCD_SetUpdateRegion &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Refresh
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[398]"></a>HAL_DSI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[376]"></a>HAL_DSI_IRQHandler</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_DSI_IRQHandler &rArr; HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IRQHandler
</UL>

<P><STRONG><a name="[399]"></a>HAL_DSI_Init</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_DSI_Init &rArr; HAL_DSI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[375]"></a>HAL_DSI_LongWrite</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>

<P><STRONG><a name="[39a]"></a>HAL_DSI_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_DSI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_DSI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
</UL>

<P><STRONG><a name="[395]"></a>HAL_DSI_Refresh</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[445]"></a>HAL_DSI_SetGenericVCID</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_SetGenericVCID))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[441]"></a>HAL_DSI_SetLowPowerRXFilter</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_SetLowPowerRXFilter))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[374]"></a>HAL_DSI_ShortWrite</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[44f]"></a>HAL_DSI_Start</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[397]"></a>HAL_DSI_TearingEffectCallback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, touchgfxhal.o(i.HAL_DSI_TearingEffectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Refresh
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockDMAToFrontPorch(bool)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[30b]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Delay
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[37c]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_ETH_Init</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3a8]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[3a7]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3b6]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[352]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugInit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_ChannelMspInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[361]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_PB_GetState
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[35f]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[35d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_LED_On
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_LED_Off
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>

<P><STRONG><a name="[378]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[44a]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[44b]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[3aa]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[41d]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_EV_IRQHandler
</UL>

<P><STRONG><a name="[421]"></a>HAL_I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[3ac]"></a>HAL_I2C_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[3ae]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[3b3]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[3ab]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[3ad]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 216 bytes, Stack size 176 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[3b9]"></a>HAL_I2S_Init</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, stm32f7xx_hal_i2s.o(i.HAL_I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_I2S_Init &rArr; HAL_I2S_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S1_Init
</UL>

<P><STRONG><a name="[3ba]"></a>HAL_I2S_MspInit</STRONG> (Thumb, 210 bytes, Stack size 176 bytes, stm32f7xx_hal_msp.o(i.HAL_I2S_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_I2S_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[415]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[3bc]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3be]"></a>HAL_InitTick</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3cf]"></a>HAL_JPEG_ConfigInputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_ConfigInputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>

<P><STRONG><a name="[3c6]"></a>HAL_JPEG_ConfigOutputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_ConfigOutputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>

<P><STRONG><a name="[3c4]"></a>HAL_JPEG_DataReadyCallback</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DataReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigOutputBuffer
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
</UL>

<P><STRONG><a name="[42a]"></a>HAL_JPEG_DecodeCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DecodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_JPEG_Decode_DMA</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Init_Process
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[42b]"></a>HAL_JPEG_EncodeCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_EncodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[3cb]"></a>HAL_JPEG_ErrorCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetState
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAErrorCallback
</UL>

<P><STRONG><a name="[3ce]"></a>HAL_JPEG_GetDataCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_GetDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigInputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
</UL>

<P><STRONG><a name="[3cd]"></a>HAL_JPEG_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>

<P><STRONG><a name="[3d0]"></a>HAL_JPEG_GetInfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_JPEG_GetInfo &rArr; JPEG_GetQuality
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_GetQuality
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[3cc]"></a>HAL_JPEG_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>

<P><STRONG><a name="[3d2]"></a>HAL_JPEG_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>

<P><STRONG><a name="[3d5]"></a>HAL_JPEG_InfoReadyCallback</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_InfoReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_JPEG_InfoReadyCallback &rArr; TGFX_JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_GetDecodeColorConvertFunc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[3d8]"></a>HAL_JPEG_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
</UL>

<P><STRONG><a name="[3d9]"></a>HAL_JPEG_MspInit</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f7xx_hal_msp.o(i.HAL_JPEG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_JPEG_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[3c5]"></a>HAL_JPEG_Pause</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_JPEG_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>

<P><STRONG><a name="[3db]"></a>HAL_JPEG_Resume</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
</UL>

<P><STRONG><a name="[3dd]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[3e1]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[3e0]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[3e4]"></a>HAL_LTDC_Init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[3e2]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[3e5]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_msp.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[3e3]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[451]"></a>HAL_LTDC_SetPitch</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_SetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[437]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[436]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[438]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[3bf]"></a>HAL_MspInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3b7]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[356]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_FilterMspInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[355]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_AUDIO_IN_MspInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDMx_FilterMspInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[3bd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3e8]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3e9]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[3ec]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[3ed]"></a>HAL_QSPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[364]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
</UL>

<P><STRONG><a name="[3ee]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[3f0]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[3ef]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[3f1]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[33f]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_ClockConfig
</UL>

<P><STRONG><a name="[3fd]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[340]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1880 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_ClockConfig
</UL>

<P><STRONG><a name="[3f2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3c0]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3a6]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3c1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[3f4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[3f3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[3f5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1296 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[357]"></a>HAL_SAI_DMAPause</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DMAPause))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Pause
</UL>

<P><STRONG><a name="[359]"></a>HAL_SAI_DMAResume</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DMAResume))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Resume
</UL>

<P><STRONG><a name="[34f]"></a>HAL_SAI_DMAStop</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Stop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
</UL>

<P><STRONG><a name="[3f7]"></a>HAL_SAI_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SAI_DeInit &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspDeInit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_DeInit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_In_DeInit
</UL>

<P><STRONG><a name="[3f9]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Error_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[346]"></a>HAL_SAI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[35b]"></a>HAL_SAI_Init</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_Init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_In_Init
</UL>

<P><STRONG><a name="[3f8]"></a>HAL_SAI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[3fc]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[34e]"></a>HAL_SAI_Receive_DMA</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SAI_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Record
</UL>

<P><STRONG><a name="[3ff]"></a>HAL_SAI_RxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxCplt
</UL>

<P><STRONG><a name="[400]"></a>HAL_SAI_RxHalfCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_RxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxHalfCplt
</UL>

<P><STRONG><a name="[358]"></a>HAL_SAI_Transmit_DMA</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>

<P><STRONG><a name="[401]"></a>HAL_SAI_TxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
</UL>

<P><STRONG><a name="[403]"></a>HAL_SAI_TxHalfCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxHalfCplt
</UL>

<P><STRONG><a name="[366]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[405]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[369]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[368]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[412]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[411]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[414]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[3c2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[40a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[3c3]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[40d]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[40c]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[40e]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[40f]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[410]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[413]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[416]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugInit
</UL>

<P><STRONG><a name="[417]"></a>HAL_UART_MspInit</STRONG> (Thumb, 144 bytes, Stack size 176 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[41b]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.I2C4_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C4_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>IdleTaskHook</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, touchgfxhal.o(i.IdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IdleTaskHook &rArr; touchgfx::HAL::setMCUActive(bool) &rArr; touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.vApplicationIdleHook)
</UL>
<P><STRONG><a name="[42c]"></a>JPEG_Decode_DMA</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hardwaremjpegdecoder.o(i.JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = JPEG_Decode_DMA &rArr; HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[3d7]"></a>JPEG_GetDecodeColorConvertFunc</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
</UL>

<P><STRONG><a name="[97]"></a>JPEG_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = JPEG_IRQHandler &rArr; HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[42d]"></a>JPEG_OutputHandler</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, hardwaremjpegdecoder.o(i.JPEG_OutputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[434]"></a>LCD_ReqTear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, touchgfxhal.o(i.LCD_ReqTear))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_ReqTear &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>

<P><STRONG><a name="[394]"></a>LCD_SetUpdateRegion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, touchgfxhal.o(i.LCD_SetUpdateRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_SetUpdateRegion &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[83]"></a>LTDC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[449]"></a>MX_I2C4_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7eb]"></a>MX_LIBJPEG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, libjpeg.o(i.MX_LIBJPEG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[458]"></a>MX_TouchGFX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_touchgfx.o(i.MX_TouchGFX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_TouchGFX_Init &rArr; touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[45b]"></a>OTM8009A_IO_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.OTM8009A_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OTM8009A_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[450]"></a>OTM8009A_Init</STRONG> (Thumb, 862 bytes, Stack size 16 bytes, otm8009a.o(i.OTM8009A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OTM8009A_Init &rArr; DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[45c]"></a>PeriphCommonClock_Config</STRONG> (Thumb, 62 bytes, Stack size 152 bytes, main.o(i.PeriphCommonClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PeriphCommonClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>SDRAMDISK_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sdram_diskio.o(i.SDRAMDISK_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDRAMDISK_initialize &rArr; BSP_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdram_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>SDRAMDISK_ioctl</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdram_diskio.o(i.SDRAMDISK_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDRAMDISK_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdram_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>SDRAMDISK_read</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, sdram_diskio.o(i.SDRAMDISK_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDRAMDISK_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdram_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>SDRAMDISK_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdram_diskio.o(i.SDRAMDISK_status))
<BR>[Address Reference Count : 1]<UL><LI> sdram_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>SDRAMDISK_write</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, sdram_diskio.o(i.SDRAMDISK_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDRAMDISK_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdram_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>StartDefaultTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = StartDefaultTask &rArr; AUDIO_MenuProcess &rArr; AUDIO_ShowWavFiles &rArr; AUDIO_StorageParse &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e9]"></a>StarttftpTask</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(i.StarttftpTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = StarttftpTask &rArr; httpClientTest &rArr; httpClientReadHeader &rArr; httpClientCloseBody &rArr; httpClientReadBody &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_PB_GetState
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddr
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[467]"></a>SystemClock_Config</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[3d6]"></a>TGFX_JPEG_GetDecodeColorConvertFunc</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TGFX_JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
</UL>

<P><STRONG><a name="[468]"></a>TGFX_JPEG_InitColorTables</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_InitColorTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TGFX_JPEG_InitColorTables &rArr; TGFX_JPEG_Init_MCU_LUT
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_Init_MCU_LUT
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitPreProcColorTables
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitPostProcColorTables
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
</UL>

<P><STRONG><a name="[62]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[40b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[46c]"></a>TS_IO_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[46d]"></a>TS_IO_Read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32f769i_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DetectTouch
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
</UL>

<P><STRONG><a name="[46e]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetXY
</UL>

<P><STRONG><a name="[46f]"></a>TS_IO_Write</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_EnableIT
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>

<P><STRONG><a name="[e7]"></a>TouchGFX_Task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_touchgfx.o(i.TouchGFX_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFX_Task &rArr; touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ea]"></a>TriggerTaskfun</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(i.TriggerTaskfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TriggerTaskfun &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_PB_GetState
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_LED_On
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[419]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[41a]"></a>UART_CheckIdleState</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[418]"></a>UART_SetConfig</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[41c]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[472]"></a>User_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_button_led.o(i.User_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = User_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerTaskfun
</UL>

<P><STRONG><a name="[471]"></a>User_LED_On</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_button_led.o(i.User_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = User_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerTaskfun
</UL>

<P><STRONG><a name="[464]"></a>User_PB_GetState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_button_led.o(i.User_PB_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = User_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[474]"></a>getFont_arial_30_4bpp()</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, table_arial_30_4bpp.o(i._Z21getFont_arial_30_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getFont_arial_30_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[477]"></a>getFont_consola_20_4bpp()</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, table_consola_20_4bpp.o(i._Z23getFont_consola_20_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getFont_consola_20_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[478]"></a>getFont_verdana_10_4bpp()</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getFont_verdana_10_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[118]"></a>Screen1View::setupScreen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen1View::setupScreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[121]"></a>Screen1View::functionPlay()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View12functionPlayEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[122]"></a>Screen1View::functionStop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View12functionStopEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[123]"></a>Screen1View::functionPause()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View13functionPauseEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[126]"></a>Screen1View::functionVolume(int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View14functionVolumeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Screen1View::functionVolume(int) &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetVolume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[11a]"></a>Screen1View::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[11e]"></a>Screen1View::handleTickEvent()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Screen1View::handleTickEvent() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[124]"></a>Screen1View::functionRecordStart()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View19functionRecordStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Screen1View::functionRecordStart() &rArr; BSP_LED_Toggle &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[120]"></a>Screen1View::function1()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View9function1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[47b]"></a>Screen1View::Screen1View()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[915]"></a>Screen1View::Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev), UNUSED)

<P><STRONG><a name="[116]"></a>Screen1View::~Screen1View()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen1View::~Screen1View() &rArr; Screen1ViewBase::~Screen1ViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[916]"></a>Screen1View::~Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev), UNUSED)

<P><STRONG><a name="[47d]"></a>Screen2View::displayCPU(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View10displayCPUEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayCPU(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::cpuChanged()
</UL>

<P><STRONG><a name="[47f]"></a>Screen2View::displayMem(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View10displayMemEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayMem(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::memChanged()
</UL>

<P><STRONG><a name="[480]"></a>Screen2View::displayDisk(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View11displayDiskEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayDisk(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::diskChanged()
</UL>

<P><STRONG><a name="[481]"></a>Screen2View::displayTime(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View11displayTimeEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayTime(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::timeChanged()
</UL>

<P><STRONG><a name="[482]"></a>Screen2View::displayZone(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View11displayZoneEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayZone(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::zoneChanged()
</UL>

<P><STRONG><a name="[128]"></a>Screen2View::setupScreen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2View11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen2View::setupScreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[130]"></a>Screen2View::functionFtpGet()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View14functionFtpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[131]"></a>Screen2View::functionFtpPut()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View14functionFtpPutEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[129]"></a>Screen2View::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[483]"></a>Screen2View::displayDiskLoad(char*)</STRONG> (Thumb, 70 bytes, Stack size 168 bytes, screen2view.o(i._ZN11Screen2View15displayDiskLoadEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Screen2View::displayDiskLoad(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::diskLoadChanged()
</UL>

<P><STRONG><a name="[12c]"></a>Screen2View::functionHttpGet()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View15functionHttpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[12d]"></a>Screen2View::functionTftpGet()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View15functionTftpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[12e]"></a>Screen2View::functionTftpPut()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View15functionTftpPutEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[12f]"></a>Screen2View::functionHttpPost()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View16functionHttpPostEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[12b]"></a>Screen2View::functionSetHttpFlag()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View19functionSetHttpFlagEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[484]"></a>Screen2View::Screen2View()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[917]"></a>Screen2View::Screen2View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewC1Ev), UNUSED)

<P><STRONG><a name="[127]"></a>Screen2View::~Screen2View()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen2View::~Screen2View() &rArr; Screen2ViewBase::~Screen2ViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[918]"></a>Screen2View::~Screen2View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewD1Ev), UNUSED)

<P><STRONG><a name="[152]"></a>TouchGFXHAL::beginFrame()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10beginFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::beginFrame()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[133]"></a>TouchGFXHAL::initialize()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CortexMMCUInstrumentation::init()
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockDMAToFrontPorch(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[148]"></a>TouchGFXHAL::enableInterrupts()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[135]"></a>TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[149]"></a>TouchGFXHAL::disableInterrupts()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXHAL::disableInterrupts() &rArr; TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[154]"></a>TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[147]"></a>TouchGFXHAL::configureInterrupts()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TouchGFXHAL::configureInterrupts() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[14a]"></a>TouchGFXHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TouchGFXHAL::enableLCDControllerInterrupt() &rArr; LCD_ReqTear &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[14b]"></a>TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[153]"></a>TouchGFXHAL::endFrame()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TouchGFXHAL::endFrame() &rArr; TouchGFXGeneratedHAL::endFrame() &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[134]"></a>TouchGFXHAL::taskEntry()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[489]"></a>TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, touchgfxhal.o(i._ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short) &rArr; touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[919]"></a>TouchGFXHAL::TouchGFXHAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, touchgfxhal.o(i._ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt), UNUSED)

<P><STRONG><a name="[e0]"></a>TouchGFXHAL::~TouchGFXHAL()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[91a]"></a>TouchGFXHAL::~TouchGFXHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev), UNUSED)

<P><STRONG><a name="[48b]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::gotoStartScreen(FrontendApplication&)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[91b]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[ef]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FrontendHeap::~FrontendHeap() &rArr; touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::~FrontendHeapBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.touchgfx_init)
<LI> touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[91c]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[15d]"></a>MainBoardView::setupScreen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mainboardview.o(i._ZN13MainBoardView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainBoardView::setupScreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardview.o(.constdata__ZTV13MainBoardView)
</UL>
<P><STRONG><a name="[15e]"></a>MainBoardView::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainboardview.o(i._ZN13MainBoardView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardview.o(.constdata__ZTV13MainBoardView)
</UL>
<P><STRONG><a name="[48f]"></a>MainBoardView::MainBoardView()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mainboardview.o(i._ZN13MainBoardViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MainBoardView::MainBoardView() &rArr; MainBoardViewBase::MainBoardViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[91d]"></a>MainBoardView::MainBoardView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainboardview.o(i._ZN13MainBoardViewC1Ev), UNUSED)

<P><STRONG><a name="[15c]"></a>MainBoardView::~MainBoardView()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mainboardview.o(i._ZN13MainBoardViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MainBoardView::~MainBoardView() &rArr; MainBoardViewBase::~MainBoardViewBase() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardview.o(.constdata__ZTV13MainBoardView)
</UL>
<P><STRONG><a name="[91e]"></a>MainBoardView::~MainBoardView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainboardview.o(i._ZN13MainBoardViewD1Ev), UNUSED)

<P><STRONG><a name="[15f]"></a>ModelListener::cpuChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener10cpuChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[162]"></a>ModelListener::memChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener10memChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[160]"></a>ModelListener::diskChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener11diskChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[163]"></a>ModelListener::timeChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener11timeChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[164]"></a>ModelListener::zoneChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener11zoneChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[161]"></a>ModelListener::diskLoadChanged()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN13ModelListener15diskLoadChangedEv))
<BR>[Address Reference Count : 5]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
<LI> mainboardpresenter.o(.constdata__ZTV13ModelListener)
<LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
<LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
<LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[8f7]"></a>ModelListener::bind(Model*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN13ModelListener4bindEP5Model))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[8d4]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[8d3]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[125]"></a>Screen1ViewBase::SWITCH_LED()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN15Screen1ViewBase10SWITCH_LEDEv))
<BR>[Address Reference Count : 2]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[166]"></a>Screen1ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[169]"></a>Screen1ViewBase::functionPlay()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase12functionPlayEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[16a]"></a>Screen1ViewBase::functionStop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase12functionStopEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[16b]"></a>Screen1ViewBase::functionPause()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase13functionPauseEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[16d]"></a>Screen1ViewBase::functionVolume(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase14functionVolumeEi))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[16c]"></a>Screen1ViewBase::functionRecordStart()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase19functionRecordStartEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[103]"></a>Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenNoTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>Screen1ViewBase::function1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase9function1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[47c]"></a>Screen1ViewBase::Screen1ViewBase()</STRONG> (Thumb, 2476 bytes, Stack size 56 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValue(int)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValueRange(int, int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::setColor(touchgfx::colortype)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::setWildcard(const unsigned short*)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setIconXY(short, short)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[91f]"></a>Screen1ViewBase::Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[165]"></a>Screen1ViewBase::~Screen1ViewBase()</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Screen1ViewBase::~Screen1ViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::~ButtonWithIcon()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[920]"></a>Screen1ViewBase::~Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[16f]"></a>Screen2ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[175]"></a>Screen2ViewBase::functionFtpGet()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase14functionFtpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[176]"></a>Screen2ViewBase::functionFtpPut()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase14functionFtpPutEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[171]"></a>Screen2ViewBase::functionHttpGet()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase15functionHttpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[172]"></a>Screen2ViewBase::functionTftpGet()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase15functionTftpGetEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[173]"></a>Screen2ViewBase::functionTftpPut()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase15functionTftpPutEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[174]"></a>Screen2ViewBase::functionHttpPost()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase16functionHttpPostEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[170]"></a>Screen2ViewBase::functionSetHttpFlag()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase19functionSetHttpFlagEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[105]"></a>Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[485]"></a>Screen2ViewBase::Screen2ViewBase()</STRONG> (Thumb, 2378 bytes, Stack size 48 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::setColor(touchgfx::colortype)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::setWildcard(const unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::Screen2View()
</UL>

<P><STRONG><a name="[921]"></a>Screen2ViewBase::Screen2ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>Screen2ViewBase::~Screen2ViewBase()</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Screen2ViewBase::~Screen2ViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen2Presenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::~Screen2View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[922]"></a>Screen2ViewBase::~Screen2ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[18e]"></a>CustomContainer1::initialize()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, customcontainer1.o(i._ZN16CustomContainer110initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomContainer1::initialize()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
</UL>
<P><STRONG><a name="[4b1]"></a>CustomContainer1::CustomContainer1()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, customcontainer1.o(i._ZN16CustomContainer1C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CustomContainer1::CustomContainer1() &rArr; CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[923]"></a>CustomContainer1::CustomContainer1__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, customcontainer1.o(i._ZN16CustomContainer1C1Ev), UNUSED)

<P><STRONG><a name="[15a]"></a>FrontendHeapBase::gotoStartScreen(FrontendApplication&)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FrontendHeapBase::gotoStartScreen(FrontendApplication&) &rArr; FrontendApplicationBase::gotoScreen1ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV16FrontendHeapBase)
<LI> touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[190]"></a>FrontendHeapBase::~FrontendHeapBase()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN16FrontendHeapBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV16FrontendHeapBase)
</UL>
<P><STRONG><a name="[924]"></a>FrontendHeapBase::~FrontendHeapBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN16FrontendHeapBaseD1Ev), UNUSED)

<P><STRONG><a name="[192]"></a>Screen1Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[191]"></a>Screen1Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[8f5]"></a>Screen1Presenter::Screen1Presenter(Screen1View&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[925]"></a>Screen1Presenter::Screen1Presenter__sub_object(Screen1View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View), UNUSED)

<P><STRONG><a name="[193]"></a>Screen1Presenter::~Screen1Presenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[926]"></a>Screen1Presenter::~Screen1Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev), UNUSED)

<P><STRONG><a name="[197]"></a>Screen2Presenter::cpuChanged()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter10cpuChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::cpuChanged() &rArr; Screen2View::displayCPU(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::cpuChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[195]"></a>Screen2Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[19a]"></a>Screen2Presenter::memChanged()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter10memChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::memChanged() &rArr; Screen2View::displayMem(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::memChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[198]"></a>Screen2Presenter::diskChanged()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter11diskChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::diskChanged() &rArr; Screen2View::displayDisk(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::diskChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[19b]"></a>Screen2Presenter::timeChanged()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter11timeChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::timeChanged() &rArr; Screen2View::displayTime(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::timeChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[19c]"></a>Screen2Presenter::zoneChanged()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter11zoneChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::zoneChanged() &rArr; Screen2View::displayZone(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::zoneChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[199]"></a>Screen2Presenter::diskLoadChanged()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, screen2presenter.o(i._ZN16Screen2Presenter15diskLoadChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Screen2Presenter::diskLoadChanged() &rArr; Screen2View::displayDiskLoad(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to Screen2Presenter::diskLoadChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[194]"></a>Screen2Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[8fa]"></a>Screen2Presenter::Screen2Presenter(Screen2View&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterC1ER11Screen2View))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[927]"></a>Screen2Presenter::Screen2Presenter__sub_object(Screen2View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterC1ER11Screen2View), UNUSED)

<P><STRONG><a name="[196]"></a>Screen2Presenter::~Screen2Presenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[928]"></a>Screen2Presenter::~Screen2Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterD1Ev), UNUSED)

<P><STRONG><a name="[1a4]"></a>MainBoardViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
</UL>
<P><STRONG><a name="[101]"></a>MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotosub_InformationScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotosub_InformationScreenNoTransition()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata)
</UL>
<P><STRONG><a name="[490]"></a>MainBoardViewBase::MainBoardViewBase()</STRONG> (Thumb, 2226 bytes, Stack size 48 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MainBoardViewBase::MainBoardViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardView::MainBoardView()
</UL>

<P><STRONG><a name="[929]"></a>MainBoardViewBase::MainBoardViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[1a3]"></a>MainBoardViewBase::~MainBoardViewBase()</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MainBoardViewBase::~MainBoardViewBase() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;MainBoardPresenter&rang;::~View()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterRGB565::~AbstractPainterRGB565__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardView::~MainBoardView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
</UL>
<P><STRONG><a name="[92a]"></a>MainBoardViewBase::~MainBoardViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mainboardviewbase.o(i._ZN17MainBoardViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[1a6]"></a>MarkerHistoryView::setupScreen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN17MarkerHistoryView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MarkerHistoryView::setupScreen() &rArr; MarkerHistoryViewBase::setupScreen() &rArr; CustomContainer1::initialize()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
</UL>
<P><STRONG><a name="[1a7]"></a>MarkerHistoryView::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, markerhistoryview.o(i._ZN17MarkerHistoryView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
</UL>
<P><STRONG><a name="[4bf]"></a>MarkerHistoryView::MarkerHistoryView()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN17MarkerHistoryViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MarkerHistoryView::MarkerHistoryView() &rArr; MarkerHistoryViewBase::MarkerHistoryViewBase() &rArr; CustomContainer1::CustomContainer1() &rArr; CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[92b]"></a>MarkerHistoryView::MarkerHistoryView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN17MarkerHistoryViewC1Ev), UNUSED)

<P><STRONG><a name="[1a5]"></a>MarkerHistoryView::~MarkerHistoryView()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN17MarkerHistoryViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MarkerHistoryView::~MarkerHistoryView() &rArr; MarkerHistoryViewBase::~MarkerHistoryViewBase() &rArr; CustomContainer1Base::~CustomContainer1Base() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
</UL>
<P><STRONG><a name="[92c]"></a>MarkerHistoryView::~MarkerHistoryView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN17MarkerHistoryViewD1Ev), UNUSED)

<P><STRONG><a name="[589]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[588]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[1a9]"></a>MainBoardPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
</UL>
<P><STRONG><a name="[1a8]"></a>MainBoardPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
</UL>
<P><STRONG><a name="[8fb]"></a>MainBoardPresenter::MainBoardPresenter(MainBoardView&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenterC1ER13MainBoardView))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[92d]"></a>MainBoardPresenter::MainBoardPresenter__sub_object(MainBoardView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenterC1ER13MainBoardView), UNUSED)

<P><STRONG><a name="[1aa]"></a>MainBoardPresenter::~MainBoardPresenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTV18MainBoardPresenter)
</UL>
<P><STRONG><a name="[92e]"></a>MainBoardPresenter::~MainBoardPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN18MainBoardPresenterD1Ev), UNUSED)

<P><STRONG><a name="[1af]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; Model::tick() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[48e]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[92f]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[1b5]"></a>sub_InformationView::setupScreen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sub_informationview.o(i._ZN19sub_InformationView11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub_InformationView::setupScreen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
</UL>
<P><STRONG><a name="[1b6]"></a>sub_InformationView::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sub_informationview.o(i._ZN19sub_InformationView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
</UL>
<P><STRONG><a name="[4c3]"></a>sub_InformationView::sub_InformationView()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sub_informationview.o(i._ZN19sub_InformationViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sub_InformationView::sub_InformationView() &rArr; sub_InformationViewBase::sub_InformationViewBase() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[930]"></a>sub_InformationView::sub_InformationView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sub_informationview.o(i._ZN19sub_InformationViewC1Ev), UNUSED)

<P><STRONG><a name="[1b4]"></a>sub_InformationView::~sub_InformationView()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sub_informationview.o(i._ZN19sub_InformationViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sub_InformationView::~sub_InformationView() &rArr; sub_InformationViewBase::~sub_InformationViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
</UL>
<P><STRONG><a name="[931]"></a>sub_InformationView::~sub_InformationView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sub_informationview.o(i._ZN19sub_InformationViewD1Ev), UNUSED)

<P><STRONG><a name="[1b8]"></a>CustomContainer1Base::initialize()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN20CustomContainer1Base10initializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
</UL>
<P><STRONG><a name="[18f]"></a>CustomContainer1Base::functionPlay()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN20CustomContainer1Base12functionPlayEv))
<BR>[Address Reference Count : 2]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
</UL>
<P><STRONG><a name="[fa]"></a>CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, customcontainer1base.o(i._ZN20CustomContainer1Base21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata)
</UL>
<P><STRONG><a name="[4b2]"></a>CustomContainer1Base::CustomContainer1Base()</STRONG> (Thumb, 718 bytes, Stack size 56 bytes, customcontainer1base.o(i._ZN20CustomContainer1BaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1::CustomContainer1()
</UL>

<P><STRONG><a name="[932]"></a>CustomContainer1Base::CustomContainer1Base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, customcontainer1base.o(i._ZN20CustomContainer1BaseC1Ev), UNUSED)

<P><STRONG><a name="[1b7]"></a>CustomContainer1Base::~CustomContainer1Base()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, customcontainer1base.o(i._ZN20CustomContainer1BaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CustomContainer1Base::~CustomContainer1Base() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
</UL>
<P><STRONG><a name="[933]"></a>CustomContainer1Base::~CustomContainer1Base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, customcontainer1base.o(i._ZN20CustomContainer1BaseD1Ev), UNUSED)

<P><STRONG><a name="[1b9]"></a>HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned) &rArr; HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU16(unsigned)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[4c9]"></a>HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhjPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1bc]"></a>HardwareMJPEGDecoder::getNumberOfFrames()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[4c7]"></a>HardwareMJPEGDecoder::getU16(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU16Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HardwareMJPEGDecoder::getU16(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[4c8]"></a>HardwareMJPEGDecoder::getU32(unsigned)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU32Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HardwareMJPEGDecoder::getU32(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[4c6]"></a>HardwareMJPEGDecoder::readData(unsigned, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder8readDataEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareMJPEGDecoder::readData(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[1ba]"></a>HardwareMJPEGDecoder::gotoFrame(unsigned)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardwareMJPEGDecoder::gotoFrame(unsigned) &rArr; HardwareMJPEGDecoder::readData(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[4cb]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HardwareMJPEGDecoder::HardwareMJPEGDecoder() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[934]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[935]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>STM32TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STM32TouchController::sampleTouch(int&, int&) &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[1bd]"></a>STM32TouchController::init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32TouchController::init() &rArr; BSP_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[dc]"></a>STM32TouchController::~STM32TouchController()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[936]"></a>STM32TouchController::~STM32TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[159]"></a>TouchGFXGeneratedHAL::FlushCache()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::FlushCache() &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c7]"></a>TouchGFXGeneratedHAL::beginFrame()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10beginFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::beginFrame()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1bf]"></a>TouchGFXGeneratedHAL::initialize()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::setRGBBuffer(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[158]"></a>TouchGFXGeneratedHAL::InvalidateCache()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::InvalidateCache() &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c3]"></a>TouchGFXGeneratedHAL::enableInterrupts()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16enableInterruptsEv))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c0]"></a>TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c4]"></a>TouchGFXGeneratedHAL::disableInterrupts()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::disableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c9]"></a>TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c2]"></a>TouchGFXGeneratedHAL::configureInterrupts()</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c5]"></a>TouchGFXGeneratedHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1c8]"></a>TouchGFXGeneratedHAL::endFrame()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TouchGFXGeneratedHAL::endFrame() &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::endFrame()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[13b]"></a>TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned) &rArr; touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[1cb]"></a>MarkerHistoryViewBase::setupScreen()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBase11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarkerHistoryViewBase::setupScreen() &rArr; CustomContainer1::initialize()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
</UL>
<P><STRONG><a name="[102]"></a>MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoMainBoardScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransition()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata)
</UL>
<P><STRONG><a name="[4c0]"></a>MarkerHistoryViewBase::MarkerHistoryViewBase()</STRONG> (Thumb, 4596 bytes, Stack size 48 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MarkerHistoryViewBase::MarkerHistoryViewBase() &rArr; CustomContainer1::CustomContainer1() &rArr; CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1::CustomContainer1()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::add(touchgfx::Drawable&)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible(bool)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsColor(touchgfx::colortype)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsAlpha(unsigned char)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::enableHorizontalScroll(bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryView::MarkerHistoryView()
</UL>

<P><STRONG><a name="[937]"></a>MarkerHistoryViewBase::MarkerHistoryViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[1ca]"></a>MarkerHistoryViewBase::~MarkerHistoryViewBase()</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MarkerHistoryViewBase::~MarkerHistoryViewBase() &rArr; CustomContainer1Base::~CustomContainer1Base() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::~CustomContainer1Base()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::~ScrollableContainer()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryView::~MarkerHistoryView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
</UL>
<P><STRONG><a name="[938]"></a>MarkerHistoryViewBase::~MarkerHistoryViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN21MarkerHistoryViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[1cd]"></a>MarkerHistoryPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
</UL>
<P><STRONG><a name="[1cc]"></a>MarkerHistoryPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
</UL>
<P><STRONG><a name="[8fc]"></a>MarkerHistoryPresenter::MarkerHistoryPresenter(MarkerHistoryView&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenterC1ER17MarkerHistoryView))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[939]"></a>MarkerHistoryPresenter::MarkerHistoryPresenter__sub_object(MarkerHistoryView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenterC1ER17MarkerHistoryView), UNUSED)

<P><STRONG><a name="[1ce]"></a>MarkerHistoryPresenter::~MarkerHistoryPresenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> markerhistorypresenter.o(.constdata__ZTV22MarkerHistoryPresenter)
</UL>
<P><STRONG><a name="[93a]"></a>MarkerHistoryPresenter::~MarkerHistoryPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, markerhistorypresenter.o(i._ZN22MarkerHistoryPresenterD1Ev), UNUSED)

<P><STRONG><a name="[df]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
</UL>
<P><STRONG><a name="[93b]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[4b3]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::gotoStartScreen(FrontendApplication&)
</UL>

<P><STRONG><a name="[492]"></a>FrontendApplicationBase::gotoScreen2ScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen2ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[4d1]"></a>FrontendApplicationBase::gotoMainBoardScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase31gotoMainBoardScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoMainBoardScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[fb]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>FrontendApplicationBase::gotoMainBoardScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoMainBoardScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FrontendApplicationBase::gotoMainBoardScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; MainBoardView::MainBoardView() &rArr; MainBoardViewBase::MainBoardViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[493]"></a>FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase35gotoMarkerHistoryScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[4ac]"></a>FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[4b4]"></a>FrontendApplicationBase::gotosub_InformationScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase37gotosub_InformationScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotosub_InformationScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[ff]"></a>FrontendApplicationBase::gotoMarkerHistoryScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase39gotoMarkerHistoryScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FrontendApplicationBase::gotoMarkerHistoryScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; MarkerHistoryView::MarkerHistoryView() &rArr; MarkerHistoryViewBase::MarkerHistoryViewBase() &rArr; CustomContainer1::CustomContainer1() &rArr; CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>FrontendApplicationBase::gotosub_InformationScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase41gotosub_InformationScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FrontendApplicationBase::gotosub_InformationScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; sub_InformationView::sub_InformationView() &rArr; sub_InformationViewBase::sub_InformationViewBase() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[4c2]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[93c]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[1d0]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[93d]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[1d2]"></a>sub_InformationViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
</UL>
<P><STRONG><a name="[106]"></a>sub_InformationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sub_InformationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoMainBoardScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata)
</UL>
<P><STRONG><a name="[4c4]"></a>sub_InformationViewBase::sub_InformationViewBase()</STRONG> (Thumb, 1072 bytes, Stack size 56 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sub_InformationViewBase::sub_InformationViewBase() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationView::sub_InformationView()
</UL>

<P><STRONG><a name="[93e]"></a>sub_InformationViewBase::sub_InformationViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[1d1]"></a>sub_InformationViewBase::~sub_InformationViewBase()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sub_InformationViewBase::~sub_InformationViewBase() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;sub_InformationPresenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationView::~sub_InformationView()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
</UL>
<P><STRONG><a name="[93f]"></a>sub_InformationViewBase::~sub_InformationViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sub_informationviewbase.o(i._ZN23sub_InformationViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[1d4]"></a>sub_InformationPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[1d3]"></a>sub_InformationPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[8fd]"></a>sub_InformationPresenter::sub_InformationPresenter(sub_InformationView&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenterC1ER19sub_InformationView))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[940]"></a>sub_InformationPresenter::sub_InformationPresenter__sub_object(sub_InformationView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenterC1ER19sub_InformationView), UNUSED)

<P><STRONG><a name="[1d5]"></a>sub_InformationPresenter::~sub_InformationPresenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> sub_informationpresenter.o(.constdata__ZTV24sub_InformationPresenter)
</UL>
<P><STRONG><a name="[941]"></a>sub_InformationPresenter::~sub_InformationPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sub_informationpresenter.o(i._ZN24sub_InformationPresenterD1Ev), UNUSED)

<P><STRONG><a name="[db]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE)
</UL>
<P><STRONG><a name="[942]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev), UNUSED)

<P><STRONG><a name="[8f6]"></a>Model::bind(ModelListener*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN5Model4bindEP13ModelListener))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4c1]"></a>Model::tick()</STRONG> (Thumb, 132 bytes, Stack size 200 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Model::tick() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[48d]"></a>Model::Model()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Model::Model() &rArr; BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[943]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[1dd]"></a>STM32DMA::getDMAType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA10getDMATypeEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1da]"></a>STM32DMA::initialize()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1d7]"></a>STM32DMA::getBlitCaps()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1e1]"></a>STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::operator unsigned() const
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1e2]"></a>STM32DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32DMA::setupDataFill(const touchgfx::BlitOp&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::operator unsigned() const
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1dc]"></a>STM32DMA::signalDMAInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::signalDMAInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[4e8]"></a>STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[4e9]"></a>STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[4eb]"></a>STM32DMA::STM32DMA()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32DMA::STM32DMA() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[944]"></a>STM32DMA::STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev), UNUSED)

<P><STRONG><a name="[dd]"></a>STM32DMA::~STM32DMA()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::~STM32DMA()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[945]"></a>STM32DMA::~STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev), UNUSED)

<P><STRONG><a name="[54b]"></a>touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[946]"></a>touchgfx::ClickEvent::ClickEvent__sub_object(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss), UNUSED)

<P><STRONG><a name="[1e6]"></a>touchgfx::KeySampler::init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keysampler.o(i._ZN8touchgfx10KeySampler4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::KeySampler::init() &rArr; touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TouchGFXHAL_cpp_c3b64dc6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
</UL>
<P><STRONG><a name="[1e7]"></a>touchgfx::KeySampler::sample(unsigned char&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, keysampler.o(i._ZN8touchgfx10KeySampler6sampleERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::KeySampler::sample(unsigned char&) &rArr; touchgfx::Buttons::sample() &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::sample()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
</UL>
<P><STRONG><a name="[d9]"></a>touchgfx::KeySampler::~KeySampler()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
<LI> touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
</UL>
<P><STRONG><a name="[947]"></a>touchgfx::KeySampler::~KeySampler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev), UNUSED)

<P><STRONG><a name="[4f0]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[39e]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[488]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>

<P><STRONG><a name="[4f3]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
</UL>

<P><STRONG><a name="[4f4]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[4f5]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[4f6]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[4f7]"></a>touchgfx::Rasterizer::lineTo(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
</UL>

<P><STRONG><a name="[4fa]"></a>touchgfx::Rasterizer::moveTo(int, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[4fc]"></a>touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::calculateAlpha(int) const
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
</UL>

<P><STRONG><a name="[1ec]"></a>touchgfx::Transition::invalidate()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::Transition::invalidate() &rArr; touchgfx::Application::invalidate() &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidate()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1e9]"></a>touchgfx::Transition::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
</UL>
<P><STRONG><a name="[1ed]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 3]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1eb]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 2]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1ea]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 2]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[514]"></a>touchgfx::Transition::Transition()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
</UL>

<P><STRONG><a name="[948]"></a>touchgfx::Transition::Transition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionC1Ev), UNUSED)

<P><STRONG><a name="[1e8]"></a>touchgfx::Transition::~Transition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
</UL>
<P><STRONG><a name="[949]"></a>touchgfx::Transition::~Transition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev), UNUSED)

<P><STRONG><a name="[4ff]"></a>touchgfx::Application::invalidate()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::Application::invalidate() &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::invalidate()
</UL>

<P><STRONG><a name="[491]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::invalidate()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[1ae]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[501]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 1572 bytes, Stack size 64 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::restrictTo(short, short)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidate()
</UL>

<P><STRONG><a name="[1b2]"></a>touchgfx::Application::drawCachedAreas()</STRONG> (Thumb, 1172 bytes, Stack size 144 bytes, application.o(i._ZN8touchgfx11Application15drawCachedAreasEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::Application::drawCachedAreas() &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1ac]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1cf]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Application::handleTickEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1b1]"></a>touchgfx::Application::clearCachedAreas()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16clearCachedAreasEv))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1ab]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1ad]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[54e]"></a>touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
</UL>

<P><STRONG><a name="[511]"></a>touchgfx::Application::clearAllTimerWidgets()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application20clearAllTimerWidgetsEv))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[54c]"></a>touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[1ee]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1b3]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[4e2]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[94a]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[8d5]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[57c]"></a>touchgfx::floorDivMod(int, int, int&, int&)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, texturemaptypes.o(i._ZN8touchgfx11floorDivModEiiRiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[512]"></a>touchgfx::CanvasWidget::CanvasWidget__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidget::CanvasWidget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
</UL>

<P><STRONG><a name="[5b9]"></a>touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[94b]"></a>touchgfx::GestureEvent::GestureEvent__sub_object(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss), UNUSED)

<P><STRONG><a name="[1f8]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[513]"></a>touchgfx::NoTransition::NoTransition()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::NoTransition::NoTransition()
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::Transition()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[94c]"></a>touchgfx::NoTransition::NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionC1Ev), UNUSED)

<P><STRONG><a name="[1f7]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[94d]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[515]"></a>touchgfx::TextProvider::initialize(const unsigned short*, const unsigned short*, const touchgfx::FontContextualFormsTable*, ...)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::TextProvider::initialize(const unsigned short*, const unsigned short*, const touchgfx::FontContextualFormsTable*, ...) &rArr; touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[516]"></a>touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, const unsigned short*, const touchgfx::FontContextualFormsTable*, ...)
</UL>

<P><STRONG><a name="[518]"></a>touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11adjustGlyphEttRPKNS_9GlyphNodeEPKNS_4FontE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*) &rArr; touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*) &rArr; touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
</UL>

<P><STRONG><a name="[51d]"></a>touchgfx::TextProvider::endOfString()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11endOfStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::endOfString()
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[51f]"></a>touchgfx::TextProvider::getNextChar()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11getNextCharEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[521]"></a>touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short) &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[523]"></a>touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider14applyGsubRulesEPKtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
</UL>

<P><STRONG><a name="[51a]"></a>touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*) &rArr; touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::setTop(short)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[520]"></a>touchgfx::TextProvider::fillInputBuffer()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15fillInputBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::isFull() const
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
</UL>

<P><STRONG><a name="[52c]"></a>touchgfx::TextProvider::getNextLigature(unsigned char)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, texts.o(i._ZN8touchgfx12TextProvider15getNextLigatureEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[52e]"></a>touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[52f]"></a>touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[51b]"></a>touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::width() const
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[52d]"></a>touchgfx::TextProvider::substituteGlyphs()</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider16substituteGlyphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>

<P><STRONG><a name="[519]"></a>touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::width() const
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::setTop(short)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[517]"></a>touchgfx::TextProvider::initializeInternal()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, texts.o(i._ZN8touchgfx12TextProvider18initializeInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[52b]"></a>touchgfx::TextProvider::getNextCharInternal()</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx12TextProvider19getNextCharInternalEv))
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>

<P><STRONG><a name="[524]"></a>touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[533]"></a>touchgfx::TextProvider::TextProvider()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[94e]"></a>touchgfx::TextProvider::TextProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev), UNUSED)

<P><STRONG><a name="[1fc]"></a>touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[61e]"></a>touchgfx::fixed28_4Mul(int, int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, texturemaptypes.o(i._ZN8touchgfx12fixed28_4MulEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
</UL>

<P><STRONG><a name="[1d8]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1ff]"></a>touchgfx::DMA_Interface::getDMAType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10getDMATypeEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1fe]"></a>touchgfx::DMA_Interface::initialize()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10initializeEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1e3]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1e4]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1e0]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[55f]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[1df]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1e5]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1d9]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::flush()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1db]"></a>touchgfx::DMA_Interface::start()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::start()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1de]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DMA_Interface::execute()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[476]"></a>touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_consola_20_4bpp()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_arial_30_4bpp()
</UL>

<P><STRONG><a name="[94f]"></a>touchgfx::GeneratedFont::GeneratedFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE), UNUSED)

<P><STRONG><a name="[b5]"></a>touchgfx::GeneratedFont::~GeneratedFont()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev))
<BR>[Address Reference Count : 4]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
<LI> table_consola_20_4bpp.o(i._Z23getFont_consola_20_4bppv)
<LI> table_arial_30_4bpp.o(i._Z21getFont_arial_30_4bppv)
</UL>
<P><STRONG><a name="[950]"></a>touchgfx::GeneratedFont::~GeneratedFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev), UNUSED)

<P><STRONG><a name="[4b8]"></a>touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mainboardviewbase.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype) &rArr; touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[951]"></a>touchgfx::PainterRGB565::PainterRGB565__sub_object(touchgfx::colortype)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, mainboardviewbase.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeE), UNUSED)

<P><STRONG><a name="[218]"></a>touchgfx::ScalableImage::setScalingAlgorithm(touchgfx::ScalableImage::ScalingAlgorithm)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[4b6]"></a>touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[952]"></a>touchgfx::ScalableImage::ScalableImage__sub_object(const touchgfx::Bitmap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scalableimage.o(i._ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE), UNUSED)

<P><STRONG><a name="[1fd]"></a>touchgfx::AbstractButton::executeAction()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, abstractbutton.o(i._ZN8touchgfx14AbstractButton13executeActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractButton::executeAction()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[219]"></a>touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[4a2]"></a>touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[21c]"></a>touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
</UL>
<P><STRONG><a name="[4a7]"></a>touchgfx::ButtonWithIcon::setIconXY(short, short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx14ButtonWithIcon9setIconXYEss))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[49a]"></a>touchgfx::ButtonWithIcon::ButtonWithIcon()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIconC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ButtonWithIcon::ButtonWithIcon() &rArr; touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[953]"></a>touchgfx::ButtonWithIcon::ButtonWithIcon__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIconC1Ev), UNUSED)

<P><STRONG><a name="[21a]"></a>touchgfx::ButtonWithIcon::~ButtonWithIcon()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx14ButtonWithIconD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithIcon::~ButtonWithIcon() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
</UL>
<P><STRONG><a name="[954]"></a>touchgfx::ButtonWithIcon::~ButtonWithIcon__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx14ButtonWithIconD1Ev), UNUSED)

<P><STRONG><a name="[1b0]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[221]"></a>touchgfx::SnapshotWidget::makeSnapshot(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::SnapshotWidget::makeSnapshot(unsigned short) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[220]"></a>touchgfx::SnapshotWidget::makeSnapshot()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEv))
<BR><BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[53a]"></a>touchgfx::SnapshotWidget::SnapshotWidget()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SnapshotWidget::SnapshotWidget()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)
</UL>

<P><STRONG><a name="[955]"></a>touchgfx::SnapshotWidget::SnapshotWidget__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetC1Ev), UNUSED)

<P><STRONG><a name="[4ae]"></a>touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::ButtonWithLabel::updateTextPosition() &rArr; touchgfx::TypedText::getText() const
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::updateTextPosition()
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[4af]"></a>touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, screen2viewbase.o(i._ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[53b]"></a>touchgfx::ButtonWithLabel::updateTextPosition()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, screen2viewbase.o(i._ZN8touchgfx15ButtonWithLabel18updateTextPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ButtonWithLabel::updateTextPosition() &rArr; touchgfx::TypedText::getText() const
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
</UL>

<P><STRONG><a name="[4b0]"></a>touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, screen2viewbase.o(i._ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[4ad]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ButtonWithLabel::ButtonWithLabel() &rArr; touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[956]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev), UNUSED)

<P><STRONG><a name="[224]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen2view.o(i._ZN8touchgfx15ButtonWithLabelD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithLabel::~ButtonWithLabel() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[957]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2view.o(i._ZN8touchgfx15ButtonWithLabelD1Ev), UNUSED)

<P><STRONG><a name="[53d]"></a>touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, easingequations.o(i._ZN8touchgfx15EasingEquations12cubicEaseOutEtsst))
<BR><BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::roundRespectSign(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[53e]"></a>touchgfx::EasingEquations::roundRespectSign(float)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, easingequations.o(i._ZN8touchgfx15EasingEquations16roundRespectSignEf))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[4e3]"></a>touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx15GenericCallbackIvvvEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>

<P><STRONG><a name="[227]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::~SlideTransition()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::~SlideTransition()
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[958]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::~SlideTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev), UNUSED)

<P><STRONG><a name="[53f]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[541]"></a>touchgfx::TouchCalibration::clzu(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[540]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)</STRONG> (Thumb, 154 bytes, Stack size 44 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[542]"></a>touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 204 bytes, Stack size 52 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration7muldivuEjjjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[57d]"></a>touchgfx::fixed28_4ToFloat(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx16fixed28_4ToFloatEi))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[624]"></a>touchgfx::floatToFixed28_4(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scalableimage.o(i._ZN8touchgfx16floatToFixed28_4Ef))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[48c]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[959]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[22d]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[230]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[231]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[232]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[22f]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[22e]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[4ec]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
</UL>

<P><STRONG><a name="[95a]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[573]"></a>touchgfx::floatToFixed16_16(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx17floatToFixed16_16Ef))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>

<P><STRONG><a name="[233]"></a>touchgfx::MCUInstrumentation::setMCUActive(bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN8touchgfx18MCUInstrumentation12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::MCUInstrumentation::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
</UL>
<P><STRONG><a name="[234]"></a>touchgfx::MCUInstrumentation::getCCConsumed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv))
<BR>[Address Reference Count : 2]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
<LI> touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
</UL>
<P><STRONG><a name="[235]"></a>touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj))
<BR>[Address Reference Count : 2]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
<LI> touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
</UL>
<P><STRONG><a name="[237]"></a>touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[23f]"></a>touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[23a]"></a>touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 592 bytes, Stack size 104 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::getDeltaY() const
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::getDeltaX() const
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::operator =(const touchgfx::DragEvent&)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[23b]"></a>touchgfx::ScrollableContainer::handleTickEvent()</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ScrollableContainer::handleTickEvent() &rArr; touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[238]"></a>touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[239]"></a>touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[4d8]"></a>touchgfx::ScrollableContainer::setScrollbarsAlpha(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[4d7]"></a>touchgfx::ScrollableContainer::setScrollbarsColor(touchgfx::colortype)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[54d]"></a>touchgfx::ScrollableContainer::invalidateScrollbars()</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible(bool)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
</UL>

<P><STRONG><a name="[23e]"></a>touchgfx::ScrollableContainer::moveChildrenRelative(short, short)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ScrollableContainer::moveChildrenRelative(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[4d6]"></a>touchgfx::ScrollableContainer::enableHorizontalScroll(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZN8touchgfx19ScrollableContainer22enableHorizontalScrollEb))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[4d9]"></a>touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible(bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible(bool) &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[23c]"></a>touchgfx::ScrollableContainer::add(touchgfx::Drawable&)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ScrollableContainer::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[241]"></a>touchgfx::ScrollableContainer::doScroll(short, short)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer8doScrollEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::ScrollableContainer::doScroll(short, short) &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[4d4]"></a>touchgfx::ScrollableContainer::ScrollableContainer()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::ScrollableContainer() &rArr; touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char) &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
</UL>

<P><STRONG><a name="[95b]"></a>touchgfx::ScrollableContainer::ScrollableContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainerC1Ev), UNUSED)

<P><STRONG><a name="[236]"></a>touchgfx::ScrollableContainer::~ScrollableContainer()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN8touchgfx19ScrollableContainerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::ScrollableContainer::~ScrollableContainer() &rArr; touchgfx::Box::~Box()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[95c]"></a>touchgfx::ScrollableContainer::~ScrollableContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN8touchgfx19ScrollableContainerD1Ev), UNUSED)

<P><STRONG><a name="[242]"></a>touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, mainboardviewbase.o(i._ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::AbstractPainterColor::setColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx20AbstractPainterColorE)
</UL>
<P><STRONG><a name="[4b9]"></a>touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[554]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[556]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[555]"></a>touchgfx::CanvasWidgetRenderer::hasBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[95d]"></a>touchgfx::AbstractPainterRGB565::~AbstractPainterRGB565()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx21AbstractPainterRGB565D2Ev), UNUSED)

<P><STRONG><a name="[243]"></a>touchgfx::AbstractPainterRGB565::~AbstractPainterRGB565__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx21AbstractPainterRGB565D2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[50e]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[557]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[623]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[61a]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[558]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[50c]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
</UL>

<P><STRONG><a name="[564]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[4a9]"></a>touchgfx::TextAreaWithOneWildcard::setWildcard(const unsigned short*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[49c]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[95e]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev), UNUSED)

<P><STRONG><a name="[244]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[95f]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev), UNUSED)

<P><STRONG><a name="[251]"></a>touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx24TextAreaWithTwoWildcardsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
</UL>
<P><STRONG><a name="[960]"></a>touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx24TextAreaWithTwoWildcardsD1Ev), UNUSED)

<P><STRONG><a name="[49b]"></a>touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx24TextAreaWithWildcardBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
</UL>

<P><STRONG><a name="[961]"></a>touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx24TextAreaWithWildcardBaseC1Ev), UNUSED)

<P><STRONG><a name="[254]"></a>touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithTwoWildcards::~TextAreaWithTwoWildcards()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[962]"></a>touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev), UNUSED)

<P><STRONG><a name="[257]"></a>touchgfx::CortexMMCUInstrumentation::getCPUCycles()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[258]"></a>touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[256]"></a>touchgfx::CortexMMCUInstrumentation::init()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[d8]"></a>touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
<LI> touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
</UL>
<P><STRONG><a name="[963]"></a>touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev), UNUSED)

<P><STRONG><a name="[559]"></a>touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[55c]"></a>touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[4a0]"></a>touchgfx::Box::setColor(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, screen1viewbase.o(i._ZN8touchgfx3Box8setColorENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Box::setColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[553]"></a>touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx3BoxC1EttNS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char) &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
</UL>

<P><STRONG><a name="[964]"></a>touchgfx::Box::Box__sub_object(unsigned short, unsigned short, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx3BoxC1EttNS_9colortypeEh), UNUSED)

<P><STRONG><a name="[495]"></a>touchgfx::Box::Box()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx3BoxC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::Box() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[965]"></a>touchgfx::Box::Box__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx3BoxC1Ev), UNUSED)

<P><STRONG><a name="[259]"></a>touchgfx::Box::~Box()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN8touchgfx3BoxD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Box::~Box()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::~ScrollableContainer()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[966]"></a>touchgfx::Box::~Box__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryview.o(i._ZN8touchgfx3BoxD1Ev), UNUSED)

<P><STRONG><a name="[263]"></a>touchgfx::HAL::FlushCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10FlushCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[260]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::beginFrame()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[150]"></a>touchgfx::HAL::getDMAType()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL10getDMATypeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getDMAType()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[25d]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[13c]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getBlitCaps()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[423]"></a>touchgfx::HAL::setMCUActive(bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::setMCUActive(bool) &rArr; touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTaskHook
</UL>

<P><STRONG><a name="[141]"></a>touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[262]"></a>touchgfx::HAL::InvalidateCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[146]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::backPorchExited() &rArr; touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID) &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[138]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[140]"></a>touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[25e]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[3a0]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID) &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[136]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[14f]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[139]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[534]"></a>touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>

<P><STRONG><a name="[39f]"></a>touchgfx::HAL::lockDMAToFrontPorch(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL19lockDMAToFrontPorchEb))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[14c]"></a>touchgfx::HAL::setAnimationStorage(void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL19setAnimationStorageEPv))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[145]"></a>touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[55d]"></a>touchgfx::HAL::getClientFrameBuffer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL20getClientFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>

<P><STRONG><a name="[144]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[132]"></a>touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[14d]"></a>touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1c6]"></a>touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[157]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[562]"></a>touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod) &rArr; touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
</UL>

<P><STRONG><a name="[539]"></a>touchgfx::HAL::lcd()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bitmap.o(i._ZN8touchgfx3HAL3lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::makeSnapshot(unsigned short)
</UL>

<P><STRONG><a name="[151]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::HAL::tick() &rArr; touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[155]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[156]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[13d]"></a>touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 198 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[13f]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[13e]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[143]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[142]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[261]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[137]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[25f]"></a>touchgfx::HAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[14e]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::taskDelay(unsigned short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[48a]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, touchgfxhal.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[568]"></a>touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, texts.o(i._ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[56a]"></a>touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, lcd.o(i._ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation) &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[56b]"></a>touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[56e]"></a>touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[569]"></a>touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</STRONG> (Thumb, 594 bytes, Stack size 432 bytes, lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>

<P><STRONG><a name="[5eb]"></a>touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx3LCD14getAlphaFromA4EPKtj))
<BR><BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[570]"></a>touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)</STRONG> (Thumb, 596 bytes, Stack size 136 bytes, lcd.o(i._ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[2c3]"></a>touchgfx::LCD::drawTextureMapQuad(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 132 bytes, Stack size 144 bytes, lcd.o(i._ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::LCD::drawTextureMapQuad(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[56d]"></a>touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::isSpace(unsigned short)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[572]"></a>touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[571]"></a>touchgfx::LCD::WideTextInternalStruct::isSpace(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7isSpaceEt))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[56c]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[967]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct__sub_object(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[2c5]"></a>touchgfx::LCD::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 502 bytes, Stack size 144 bytes, lcd.o(i._ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::LCD::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed16_16(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2c2]"></a>touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 824 bytes, Stack size 368 bytes, lcd.o(i._ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[578]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZN8touchgfx3LCD26DrawTextureMapScanLineBase29drawTextureMapNextSubdivisionERfS2_S2_S2_S2_S2_fS2_fS2_fiRiS3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed16_16(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[579]"></a>touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[57a]"></a>touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[5c4]"></a>touchgfx::LCD::div255(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx3LCD6div255Et))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int) const
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5ad]"></a>touchgfx::Cell::set(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx4Cell3setEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
</UL>

<P><STRONG><a name="[5ae]"></a>touchgfx::Cell::addCover(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx4Cell8addCoverEii))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
</UL>

<P><STRONG><a name="[576]"></a>touchgfx::Edge::step(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Edge::step(int) &rArr; touchgfx::Edge::step()
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[577]"></a>touchgfx::Edge::step()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
</UL>

<P><STRONG><a name="[575]"></a>touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ceil28_4(int)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[968]"></a>touchgfx::Edge::Edge__sub_object(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii), UNUSED)

<P><STRONG><a name="[56f]"></a>touchgfx::Font::isInvisibleZeroWidth(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i._ZN8touchgfx4Font20isInvisibleZeroWidthEt))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[57e]"></a>touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3getENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
</UL>

<P><STRONG><a name="[39d]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[486]"></a>touchgfx::GPIO::init()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::GPIO::init() &rArr; touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>

<P><STRONG><a name="[396]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[560]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID) &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>

<P><STRONG><a name="[4bd]"></a>touchgfx::Line::updateCachedShape()</STRONG> (Thumb, 790 bytes, Stack size 112 bytes, line.o(i._ZN8touchgfx4Line17updateCachedShapeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::floor() const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::ceil() const
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
</UL>

<P><STRONG><a name="[4be]"></a>touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[4bc]"></a>touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[4bb]"></a>touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[4b7]"></a>touchgfx::Line::Line()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Line::Line() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
</UL>

<P><STRONG><a name="[969]"></a>touchgfx::Line::Line__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev), UNUSED)

<P><STRONG><a name="[502]"></a>touchgfx::Rect::restrictTo(short, short)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, application.o(i._ZN8touchgfx4Rect10restrictToEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Rect::restrictTo(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[50a]"></a>touchgfx::Rect::expandToFit(const touchgfx::Rect&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx4Rect11expandToFitERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getChildrenContainedArea() const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getContainedArea() const
</UL>

<P><STRONG><a name="[500]"></a>touchgfx::Rect::Rect(short, short, short, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx4RectC1Essss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidate()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getContainedArea() const
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[96a]"></a>touchgfx::Rect::Rect__sub_object(short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx4RectC1Essss), UNUSED)

<P><STRONG><a name="[f4]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getSolidRect() const
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getSolidRect() const
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_Application_cpp_63cd8d44
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::getSolidRect() const
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getSolidRect() const
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::getSolidRect() const
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getChildrenContainedArea() const
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
</UL>
<P><STRONG><a name="[96b]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[50d]"></a>touchgfx::Rect::operator &=(const touchgfx::Rect&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx4RectaNERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[26a]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::View&lang;Screen1Presenter&rang;::~View()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
</UL>
<P><STRONG><a name="[96c]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev), UNUSED)

<P><STRONG><a name="[26c]"></a>touchgfx::View&lang;Screen2Presenter&rang;::~View()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
</UL>
<P><STRONG><a name="[96d]"></a>touchgfx::View&lang;Screen2Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev), UNUSED)

<P><STRONG><a name="[26d]"></a>touchgfx::View&lang;MainBoardPresenter&rang;::~View()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx4ViewI18MainBoardPresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
</UL>
<P><STRONG><a name="[96e]"></a>touchgfx::View&lang;MainBoardPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx4ViewI18MainBoardPresenterED1Ev), UNUSED)

<P><STRONG><a name="[26e]"></a>touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN8touchgfx4ViewI22MarkerHistoryPresenterED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
</UL>
<P><STRONG><a name="[96f]"></a>touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN8touchgfx4ViewI22MarkerHistoryPresenterED1Ev), UNUSED)

<P><STRONG><a name="[26f]"></a>touchgfx::View&lang;sub_InformationPresenter&rang;::~View()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sub_informationviewbase.o(i._ZN8touchgfx4ViewI24sub_InformationPresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
</UL>
<P><STRONG><a name="[970]"></a>touchgfx::View&lang;sub_InformationPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sub_informationviewbase.o(i._ZN8touchgfx4ViewI24sub_InformationPresenterED1Ev), UNUSED)

<P><STRONG><a name="[5b8]"></a>touchgfx::clzu(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>

<P><STRONG><a name="[49f]"></a>touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, customcontainer1base.o(i._ZN8touchgfx5Color15getColorFromRGBEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[5c1]"></a>touchgfx::Color::getRedFromRGB565(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color16getRedFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5c3]"></a>touchgfx::Color::getBlueFromRGB565(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color17getBlueFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5c2]"></a>touchgfx::Color::getGreenFromRGB565(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color18getGreenFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[217]"></a>touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::ScalableImage(const touchgfx::Bitmap&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[4d3]"></a>touchgfx::Image::Image(const touchgfx::Bitmap&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>

<P><STRONG><a name="[971]"></a>touchgfx::Image::Image__sub_object(const touchgfx::Bitmap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE), UNUSED)

<P><STRONG><a name="[270]"></a>touchgfx::Image::~Image()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mainboardview.o(i._ZN8touchgfx5ImageD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Image::~Image()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[972]"></a>touchgfx::Image::~Image__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainboardview.o(i._ZN8touchgfx5ImageD1Ev), UNUSED)

<P><STRONG><a name="[4e4]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[61f]"></a>touchgfx::paint::rgb565::lineFromColor(unsigned short*, unsigned, unsigned, unsigned char, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8touchgfx5paint6rgb56513lineFromColorEPtjjhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::paint::rgb565::lineFromColor(unsigned short*, unsigned, unsigned, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::paint(unsigned char*, short, short, short, short, unsigned char) const
</UL>

<P><STRONG><a name="[620]"></a>touchgfx::paint::rgb565::tearDown()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx5paint6rgb5658tearDownEv))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::tearDown() const
</UL>

<P><STRONG><a name="[58c]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[58a]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[58b]"></a>touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bitmap.o(i._ZN8touchgfx6Bitmap8setCacheEPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[496]"></a>touchgfx::Bitmap::Bitmap(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx6BitmapC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[973]"></a>touchgfx::Bitmap::Bitmap__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx6BitmapC1Et), UNUSED)

<P><STRONG><a name="[b7]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMAC1Ev)
</UL>
<P><STRONG><a name="[974]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[226]"></a>touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[498]"></a>touchgfx::Button::Button()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, customcontainer1base.o(i._ZN8touchgfx6ButtonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
</UL>

<P><STRONG><a name="[975]"></a>touchgfx::Button::Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, customcontainer1base.o(i._ZN8touchgfx6ButtonC1Ev), UNUSED)

<P><STRONG><a name="[273]"></a>touchgfx::Button::~Button()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mainboardview.o(i._ZN8touchgfx6ButtonD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::~CustomContainer1Base()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::~ButtonWithIcon()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[976]"></a>touchgfx::Button::~Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mainboardview.o(i._ZN8touchgfx6ButtonD1Ev), UNUSED)

<P><STRONG><a name="[58d]"></a>touchgfx::Canvas::close()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx6Canvas5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::wasOutlineTooComplex()
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[58e]"></a>touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[591]"></a>touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[592]"></a>touchgfx::Canvas::render(unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6Canvas6renderEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = touchgfx::Canvas::render(unsigned char) &rArr; touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBufferForRenderingMethod(touchgfx::HAL::RenderingMethod)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[593]"></a>touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&) &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[977]"></a>touchgfx::Canvas::Canvas__sub_object(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE), UNUSED)

<P><STRONG><a name="[274]"></a>touchgfx::Canvas::~Canvas()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, line.o(i._ZN8touchgfx6CanvasD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::~Canvas()
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::~Outline()
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx6CanvasE)
</UL>
<P><STRONG><a name="[978]"></a>touchgfx::Canvas::~Canvas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(i._ZN8touchgfx6CanvasD1Ev), UNUSED)

<P><STRONG><a name="[26b]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 6]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[545]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>

<P><STRONG><a name="[11f]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardview.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[167]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 11]<UL><LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[119]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardview.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[11c]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[12a]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardview.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 15]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[11b]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[11d]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[4ab]"></a>touchgfx::Screen::add(touchgfx::Drawable&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mainboardviewbase.o(i._ZN8touchgfx6Screen3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Screen::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[117]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 16]<UL><LI> sub_informationview.o(.constdata__ZTV19sub_InformationView)
<LI> mainboardview.o(.constdata__ZTV13MainBoardView)
<LI> markerhistoryview.o(.constdata__ZTV17MarkerHistoryView)
<LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> mainboardviewbase.o(.constdata__ZTV17MainBoardViewBase)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx4ViewI18MainBoardPresenterEE)
<LI> markerhistoryviewbase.o(.constdata__ZTV21MarkerHistoryViewBase)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx4ViewI22MarkerHistoryPresenterEE)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> sub_informationviewbase.o(.constdata__ZTV23sub_InformationViewBase)
<LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx4ViewI24sub_InformationPresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[510]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[599]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[598]"></a>touchgfx::Screen::startSMOC(const touchgfx::Rect&)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, screen.o(i._ZN8touchgfx6Screen9startSMOCERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>

<P><STRONG><a name="[494]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[979]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[275]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[97a]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[4aa]"></a>touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, slider.o(i._ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[27a]"></a>touchgfx::Slider::setValueRange(int, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider13setValueRangeEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Slider::setValueRange(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[279]"></a>touchgfx::Slider::setValueRange(int, int, int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider13setValueRangeEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Slider::setValueRange(int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[277]"></a>touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slider.o(i._ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[276]"></a>touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, slider.o(i._ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[278]"></a>touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, slider.o(i._ZN8touchgfx6Slider19setupVerticalSliderEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[27c]"></a>touchgfx::Slider::updateIndicatorPosition(short)</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6Slider23updateIndicatorPositionEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Slider::updateIndicatorPosition(short) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveTo(short, short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[27b]"></a>touchgfx::Slider::setValue(int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider8setValueEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Slider::setValue(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[49d]"></a>touchgfx::Slider::Slider()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6SliderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Slider::Slider() &rArr; touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValueRange(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[97b]"></a>touchgfx::Slider::Slider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6SliderC1Ev), UNUSED)

<P><STRONG><a name="[1f3]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, customcontainer1base.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 16]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[497]"></a>touchgfx::Widget::Widget__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, customcontainer1base.o(i._ZN8touchgfx6WidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
</UL>

<P><STRONG><a name="[97c]"></a>touchgfx::Widget::~Widget()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardview.o(i._ZN8touchgfx6WidgetD2Ev), UNUSED)

<P><STRONG><a name="[282]"></a>touchgfx::Widget::~Widget__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainboardview.o(i._ZN8touchgfx6WidgetD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::~CustomContainer1Base()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
</UL>
<P><STRONG><a name="[59e]"></a>touchgfx::muldiv(int, int, int)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, utils.o(i._ZN8touchgfx6muldivEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::sign&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[59f]"></a>touchgfx::muldiv(int, int, int, int&)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, utils.o(i._ZN8touchgfx6muldivEiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[4ee]"></a>touchgfx::Buttons::init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buttons.o(i._ZN8touchgfx7Buttons4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::init()
</UL>

<P><STRONG><a name="[4ef]"></a>touchgfx::Buttons::sample()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, buttons.o(i._ZN8touchgfx7Buttons6sampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Buttons::sample() &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::sample(unsigned char&)
</UL>

<P><STRONG><a name="[b8]"></a>touchgfx::CWRUtil::Q5::Q5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev))
<BR>[Address Reference Count : 1]<UL><LI> line.o(i._ZN8touchgfx4LineC1Ev)
</UL>
<P><STRONG><a name="[97d]"></a>touchgfx::CWRUtil::Q5::Q5__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev), UNUSED)

<P><STRONG><a name="[62c]"></a>touchgfx::CWRUtil::sine(int)</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, line.o(i._ZN8touchgfx7CWRUtil4sineEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[5a4]"></a>touchgfx::CWRUtil::isqrt(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil5isqrtEj))
<BR><BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[5a2]"></a>touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, line.o(i._ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) &rArr;  touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[582]"></a>touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, line.o(i._ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr;  touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[5a3]"></a>touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) &rArr;  touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[583]"></a>touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[5ac]"></a>touchgfx::Outline::addCurCell()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline10addCurCellEv))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
</UL>

<P><STRONG><a name="[5a5]"></a>touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)</STRONG> (Thumb, 244 bytes, Stack size 352 bytes, outline.o(i._ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lessThan(const touchgfx::Cell*, const touchgfx::Cell*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
</UL>

<P><STRONG><a name="[5a8]"></a>touchgfx::Outline::renderLine(int, int, int, int)</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, outline.o(i._ZN8touchgfx7Outline10renderLineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>

<P><STRONG><a name="[5aa]"></a>touchgfx::Outline::setCurCell(int, int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline10setCurCellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::setCurCell(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[5ab]"></a>touchgfx::Outline::setCurCellNew(int, int)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline13setCurCellNewEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderScanline(int, int, int, int, int)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[5a9]"></a>touchgfx::Outline::renderScanline(int, int, int, int, int)</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, outline.o(i._ZN8touchgfx7Outline14renderScanlineEiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCellNew(int, int)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::addCover(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[4f8]"></a>touchgfx::Outline::wasOutlineTooComplex()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx7Outline20wasOutlineTooComplexEv))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[4fd]"></a>touchgfx::Outline::closeOutlineAndSortCells()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline24closeOutlineAndSortCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::addCurCell()
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[595]"></a>touchgfx::Outline::reset()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Outline::reset() &rArr; touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>

<P><STRONG><a name="[4f9]"></a>touchgfx::Outline::lineTo(int, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::closeOutlineAndSortCells()
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[4fb]"></a>touchgfx::Outline::moveTo(int, int)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Outline::renderScanline(int, int, int, int, int) &rArr; touchgfx::Outline::setCurCellNew(int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::setCurCell(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>

<P><STRONG><a name="[5a7]"></a>touchgfx::Outline::lessThan(const touchgfx::Cell*, const touchgfx::Cell*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline8lessThanEPKNS_4CellES3_))
<BR><BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>

<P><STRONG><a name="[5a6]"></a>touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline9swapCellsEPNS_4CellES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>

<P><STRONG><a name="[594]"></a>touchgfx::Outline::Outline()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::Outline() &rArr; touchgfx::Outline::reset() &rArr; touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[97e]"></a>touchgfx::Outline::Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev), UNUSED)

<P><STRONG><a name="[283]"></a>touchgfx::Outline::~Outline()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> outline.o(.constdata__ZTVN8touchgfx7OutlineE)
</UL>
<P><STRONG><a name="[97f]"></a>touchgfx::Outline::~Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev), UNUSED)

<P><STRONG><a name="[5af]"></a>touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)</STRONG> (Thumb, 368 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5b1]"></a>touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, unicode.o(i._ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::peekChar(const unsigned short*, const char*)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5b4]"></a>touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, unicode.o(i._ZN8touchgfx7Unicode4itoaEiPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5b5]"></a>touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)</STRONG> (Thumb, 72 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode4utoaEjPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5b0]"></a>touchgfx::Unicode::strlen(const unsigned short*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>

<P><STRONG><a name="[47e]"></a>touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode7strncpyEPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
</UL>

<P><STRONG><a name="[5b3]"></a>touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode8nextCharERPKtRPKc))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[5b2]"></a>touchgfx::Unicode::peekChar(const unsigned short*, const char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode8peekCharEPKtPKc))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[479]"></a>touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, unicode.o(i._ZN8touchgfx7Unicode8snprintfEPttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleTickEvent()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::functionVolume(int)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
</UL>

<P><STRONG><a name="[5b6]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
</UL>

<P><STRONG><a name="[5b7]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)</STRONG> (Thumb, 602 bytes, Stack size 192 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::peekChar(const unsigned short*, const char*)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5a1]"></a>touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 160 bytes, Stack size 36 bytes, utils.o(i._ZN8touchgfx7muldivuEjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&)
</UL>

<P><STRONG><a name="[284]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[980]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[287]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[981]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev), UNUSED)

<P><STRONG><a name="[28a]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[982]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[28d]"></a>touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[983]"></a>touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[290]"></a>touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::~CustomContainer1Base()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[984]"></a>touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[293]"></a>touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[985]"></a>touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[296]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotosub_InformationScreenNoTransition()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransition()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenNoTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[986]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev), UNUSED)

<P><STRONG><a name="[4db]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotosub_InformationScreenNoTransition()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransition()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenNoTransition()
</UL>

<P><STRONG><a name="[299]"></a>touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sub_informationviewbase.o(i._ZN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[987]"></a>touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sub_informationviewbase.o(i._ZN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[29c]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::init()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::~SlideTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[988]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev), UNUSED)

<P><STRONG><a name="[4d2]"></a>touchgfx::Drawable::setVisible(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8Drawable10setVisibleEb))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[49e]"></a>touchgfx::Drawable::setPosition(short, short, short, short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mainboardviewbase.o(i._ZN8touchgfx8Drawable11setPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::setPosition(short, short, short, short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[187]"></a>touchgfx::Drawable::moveRelative(short, short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::moveRelative(short, short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()
</UL>
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[59c]"></a>touchgfx::Drawable::getCachedAbsX()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsX() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[59b]"></a>touchgfx::Drawable::getCachedAbsY()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsY() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[59d]"></a>touchgfx::Drawable::setWidthHeight(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, slider.o(i._ZN8touchgfx8Drawable14setWidthHeightEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
</UL>

<P><STRONG><a name="[1f4]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 17]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[185]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 20]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[186]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 21]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[183]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 15]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[184]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 21]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[59a]"></a>touchgfx::Drawable::getCachedVisibleRect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx8Drawable20getCachedVisibleRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::getCachedVisibleRect() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[17f]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[180]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[4a1]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, customcontainer1base.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveRelative(short, short)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
</UL>

<P><STRONG><a name="[188]"></a>touchgfx::Drawable::moveTo(short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable6moveToEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::moveTo(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
</UL>
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[181]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setWidth(short)
</UL>
<BR>[Address Reference Count : 18]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[182]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setHeight(short)
</UL>
<BR>[Address Reference Count : 18]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[4c5]"></a>touchgfx::Drawable::Drawable__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, customcontainer1base.o(i._ZN8touchgfx8DrawableC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[565]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[566]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[561]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[563]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[5ba]"></a>touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[5be]"></a>touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10div255_565Eth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div31rb(unsigned short, unsigned char)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div31g(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[5d0]"></a>touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10div255_888Ejh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[2bf]"></a>touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[5d5]"></a>touchgfx::LCD16bpp::expandRgb565(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp12expandRgb565Et))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[5d6]"></a>touchgfx::LCD16bpp::compactRgb565(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp13compactRgb565Ej))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[5c7]"></a>touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[5c6]"></a>touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp14getNativeColorENS_9colortypeE))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5c8]"></a>touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKjRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[5bb]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[5bd]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 474 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[2ba]"></a>touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 766 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[5ce]"></a>touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp18div255_565_FFcheckEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div31rb(unsigned short, unsigned char)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div31g(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[5cf]"></a>touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp18div255_888_FFcheckEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char) &rArr; touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[5bc]"></a>touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 440 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[632]"></a>touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp20bilinearInterpolate8Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[631]"></a>touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp20bilinearInterpolate8Ehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[619]"></a>touchgfx::LCD16bpp::getFramebufferStride()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp20getFramebufferStrideEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::framebufferStride() const
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[5cd]"></a>touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[5d1]"></a>touchgfx::LCD16bpp::enableTextureMapperA4()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4() &rArr; touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[5c5]"></a>touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21getNativeColorFromRGBEhhh))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int) const
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int) const
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5d4]"></a>touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22bilinearInterpolate565Etth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::compactRgb565(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::expandRgb565(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[5d7]"></a>touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22bilinearInterpolate565Etttthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::compactRgb565(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::expandRgb565(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[633]"></a>touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22bilinearInterpolate888Ejjjjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
</UL>

<P><STRONG><a name="[4e5]"></a>touchgfx::LCD16bpp::enableTextureMapperAll()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[5dc]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
</UL>

<P><STRONG><a name="[5d8]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[5da]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[5db]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[2c4]"></a>touchgfx::LCD16bpp::getTextureMapperDrawScanLine(const touchgfx::TextureSurface&, unsigned short, unsigned char)</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::getTextureMapperDrawScanLine(const touchgfx::TextureSurface&, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2bd]"></a>touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)</STRONG> (Thumb, 490 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short) &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2bc]"></a>touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[5d9]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[29e]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[b9]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[989]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[29f]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 360 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[ba]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[98a]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5d3]"></a>touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[2a0]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 438 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[bb]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[98b]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2a1]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 428 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[bc]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[98c]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5d2]"></a>touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[5e2]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[5e4]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
</UL>

<P><STRONG><a name="[5e6]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[2a2]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 348 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[c5]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[98d]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[5e8]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[2a3]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 344 bytes, Stack size 160 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[c6]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[98e]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5de]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[2a4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[bf]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[98f]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[2a5]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[c1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[990]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[2a6]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 362 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[cd]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[991]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[5e1]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[5e3]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
</UL>

<P><STRONG><a name="[5e5]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[2a7]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 348 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[bd]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[992]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[2a8]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 360 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[c0]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[993]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2a9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 360 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[c2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[994]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2aa]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 358 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[ce]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[995]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5e0]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[2ab]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 420 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[d1]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[996]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[5e7]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[2ac]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 346 bytes, Stack size 160 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[be]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[997]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2ad]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 364 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[c3]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[998]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[2ae]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 418 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[d2]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[999]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5dd]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[2af]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 438 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[c9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[99a]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2b0]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 438 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[cb]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[99b]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2b1]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 434 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[d3]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[99c]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2b2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 360 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[c4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[99d]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2b3]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 420 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[c7]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[99e]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2b4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 436 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[ca]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[99f]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2b5]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 436 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[cc]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[9a0]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2b6]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 434 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[d4]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[9a1]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5df]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[2b7]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 418 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[c8]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[9a2]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[2b8]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 438 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[cf]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[9a3]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[2b9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)</STRONG> (Thumb, 436 bytes, Stack size 168 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffiiiifffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float) &rArr; touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::drawTextureMapNextSubdivision(float&, float&, float&, float&, float&, float&, float, float&, float, float&, float, int, int&, int&, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[d0]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[9a4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[5c0]"></a>touchgfx::LCD16bpp::div31g(unsigned short, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp6div31gEth))
<BR><BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[5bf]"></a>touchgfx::LCD16bpp::div31rb(unsigned short, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp7div31rbEth))
<BR><BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[2bb]"></a>touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2be]"></a>touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[618]"></a>touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation) &rArr; touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[2c6]"></a>touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</STRONG> (Thumb, 808 bytes, Stack size 120 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation) &rArr; touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[61b]"></a>touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation) &rArr; touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[640]"></a>touchgfx::LCD16bpp::LCD16bpp()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[9a5]"></a>touchgfx::LCD16bpp::LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>touchgfx::LCD16bpp::~LCD16bpp()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[9a6]"></a>touchgfx::LCD16bpp::~LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev), UNUSED)

<P><STRONG><a name="[61d]"></a>touchgfx::TextArea::BoundingArea::BoundingArea()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextArea12BoundingAreaC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextArea::BoundingArea::BoundingArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>

<P><STRONG><a name="[9a7]"></a>touchgfx::TextArea::BoundingArea::BoundingArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextArea12BoundingAreaC1Ev), UNUSED)

<P><STRONG><a name="[4a6]"></a>touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, textarea.o(i._ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[4a4]"></a>touchgfx::TextArea::setLinespacing(short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, customcontainer1base.o(i._ZN8touchgfx8TextArea14setLinespacingEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::setLinespacing(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[47a]"></a>touchgfx::TextArea::resizeToCurrentText()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea19resizeToCurrentTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleTickEvent()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::functionVolume(int)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
</UL>

<P><STRONG><a name="[4a3]"></a>touchgfx::TextArea::setColor(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, customcontainer1base.o(i._ZN8touchgfx8TextArea8setColorENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::TextArea::setColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
</UL>

<P><STRONG><a name="[248]"></a>touchgfx::TextArea::setWidth(short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextArea8setWidthEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::setWidth(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[249]"></a>touchgfx::TextArea::setHeight(short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextArea9setHeightEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::setHeight(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[499]"></a>touchgfx::TextArea::TextArea()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextAreaC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::BoundingArea::BoundingArea()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::TextAreaWithWildcardBase()
</UL>

<P><STRONG><a name="[9a8]"></a>touchgfx::TextArea::TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx8TextAreaC1Ev), UNUSED)

<P><STRONG><a name="[2c7]"></a>touchgfx::TextArea::~TextArea()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mainboardview.o(i._ZN8touchgfx8TextAreaD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::~CustomContainer1Base()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::~MainBoardViewBase()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::~sub_InformationViewBase()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[9a9]"></a>touchgfx::TextArea::~TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mainboardview.o(i._ZN8touchgfx8TextAreaD1Ev), UNUSED)

<P><STRONG><a name="[57b]"></a>touchgfx::ceil28_4(int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx8ceil28_4Ei))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[535]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEtthhhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[18d]"></a>touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[17c]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[189]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**) &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[18c]"></a>touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</STRONG> (Thumb, 392 bytes, Stack size 152 bytes, container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[18a]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::add(touchgfx::Drawable&)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[18b]"></a>touchgfx::Container::remove(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE))
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[4d5]"></a>touchgfx::Container::Container()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx9ContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Container::Container() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>

<P><STRONG><a name="[9aa]"></a>touchgfx::Container::Container__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, markerhistoryviewbase.o(i._ZN8touchgfx9ContainerC1Ev), UNUSED)

<P><STRONG><a name="[2cb]"></a>touchgfx::Container::~Container()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, markerhistoryview.o(i._ZN8touchgfx9ContainerD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::~ScrollableContainer()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;MarkerHistoryPresenter&rang;::~View()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::~MarkerHistoryViewBase()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[9ab]"></a>touchgfx::Container::~Container__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, markerhistoryview.o(i._ZN8touchgfx9ContainerD1Ev), UNUSED)

<P><STRONG><a name="[547]"></a>touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[9ac]"></a>touchgfx::DragEvent::DragEvent__sub_object(touchgfx::DragEvent::DragEventType, short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss), UNUSED)

<P><STRONG><a name="[546]"></a>touchgfx::DragEvent::operator =(const touchgfx::DragEvent&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx9DragEventaSERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[527]"></a>touchgfx::GlyphNode::setTop(short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx9GlyphNode6setTopEs))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[574]"></a>touchgfx::Gradients::Gradients(const touchgfx::Point3D*)</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Gradients::Gradients(const touchgfx::Point3D*) &rArr; touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[9ad]"></a>touchgfx::Gradients::Gradients__sub_object(const touchgfx::Point3D*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE), UNUSED)

<P><STRONG><a name="[2cc]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9ae]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[2ce]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9af]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[2d0]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9b0]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[2d3]"></a>touchgfx::Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN8touchgfx9Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[2d2]"></a>touchgfx::Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN8touchgfx9Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[2d4]"></a>touchgfx::Presenter::~Presenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN8touchgfx9PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> mainboardpresenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[9b1]"></a>touchgfx::Presenter::~Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mainboardpresenter.o(i._ZN8touchgfx9PresenterD1Ev), UNUSED)

<P><STRONG><a name="[4a5]"></a>touchgfx::TypedText::TypedText(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx9TypedTextC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::CustomContainer1Base()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>

<P><STRONG><a name="[9b2]"></a>touchgfx::TypedText::TypedText__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx9TypedTextC1Et), UNUSED)

<P><STRONG><a name="[4b5]"></a>touchgfx::colortype::colortype(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx9colortypeC1Ej))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::MarkerHistoryViewBase()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationViewBase::sub_InformationViewBase()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box()
</UL>

<P><STRONG><a name="[9b3]"></a>touchgfx::colortype::colortype__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, customcontainer1base.o(i._ZN8touchgfx9colortypeC1Ej), UNUSED)

<P><STRONG><a name="[13a]"></a>TouchGFXHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[1bb]"></a>HardwareMJPEGDecoder::getCurrentFrameNumber() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[1c1]"></a>TouchGFXGeneratedHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV20TouchGFXGeneratedHAL)
</UL>
<P><STRONG><a name="[4fe]"></a>touchgfx::Rasterizer::calculateAlpha(int) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canvas.o(i._ZNK8touchgfx10Rasterizer14calculateAlphaEi))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f1]"></a>touchgfx::CanvasWidget::invalidate() const</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CanvasWidget::invalidate() const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[1f0]"></a>touchgfx::CanvasWidget::getSolidRect() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[1f6]"></a>touchgfx::CanvasWidget::getMinimalRect() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CanvasWidget::getMinimalRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[1ef]"></a>touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[1f5]"></a>touchgfx::CanvasWidget::getAlpha() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv))
<BR>[Address Reference Count : 2]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[528]"></a>touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, textprovider.o(i._ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[531]"></a>touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, textprovider.o(i._ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
</UL>

<P><STRONG><a name="[20b]"></a>touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[20d]"></a>touchgfx::GeneratedFont::getGSUBTable() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getGSUBTableEv))
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[20f]"></a>touchgfx::GeneratedFont::getPixelData(const touchgfx::GlyphNode*) const</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GeneratedFont::getPixelData(const touchgfx::GlyphNode*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[20e]"></a>touchgfx::GeneratedFont::getContextualFormsTable() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv))
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[210]"></a>touchgfx::PainterRGB565::getRenderingMethod() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, painterrgb565.o(i._ZNK8touchgfx13PainterRGB56518getRenderingMethodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::PainterRGB565::getRenderingMethod() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[213]"></a>touchgfx::PainterRGB565::paint(unsigned char*, short, short, short, short, unsigned char) const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, painterrgb565.o(i._ZNK8touchgfx13PainterRGB5655paintEPhssssh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::PainterRGB565::paint(unsigned char*, short, short, short, short, unsigned char) const &rArr; touchgfx::paint::rgb565::lineFromColor(unsigned short*, unsigned, unsigned, unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::paint::rgb565::lineFromColor(unsigned short*, unsigned, unsigned, unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[212]"></a>touchgfx::PainterRGB565::tearDown() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, painterrgb565.o(i._ZNK8touchgfx13PainterRGB5658tearDownEv))
<BR><BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::paint::rgb565::tearDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[215]"></a>touchgfx::ScalableImage::getSolidRect() const</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::ScalableImage::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[621]"></a>touchgfx::ScalableImage::lookupRenderVariant() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage19lookupRenderVariantEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScalableImage::lookupRenderVariant() const &rArr; touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[214]"></a>touchgfx::ScalableImage::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 278 bytes, Stack size 144 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = touchgfx::ScalableImage::draw(const touchgfx::Rect&) const &rArr; touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[622]"></a>touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const</STRONG> (Thumb, 560 bytes, Stack size 328 bytes, scalableimage.o(i._ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::lookupRenderVariant() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed28_4(float)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[21b]"></a>touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, buttonwithicon.o(i._ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const &rArr; touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
</UL>
<P><STRONG><a name="[21e]"></a>touchgfx::SnapshotWidget::getSolidRect() const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SnapshotWidget::getSolidRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[21f]"></a>touchgfx::SnapshotWidget::invalidateContent() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SnapshotWidget::invalidateContent() const &rArr; touchgfx::Drawable::invalidateContent() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateContent() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[21d]"></a>touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[222]"></a>touchgfx::AbstractPainter::getRenderingMethod() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter18getRenderingMethodEv))
<BR>[Address Reference Count : 2]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[211]"></a>touchgfx::AbstractPainter::setup(const touchgfx::Rect&) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE))
<BR>[Address Reference Count : 3]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[223]"></a>touchgfx::AbstractPainter::tearDown() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mainboardviewbase.o(i._ZNK8touchgfx15AbstractPainter8tearDownEv))
<BR>[Address Reference Count : 2]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[225]"></a>touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 426 bytes, Stack size 80 bytes, buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::getText(unsigned short) const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[551]"></a>touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[552]"></a>touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[54f]"></a>touchgfx::ScrollableContainer::getXScrollbar() const</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer13getXScrollbarEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::ScrollableContainer::getXScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[550]"></a>touchgfx::ScrollableContainer::getYScrollbar() const</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer13getYScrollbarEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[23d]"></a>touchgfx::ScrollableContainer::getContainedArea() const</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer16getContainedAreaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::ScrollableContainer::getContainedArea() const &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[240]"></a>touchgfx::ScrollableContainer::getChildrenContainedArea() const</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::ScrollableContainer::getChildrenContainedArea() const &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[24e]"></a>touchgfx::TextAreaWithOneWildcard::getWildcard1() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev))
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[252]"></a>touchgfx::TextAreaWithTwoWildcards::getWildcard1() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
</UL>
<P><STRONG><a name="[253]"></a>touchgfx::TextAreaWithTwoWildcards::getWildcard2() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZNK8touchgfx24TextAreaWithTwoWildcards12getWildcard2Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
</UL>
<P><STRONG><a name="[247]"></a>touchgfx::TextAreaWithWildcardBase::invalidateContent() const</STRONG> (Thumb, 196 bytes, Stack size 160 bytes, textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, const unsigned short*, const touchgfx::FontContextualFormsTable*, ...)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[250]"></a>touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::calculateBoundingArea() const &rArr; touchgfx::TextArea::BoundingArea::BoundingArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::BoundingArea::BoundingArea()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[245]"></a>touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 234 bytes, Stack size 88 bytes, textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[25b]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[25c]"></a>touchgfx::Box::invalidateContent() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, box.o(i._ZNK8touchgfx3Box17invalidateContentEv))
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[25a]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[626]"></a>touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal.o(i._ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
</UL>

<P><STRONG><a name="[55e]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>

<P><STRONG><a name="[567]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>

<P><STRONG><a name="[5ea]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase11is1x1InsideEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5ef]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase11is2x2InsideEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2Inside(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[629]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is2PartiallyInside(int, int) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase18is2PartiallyInsideEii))
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
</UL>

<P><STRONG><a name="[5f1]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase20is2x2PartiallyInsideEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2PartiallyInside(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[627]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase9is1InsideEii))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2Inside(int, int) const
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2PartiallyInside(int, int) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>

<P><STRONG><a name="[628]"></a>touchgfx::LCD::DrawTextureMapScanLineBase::is2Inside(int, int) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx3LCD26DrawTextureMapScanLineBase9is2InsideEii))
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
</UL>

<P><STRONG><a name="[264]"></a>touchgfx::Font::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE))
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
</UL>
<P><STRONG><a name="[265]"></a>touchgfx::Font::getGSUBTable() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv))
<BR>[Address Reference Count : 2]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[207]"></a>touchgfx::Font::getFontHeight() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[204]"></a>touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const &rArr; touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[209]"></a>touchgfx::Font::getBitsPerPixel() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[20a]"></a>touchgfx::Font::getByteAlignRow() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[203]"></a>touchgfx::Font::getEllipsisChar() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[202]"></a>touchgfx::Font::getFallbackChar() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[205]"></a>touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</STRONG> (Thumb, 106 bytes, Stack size 144 bytes, font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[206]"></a>touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[20c]"></a>touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</STRONG> (Thumb, 80 bytes, Stack size 136 bytes, font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[62a]"></a>touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</STRONG> (Thumb, 168 bytes, Stack size 160 bytes, font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[208]"></a>touchgfx::Font::getMinimumTextHeight() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[266]"></a>touchgfx::Font::getContextualFormsTable() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv))
<BR>[Address Reference Count : 2]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[201]"></a>touchgfx::Font::getGlyph(unsigned short) const</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Font::getGlyph(unsigned short) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[268]"></a>touchgfx::Line::getMinimalRect() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx4Line14getMinimalRectEv))
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[269]"></a>touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</STRONG> (Thumb, 436 bytes, Stack size 168 bytes, line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const &rArr; touchgfx::Canvas::render(unsigned char) &rArr; touchgfx::Rasterizer::render(const touchgfx::AbstractPainter*, unsigned char*, short, unsigned char, unsigned char) &rArr; touchgfx::Outline::closeOutlineAndSortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned) &rArr; touchgfx::Outline::swapCells(touchgfx::Cell*, touchgfx::Cell*)
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render(unsigned char)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -() const
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[267]"></a>touchgfx::Line::invalidateContent() const</STRONG> (Thumb, 564 bytes, Stack size 88 bytes, line.o(i._ZNK8touchgfx4Line17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Line::invalidateContent() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::ceil() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[507]"></a>touchgfx::Rect::right() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect5rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
</UL>

<P><STRONG><a name="[508]"></a>touchgfx::Rect::bottom() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect6bottomEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
</UL>

<P><STRONG><a name="[503]"></a>touchgfx::Rect::isEmpty() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned char*, short, short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::invalidateContent() const
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[504]"></a>touchgfx::Rect::includes(const touchgfx::Rect&) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect8includesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::includes(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[506]"></a>touchgfx::Rect::intersect(const touchgfx::Rect&) const</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect9intersectERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[596]"></a>touchgfx::Rect::intersect(short, short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, container.o(i._ZNK8touchgfx4Rect9intersectEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[597]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[272]"></a>touchgfx::Image::getSolidRect() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, image.o(i._ZNK8touchgfx5Image12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Image::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[216]"></a>touchgfx::Image::invalidateContent() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, image.o(i._ZNK8touchgfx5Image17invalidateContentEv))
<BR>[Address Reference Count : 2]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
</UL>
<P><STRONG><a name="[271]"></a>touchgfx::Image::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::Image::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[625]"></a>touchgfx::Texts::getText(unsigned short) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx5Texts7getTextEt))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[630]"></a>touchgfx::Bitmap::BitmapData::getFormat() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap10BitmapData9getFormatEv))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
</UL>

<P><STRONG><a name="[5ca]"></a>touchgfx::Bitmap::getExtraData() const</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getExtraDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::getExtraData() const
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::BitmapData::getFormat() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[5cb]"></a>touchgfx::Bitmap::getSolidRect() const</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::getSolidRect() const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
</UL>

<P><STRONG><a name="[55b]"></a>touchgfx::Bitmap::hasTransparentPixels() const</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap20hasTransparentPixelsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[5c9]"></a>touchgfx::Bitmap::getData() const</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[536]"></a>touchgfx::Bitmap::getWidth() const</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap8getWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[55a]"></a>touchgfx::Bitmap::getFormat() const</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getFormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::BitmapData::getFormat() const
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[537]"></a>touchgfx::Bitmap::getHeight() const</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, const touchgfx::Rect&, unsigned short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::draw(const touchgfx::Rect&) const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::getSolidRect() const
</UL>

<P><STRONG><a name="[1fa]"></a>touchgfx::Button::getSolidRect() const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, button.o(i._ZNK8touchgfx6Button12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Button::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[1fb]"></a>touchgfx::Button::invalidateContent() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, button.o(i._ZNK8touchgfx6Button17invalidateContentEv))
<BR>[Address Reference Count : 4]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[1f9]"></a>touchgfx::Button::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[58f]"></a>touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, canvas.o(i._ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[590]"></a>touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, canvas.o(i._ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[27e]"></a>touchgfx::Slider::positionToValue(short) const</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, slider.o(i._ZNK8touchgfx6Slider15positionToValueEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::positionToValue(short) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[27d]"></a>touchgfx::Slider::valueToPosition(int) const</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, slider.o(i._ZNK8touchgfx6Slider15valueToPositionEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::valueToPosition(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[281]"></a>touchgfx::Slider::getValueRangeSize() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider17getValueRangeSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[27f]"></a>touchgfx::Slider::getIndicatorRadius() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider18getIndicatorRadiusEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[280]"></a>touchgfx::Slider::getIndicatorPositionRangeSize() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[587]"></a>touchgfx::CWRUtil::Q5::ceil() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q54ceilEv))
<BR><BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
</UL>

<P><STRONG><a name="[586]"></a>touchgfx::CWRUtil::Q5::floor() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q55floorEv))
<BR><BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[584]"></a>touchgfx::CWRUtil::Q5::operator /(int) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5dvEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator /(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[57f]"></a>touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5miERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[62d]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[62b]"></a>touchgfx::CWRUtil::Q5::operator -() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5ngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[585]"></a>touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5plERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[17a]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleTickEvent()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::functionVolume(int)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomContainer1Base::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 20]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[17d]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[179]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[538]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScalableImage::drawQuad(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::makeSnapshot(unsigned short)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[1f2]"></a>touchgfx::Drawable::invalidateContent() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, customcontainer1base.o(i._ZNK8touchgfx8Drawable17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Drawable::invalidateContent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::invalidateContent() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[17e]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 22]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> scalableimage.o(.constdata__ZTVN8touchgfx13ScalableImageE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[2c0]"></a>touchgfx::LCD16bpp::framebufferFormat() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2c1]"></a>touchgfx::LCD16bpp::framebufferStride() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferStrideEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::framebufferStride() const &rArr; touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[5cc]"></a>touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKjRKNS_4RectES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) const &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[5e9]"></a>touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp28DrawTextureMapScanLineBase1627overrunCheckNearestNeighborERPtRiS4_S4_iiss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckNearestNeighbor(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1x1Inside(int, int, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5ee]"></a>touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp28DrawTextureMapScanLineBase1633overrunCheckBilinearInterpolationERPtRiS4_S4_iiss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD16bpp::DrawTextureMapScanLineBase16::overrunCheckBilinearInterpolation(unsigned short*&, int&, int&, int&, int, int, short, short) const &rArr; touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2PartiallyInside(int, int, int, int) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is2x2Inside(int, int, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5ec]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA10writePixelEPthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::writePixel(unsigned short*, unsigned char, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5ed]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA10writePixelEPth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::writePixel(unsigned short*, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f0]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA10writePixelEPtPKtjshhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f2]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f3]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA10writePixelEPtPKtjshh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, unsigned, short, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f4]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getAlphaFromA4(const unsigned short*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f5]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char) const</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA10writePixelEPtPKtsiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f6]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char) const</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA10writePixelEPtPKhPKtsiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f7]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char) const</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA10writePixelEPtPKhS4_siih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f8]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char) const</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA10writePixelEPtPKtPKhsiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5f9]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA10writePixelEPtPKjsiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5fa]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int) const</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA10writePixelEPtPKhPKtsii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5fb]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA10writePixelEPtPKhS4_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5fc]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int) const</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA10writePixelEPtPKtPKhsii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5fd]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA10writePixelEPtPKtsiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5fe]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[5ff]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA10writePixelEPtPKjsii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[600]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char) const</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA10writePixelEPtPKhPKjsiih))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[601]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA10writePixelEPtPKtsiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned short*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[602]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[603]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA10writePixelEPtPKhPKtsiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[604]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[605]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA10writePixelEPtPKhS4_siihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[606]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 354 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[607]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 302 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA10writePixelEPtPKtPKhsiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned short*, const unsigned char*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[608]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 366 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned short*, const unsigned char*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[609]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA10writePixelEPtPKhPKjsii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60a]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA10writePixelEPtPKjsiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60b]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKjssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60c]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA10writePixelEPtPKhPKtsiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60d]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60e]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA10writePixelEPtPKhS4_siihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned char*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[60f]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned char*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[610]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA10writePixelEPtPKhPKtsiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned short*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565_FFcheck(unsigned short, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[611]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 338 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned short*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate565(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_565(unsigned short, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[612]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA10writePixelEPtPKjsiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[613]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKjssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[614]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA10writePixelEPtPKhPKjsiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[615]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKjssiihhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[616]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA10writePixelEPtPKhPKjsiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixel(unsigned short*, const unsigned char*, const unsigned*, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888_FFcheck(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[617]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const</STRONG> (Thumb, 338 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKjssiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::writePixelOnEdge(unsigned short*, const unsigned char*, const unsigned*, short, short, int, int, unsigned char, unsigned char) const &rArr; touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::DrawTextureMapScanLineBase::is1Inside(int, int) const
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate888(unsigned, unsigned, unsigned, unsigned, unsigned char, unsigned char)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::bilinearInterpolate8(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::div255_888(unsigned, unsigned char)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::drawTextureMapScanLineSubdivisions(int, int, int, int, float, float, float, int, int, int, int, float, float, float, float, float, const touchgfx::DrawingSurface&, int, int, const touchgfx::TextureSurface&, unsigned char, float, float, float)
</UL>

<P><STRONG><a name="[635]"></a>touchgfx::TextArea::BoundingArea::isValid(const unsigned short*) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, textarea.o(i._ZNK8touchgfx8TextArea12BoundingArea7isValidEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::invalidateContent() const
</UL>

<P><STRONG><a name="[24a]"></a>touchgfx::TextArea::getAlignment() const</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getAlignmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextArea::getAlignment() const
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[246]"></a>touchgfx::TextArea::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextArea::getSolidRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[24c]"></a>touchgfx::TextArea::getTextWidth() const</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::TextArea::getTextWidth() const &rArr; touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[255]"></a>touchgfx::TextArea::getWildcard1() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getWildcard1Ev))
<BR>[Address Reference Count : 2]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[24f]"></a>touchgfx::TextArea::getWildcard2() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, markerhistoryviewbase.o(i._ZNK8touchgfx8TextArea12getWildcard2Ev))
<BR>[Address Reference Count : 3]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[24b]"></a>touchgfx::TextArea::getTextHeight() const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, textarea.o(i._ZNK8touchgfx8TextArea13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::getTextHeight() const &rArr; touchgfx::TypedText::getText() const
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[2c9]"></a>touchgfx::TextArea::invalidateContent() const</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, textarea.o(i._ZNK8touchgfx8TextArea17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::invalidateContent() const &rArr; touchgfx::TypedText::getText() const
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::BoundingArea::isValid(const unsigned short*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[24d]"></a>touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx24TextAreaWithTwoWildcardsE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[2ca]"></a>touchgfx::TextArea::calculateBoundingArea() const</STRONG> (Thumb, 684 bytes, Stack size 192 bytes, textarea.o(i._ZNK8touchgfx8TextArea21calculateBoundingAreaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::endOfString()
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, const unsigned short*, const touchgfx::FontContextualFormsTable*, ...)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[2c8]"></a>touchgfx::TextArea::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = touchgfx::TextArea::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::BoundingArea::isValid(const unsigned short*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[636]"></a>touchgfx::ConstFont::find(unsigned short) const</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, constfont.o(i._ZNK8touchgfx9ConstFont4findEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const
</UL>

<P><STRONG><a name="[200]"></a>touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const &rArr; touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[178]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[17b]"></a>touchgfx::Container::invalidateContent() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, container.o(i._ZNK8touchgfx9Container17invalidateContentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::invalidateContent() const
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[177]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> customcontainer1.o(.constdata__ZTV16CustomContainer1)
<LI> customcontainer1base.o(.constdata__ZTV20CustomContainer1Base)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[548]"></a>touchgfx::DragEvent::getDeltaX() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZNK8touchgfx9DragEvent9getDeltaXEv))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[54a]"></a>touchgfx::DragEvent::getDeltaY() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZNK8touchgfx9DragEvent9getDeltaYEv))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[525]"></a>touchgfx::GlyphNode::top() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx9GlyphNode3topEv))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[530]"></a>touchgfx::GlyphNode::width() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fontcache.o(i._ZNK8touchgfx9GlyphNode5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[51c]"></a>touchgfx::GlyphNode::advance() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i._ZNK8touchgfx9GlyphNode7advanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[61c]"></a>touchgfx::TypedText::hasValidId() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buttonwithlabel.o(i._ZNK8touchgfx9TypedText10hasValidIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight() const
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getAlignment() const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::invalidateContent() const
</UL>

<P><STRONG><a name="[634]"></a>touchgfx::TypedText::getTextDirection() const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, textarea.o(i._ZNK8touchgfx9TypedText16getTextDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[53c]"></a>touchgfx::TypedText::getFont() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZNK8touchgfx9TypedText7getFontEv))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::updateTextPosition()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
</UL>

<P><STRONG><a name="[4a8]"></a>touchgfx::TypedText::getText() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZNK8touchgfx9TypedText7getTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TypedText::getText() const
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::getText(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::invalidateContent() const
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight() const
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::draw(const touchgfx::Rect&) const
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::updateTextPosition()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateBoundingArea() const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::invalidateContent() const
</UL>

<P><STRONG><a name="[4ea]"></a>touchgfx::colortype::operator unsigned() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZNK8touchgfx9colortypecvjEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[19d]"></a>thunk{-4} to Screen2Presenter::cpuChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter10cpuChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::cpuChanged() &rArr; Screen2Presenter::cpuChanged() &rArr; Screen2View::displayCPU(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::cpuChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[1a0]"></a>thunk{-4} to Screen2Presenter::memChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter10memChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::memChanged() &rArr; Screen2Presenter::memChanged() &rArr; Screen2View::displayMem(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::memChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[19e]"></a>thunk{-4} to Screen2Presenter::diskChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter11diskChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::diskChanged() &rArr; Screen2Presenter::diskChanged() &rArr; Screen2View::displayDisk(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::diskChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[1a1]"></a>thunk{-4} to Screen2Presenter::timeChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter11timeChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::timeChanged() &rArr; Screen2Presenter::timeChanged() &rArr; Screen2View::displayTime(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::timeChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[1a2]"></a>thunk{-4} to Screen2Presenter::zoneChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter11zoneChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::zoneChanged() &rArr; Screen2Presenter::zoneChanged() &rArr; Screen2View::displayZone(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::zoneChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[19f]"></a>thunk{-4} to Screen2Presenter::diskLoadChanged()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen2presenter.o(i._ZThn4_N16Screen2Presenter15diskLoadChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = thunk{-4} to Screen2Presenter::diskLoadChanged() &rArr; Screen2Presenter::diskLoadChanged() &rArr; Screen2View::displayDiskLoad(char*) &rArr; touchgfx::TextAreaWithWildcardBase::invalidateContent() const &rArr; touchgfx::TextArea::calculateBoundingArea() const &rArr; touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::diskLoadChanged()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[637]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b4]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[679]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
</UL>

<P><STRONG><a name="[9b5]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[9b6]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[639]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b7]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[460]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[9b8]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9b9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[63a]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9ba]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4e7]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>

<P><STRONG><a name="[9bb]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[9bc]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[63b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9bd]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[37f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfo
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDiskLoad(char*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayZone(char*)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayTime(char*)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayDisk(char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayMem(char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::displayCPU(char*)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatRequestHeader
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatChunkSize
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
</UL>

<P><STRONG><a name="[9be]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9bf]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2f9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[9c0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[4ed]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>

<P><STRONG><a name="[475]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_consola_20_4bpp()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_arial_30_4bpp()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>

<P><STRONG><a name="[15b]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 21]<UL><LI> touchgfxhal.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
<LI> touchgfxhal.o(.constdata__ZTVN8touchgfx16ButtonControllerE)
<LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx12FontProviderE)
<LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx15TouchControllerE)
<LI> touchgfxgeneratedhal.o(.constdata__ZTVN8touchgfx15VideoControllerE)
<LI> hardwaremjpegdecoder.o(.constdata__ZTV12MJPEGDecoder)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> customcontainer1base.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIvvvEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRNS_8DrawableEvvEE)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_6SliderEivEE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[20]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[63d]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1f]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[9c1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9c2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2f6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[646]"></a>arpCreateEntry</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, arp.o(i.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[652]"></a>arpDumpPacket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arp.o(i.arpDumpPacket))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
</UL>

<P><STRONG><a name="[649]"></a>arpEnqueuePacket</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, arp.o(i.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[64b]"></a>arpFindEntry</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, arp.o(i.arpFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[64f]"></a>arpFlushCache</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(i.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[648]"></a>arpFlushQueuedPackets</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, arp.o(i.arpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>

<P><STRONG><a name="[650]"></a>arpInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arp.o(i.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[651]"></a>arpProcessPacket</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, arp.o(i.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[657]"></a>arpProcessReply</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, arp.o(i.arpProcessReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[656]"></a>arpProcessRequest</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, arp.o(i.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[65c]"></a>arpResolve</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[65e]"></a>arpSendProbe</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, arp.o(i.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = arpSendProbe &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[65a]"></a>arpSendQueuedPackets</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, arp.o(i.arpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[65b]"></a>arpSendReply</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, arp.o(i.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = arpSendReply &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[65d]"></a>arpSendRequest</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, arp.o(i.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[664]"></a>arpTick</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, arp.o(i.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[665]"></a>cJSON_Delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[666]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
</UL>

<P><STRONG><a name="[7ea]"></a>cJSON_InitHooks</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cjson.o(i.cJSON_InitHooks))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[669]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
</UL>

<P><STRONG><a name="[66b]"></a>cJSON_ParseWithLengthOpts</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, cjson.o(i.cJSON_ParseWithLengthOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[66a]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[677]"></a>cpuInfoParser</STRONG> (Thumb, 276 bytes, Stack size 256 bytes, jsonparser.o(i.cpuInfoParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = cpuInfoParser &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[683]"></a>debugInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, debug.o(i.debugInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = debugInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[684]"></a>dhcpAddOption</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, dhcp_common.o(i.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[685]"></a>dhcpClientChangeState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>

<P><STRONG><a name="[689]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientCheckTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[68a]"></a>dhcpClientComputeElapsedTime</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpClientComputeElapsedTime &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[68b]"></a>dhcpClientDumpConfig</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dhcpClientDumpConfig &rArr; formatSystemTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[68d]"></a>dhcpClientGetDefaultSettings</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientGetDefaultSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68f]"></a>dhcpClientInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcpClientInit &rArr; osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[690]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[692]"></a>dhcpClientParseAck</STRONG> (Thumb, 718 bytes, Stack size 64 bytes, dhcp_client_misc.o(i.dhcpClientParseAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dhcpClientParseAck &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[696]"></a>dhcpClientParseNak</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientParseNak))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dhcpClientParseNak &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[697]"></a>dhcpClientParseOffer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientParseOffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dhcpClientParseOffer &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[e1]"></a>dhcpClientProcessMessage</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, dhcp_client_misc.o(i.dhcpClientProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dhcpClientProcessMessage &rArr; dhcpClientParseAck &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_client.o(i.dhcpClientStart)
</UL>
<P><STRONG><a name="[691]"></a>dhcpClientResetConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientResetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[698]"></a>dhcpClientSendDecline</STRONG> (Thumb, 284 bytes, Stack size 120 bytes, dhcp_client_misc.o(i.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[69c]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 276 bytes, Stack size 120 bytes, dhcp_client_misc.o(i.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[69d]"></a>dhcpClientSendRequest</STRONG> (Thumb, 418 bytes, Stack size 128 bytes, dhcp_client_misc.o(i.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[69e]"></a>dhcpClientStart</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientStart &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a0]"></a>dhcpClientStateBound</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a1]"></a>dhcpClientStateInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a3]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a4]"></a>dhcpClientStateProbing</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a5]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a7]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a8]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6a9]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6aa]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[6ab]"></a>dhcpClientTick</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dhcp_client_misc.o(i.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[695]"></a>dhcpGetOption</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcp_common.o(i.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[6e5]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6e6]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[6e2]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[6f7]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6e1]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[6ba]"></a>dnsCompareName</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, dns_common.o(i.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[6bb]"></a>dnsCreateEntry</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dns_cache.o(i.dnsCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dnsCreateEntry &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[6bc]"></a>dnsDeleteEntry</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dns_cache.o(i.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[6c8]"></a>dnsEncodeName</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, dns_common.o(i.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrFormatIpv6AddrRecord
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrFormatIpv4AddrRecord
</UL>

<P><STRONG><a name="[6be]"></a>dnsFindEntry</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, dns_cache.o(i.dnsFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dnsFindEntry &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[6bf]"></a>dnsFlushCache</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dns_cache.o(i.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[6c0]"></a>dnsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dns_cache.o(i.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dnsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[6c1]"></a>dnsParseName</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, dns_common.o(i.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[e2]"></a>dnsProcessResponse</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, dns_client.o(i.dnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dnsProcessResponse &rArr; dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_client.o(i.dnsResolve)
</UL>
<P><STRONG><a name="[6c2]"></a>dnsResolve</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, dns_client.o(i.dnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[6c5]"></a>dnsSendQuery</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, dns_client.o(i.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[6c9]"></a>dnsTick</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, dns_cache.o(i.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = dnsTick &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[6cb]"></a>ethAcceptMacAddr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ethernet.o(i.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[65f]"></a>ethAllocBuffer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ethernet.o(i.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
</UL>

<P><STRONG><a name="[6ce]"></a>ethCalcCrc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[6db]"></a>ethCalcCrcEx</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[6cd]"></a>ethCheckCrc</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethCheckCrc &rArr; ethCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6cf]"></a>ethCheckDestAddr</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ethernet_misc.o(i.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6d0]"></a>ethDropMacAddr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ethernet.o(i.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[6d5]"></a>ethDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet.o(i.ethDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6d1]"></a>ethInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethernet.o(i.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[6d2]"></a>ethPadFrame</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ethernet_misc.o(i.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethPadFrame &rArr; netBufferAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[6d4]"></a>ethProcessFrame</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, ethernet.o(i.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[661]"></a>ethSendFrame</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, ethernet.o(i.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
</UL>

<P><STRONG><a name="[6d6]"></a>ethUpdateErrorStats</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6d7]"></a>ethUpdateInStats</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethUpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethUpdateInStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[6da]"></a>ethUpdateOutStats</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethUpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethUpdateOutStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[325]"></a>f_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[33d]"></a>f_closedir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[328]"></a>f_lseek</STRONG> (Thumb, 688 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[6e3]"></a>f_mkfs</STRONG> (Thumb, 1654 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_mkfs &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[337]"></a>f_mount</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[331]"></a>f_open</STRONG> (Thumb, 594 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfo
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[338]"></a>f_opendir</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[31f]"></a>f_read</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfo
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[339]"></a>f_readdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_StorageParse
</UL>

<P><STRONG><a name="[6dd]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[32b]"></a>f_write</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[680]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[6ec]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[6f4]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[676]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[686]"></a>formatSystemTime</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, date_time.o(i.formatSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = formatSystemTime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[d5]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[15]"></a>ft6x06_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ft6x06_Init &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_GetInstance
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ft6x06_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ft6x06_ReadID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>ft6x06_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ft6x06_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>ft6x06_TS_DetectTouch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ft6x06_TS_DetectTouch &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>ft6x06_TS_DisableIT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>ft6x06_TS_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ft6x06_TS_EnableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ft6x06_TS_GetXY</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ft6x06_TS_GetXY &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>ft6x06_TS_ITStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>ft6x06_TS_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ft6x06_TS_Start &rArr; ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[6fa]"></a>ftpClientChangeState</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftp_client_misc.o(i.ftpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftpClientChangeState &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDisconnect
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLoginEx
</UL>

<P><STRONG><a name="[706]"></a>ftpClientCheckTimeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftp_client_misc.o(i.ftpClientCheckTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteFile
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDisconnect
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLoginEx
</UL>

<P><STRONG><a name="[6fb]"></a>ftpClientCloseChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftp_client_transport.o(i.ftpClientCloseChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = ftpClientCloseChannel &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDisconnect
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDeinit
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
</UL>

<P><STRONG><a name="[6fd]"></a>ftpClientCloseFile</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftp_client.o(i.ftpClientCloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = ftpClientCloseFile &rArr; ftpClientTerminateDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[6ff]"></a>ftpClientConnect</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, ftp_client.o(i.ftpClientConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = ftpClientConnect &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenSecureChannel
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientEstablishSecureChannel
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[707]"></a>ftpClientDeinit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ftp_client.o(i.ftpClientDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ftpClientDeinit &rArr; ftpClientCloseChannel &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[708]"></a>ftpClientDisconnect</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ftp_client.o(i.ftpClientDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ftpClientDisconnect &rArr; ftpClientShutdownChannel &rArr; socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientShutdownChannel
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[703]"></a>ftpClientEstablishSecureChannel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftp_client_transport.o(i.ftpClientEstablishSecureChannel))
<BR><BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[705]"></a>ftpClientFormatCommand</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ftp_client_misc.o(i.ftpClientFormatCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ftpClientFormatCommand &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLoginEx
</UL>

<P><STRONG><a name="[70a]"></a>ftpClientFormatPasvCommand</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ftp_client_misc.o(i.ftpClientFormatPasvCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftpClientFormatPasvCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[70b]"></a>ftpClientFormatPortCommand</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ftp_client_misc.o(i.ftpClientFormatPortCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ftpClientFormatPortCommand &rArr; ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strReplaceChar
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[70e]"></a>ftpClientInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ftp_client.o(i.ftpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftpClientInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[70f]"></a>ftpClientInitDataTransfer</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, ftp_client_misc.o(i.ftpClientInitDataTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = ftpClientInitDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetLocalAddr
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientParsePasvReply
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPasvCommand
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientEstablishSecureChannel
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
</UL>

<P><STRONG><a name="[715]"></a>ftpClientLogin</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftp_client.o(i.ftpClientLogin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ftpClientLogin &rArr; ftpClientLoginEx &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLoginEx
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[716]"></a>ftpClientLoginEx</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, ftp_client.o(i.ftpClientLoginEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = ftpClientLoginEx &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLogin
</UL>

<P><STRONG><a name="[700]"></a>ftpClientOpenChannel</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ftp_client_transport.o(i.ftpClientOpenChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ftpClientOpenChannel &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTxBufferSize
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetRxBufferSize
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetInterface
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[71b]"></a>ftpClientOpenFile</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, ftp_client.o(i.ftpClientOpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ftpClientOpenFile &rArr; ftpClientInitDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatCommand
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[702]"></a>ftpClientOpenSecureChannel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ftp_client_transport.o(i.ftpClientOpenSecureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftpClientOpenSecureChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
</UL>

<P><STRONG><a name="[712]"></a>ftpClientParsePasvReply</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ftp_client_misc.o(i.ftpClientParsePasvReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ftpClientParsePasvReply &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[71d]"></a>ftpClientReadChannel</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ftp_client_transport.o(i.ftpClientReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = ftpClientReadChannel &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
</UL>

<P><STRONG><a name="[704]"></a>ftpClientSendCommand</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, ftp_client_misc.o(i.ftpClientSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strRemoveTrailingSpace
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteChannel
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientReadChannel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLoginEx
</UL>

<P><STRONG><a name="[726]"></a>ftpClientSetTimeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftp_client.o(i.ftpClientSetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[709]"></a>ftpClientShutdownChannel</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ftp_client_transport.o(i.ftpClientShutdownChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ftpClientShutdownChannel &rArr; socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDisconnect
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientTerminateDataTransfer
</UL>

<P><STRONG><a name="[6fe]"></a>ftpClientTerminateDataTransfer</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ftp_client_misc.o(i.ftpClientTerminateDataTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = ftpClientTerminateDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientShutdownChannel
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseFile
</UL>

<P><STRONG><a name="[71f]"></a>ftpClientWriteChannel</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ftp_client_transport.o(i.ftpClientWriteChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteFile
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
</UL>

<P><STRONG><a name="[723]"></a>ftpClientWriteFile</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ftp_client.o(i.ftpClientWriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ftpClientWriteFile &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteChannel
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[724]"></a>ftpPutFile</STRONG> (Thumb, 338 bytes, Stack size 560 bytes, main.o(i.ftpPutFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = ftpPutFile &rArr; ftpClientOpenFile &rArr; ftpClientInitDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteFile
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSetTimeout
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenFile
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientLogin
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInit
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDisconnect
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientDeinit
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseFile
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
</UL>

<P><STRONG><a name="[eb]"></a>ftpTaskfun</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, main.o(i.ftpTaskfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = ftpTaskfun &rArr; ftpPutFile &rArr; ftpClientOpenFile &rArr; ftpClientInitDataTransfer &rArr; ftpClientSendCommand &rArr; ftpClientWriteChannel &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_PB_GetState
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddr
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[725]"></a>getHostByName</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, socket.o(i.getHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
</UL>

<P><STRONG><a name="[6e9]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[72b]"></a>httpCheckCharset</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, http_common.o(i.httpCheckCharset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpCheckCharset
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[72c]"></a>httpClientAddHeaderField</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, http_client.o(i.httpClientAddHeaderField))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = httpClientAddHeaderField &rArr; httpClientParseContentLengthField &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseTransferEncodingField
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseContentLengthField
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseConnectionField
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[730]"></a>httpClientChangeRequestState</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientChangeRequestState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = httpClientChangeRequestState &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCreateRequest
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseChunkSize
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatChunkSize
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteTrailer
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[731]"></a>httpClientChangeState</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = httpClientChangeState &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[737]"></a>httpClientCheckTimeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, http_client_misc.o(i.httpClientCheckTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteTrailer
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[732]"></a>httpClientCloseBody</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, http_client.o(i.httpClientCloseBody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = httpClientCloseBody &rArr; httpClientReadBody &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatChunkSize
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[738]"></a>httpClientCloseConnection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, http_client_transport.o(i.httpClientCloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = httpClientCloseConnection &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDeinit
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
</UL>

<P><STRONG><a name="[739]"></a>httpClientConnect</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, http_client.o(i.httpClientConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = httpClientConnect &rArr; httpClientEstablishConnection &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientOpenConnection
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientEstablishConnection
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseConnection
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeState
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[73c]"></a>httpClientCreateRequest</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, http_client.o(i.httpClientCreateRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = httpClientCreateRequest &rArr; httpClientFormatRequestHeader &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientFormatRequestHeader
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[73e]"></a>httpClientDeinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, http_client.o(i.httpClientDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = httpClientDeinit &rArr; httpClientCloseConnection &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseConnection
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[736]"></a>httpClientDisconnect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, http_client.o(i.httpClientDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = httpClientDisconnect &rArr; httpClientShutdownConnection &rArr; socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientShutdownConnection
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseConnection
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[73b]"></a>httpClientEstablishConnection</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, http_client_transport.o(i.httpClientEstablishConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = httpClientEstablishConnection &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
</UL>

<P><STRONG><a name="[733]"></a>httpClientFormatChunkSize</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientFormatChunkSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpClientFormatChunkSize &rArr; httpClientChangeRequestState &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
</UL>

<P><STRONG><a name="[73d]"></a>httpClientFormatRequestHeader</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientFormatRequestHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpClientFormatRequestHeader &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCreateRequest
</UL>

<P><STRONG><a name="[740]"></a>httpClientGetHeaderField</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, http_client.o(i.httpClientGetHeaderField))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = httpClientGetHeaderField &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[753]"></a>httpClientGetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, http_client.o(i.httpClientGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[741]"></a>httpClientInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, http_client.o(i.httpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = httpClientInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[73a]"></a>httpClientOpenConnection</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, http_client_transport.o(i.httpClientOpenConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = httpClientOpenConnection &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetInterface
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
</UL>

<P><STRONG><a name="[742]"></a>httpClientParseChunkSize</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, http_client_misc.o(i.httpClientParseChunkSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpClientParseChunkSize &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
</UL>

<P><STRONG><a name="[72d]"></a>httpClientParseConnectionField</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientParseConnectionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpClientParseConnectionField &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[72f]"></a>httpClientParseContentLengthField</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientParseContentLengthField))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = httpClientParseContentLengthField &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[745]"></a>httpClientParseHeaderField</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, http_client_misc.o(i.httpClientParseHeaderField))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = httpClientParseHeaderField &rArr; httpClientParseContentLengthField &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCheckCharset
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseTransferEncodingField
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseContentLengthField
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseConnectionField
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[747]"></a>httpClientParseStatusLine</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, http_client_misc.o(i.httpClientParseStatusLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = httpClientParseStatusLine &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCheckCharset
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
</UL>

<P><STRONG><a name="[72e]"></a>httpClientParseTransferEncodingField</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, http_client_misc.o(i.httpClientParseTransferEncodingField))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpClientParseTransferEncodingField &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
</UL>

<P><STRONG><a name="[734]"></a>httpClientReadBody</STRONG> (Thumb, 662 bytes, Stack size 40 bytes, http_client.o(i.httpClientReadBody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = httpClientReadBody &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReceiveData
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseChunkSize
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeState
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[749]"></a>httpClientReadHeader</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, http_client.o(i.httpClientReadHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = httpClientReadHeader &rArr; httpClientCloseBody &rArr; httpClientReadBody &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSaveSession
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReceiveData
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteTrailer
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[735]"></a>httpClientReadTrailer</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, http_client.o(i.httpClientReadTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = httpClientReadTrailer &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReceiveData
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeState
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
</UL>

<P><STRONG><a name="[748]"></a>httpClientReceiveData</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, http_client_transport.o(i.httpClientReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
</UL>

<P><STRONG><a name="[74b]"></a>httpClientSaveSession</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, http_client_transport.o(i.httpClientSaveSession))
<BR><BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
</UL>

<P><STRONG><a name="[74c]"></a>httpClientSendData</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, http_client_transport.o(i.httpClientSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = httpClientSendData &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteTrailer
</UL>

<P><STRONG><a name="[74d]"></a>httpClientSetMethod</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, http_client.o(i.httpClientSetMethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = httpClientSetMethod &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[751]"></a>httpClientSetTimeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, http_client.o(i.httpClientSetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[74e]"></a>httpClientSetUri</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, http_client.o(i.httpClientSetUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = httpClientSetUri &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[750]"></a>httpClientSetVersion</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, http_client.o(i.httpClientSetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[73f]"></a>httpClientShutdownConnection</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, http_client_transport.o(i.httpClientShutdownConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = httpClientShutdownConnection &rArr; socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
</UL>

<P><STRONG><a name="[465]"></a>httpClientTest</STRONG> (Thumb, 508 bytes, Stack size 184 bytes, main.o(i.httpClientTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = httpClientTest &rArr; httpClientReadHeader &rArr; httpClientCloseBody &rArr; httpClientReadBody &rArr; httpClientReceiveData &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetVersion
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetUri
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetTimeout
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSetMethod
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientInit
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientGetStatus
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientGetHeaderField
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDisconnect
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientDeinit
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCreateRequest
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseBody
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientAddHeaderField
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[752]"></a>httpClientWriteHeader</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, http_client.o(i.httpClientWriteHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = httpClientWriteHeader &rArr; httpClientSendData &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientConnect
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSendData
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
</UL>

<P><STRONG><a name="[74a]"></a>httpClientWriteTrailer</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, http_client.o(i.httpClientWriteTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = httpClientWriteTrailer &rArr; httpClientSendData &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSendData
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCheckTimeout
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
</UL>

<P><STRONG><a name="[755]"></a>icmpDumpEchoMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpEchoMessage))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[75f]"></a>icmpDumpErrorMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpErrorMessage))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
</UL>

<P><STRONG><a name="[75c]"></a>icmpDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpMessage))
<BR><BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[754]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, icmp.o(i.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateOutStats
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpEchoMessage
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[75b]"></a>icmpProcessMessage</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, icmp.o(i.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateInStats
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[75e]"></a>icmpSendErrorMessage</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, icmp.o(i.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateOutStats
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpErrorMessage
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[75d]"></a>icmpUpdateInStats</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, icmp.o(i.icmpUpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[759]"></a>icmpUpdateOutStats</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, icmp.o(i.icmpUpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[761]"></a>icmpv6DumpDestUnreachableMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6DumpDestUnreachableMessage))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
</UL>

<P><STRONG><a name="[763]"></a>icmpv6DumpEchoMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6DumpEchoMessage))
<BR><BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
</UL>

<P><STRONG><a name="[775]"></a>icmpv6DumpErrorMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6DumpErrorMessage))
<BR><BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>

<P><STRONG><a name="[768]"></a>icmpv6DumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6DumpMessage))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[771]"></a>icmpv6DumpPacketTooBigMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(i.icmpv6DumpPacketTooBigMessage))
<BR><BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
</UL>

<P><STRONG><a name="[760]"></a>icmpv6ProcessDestUnreachable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, icmpv6.o(i.icmpv6ProcessDestUnreachable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icmpv6ProcessDestUnreachable
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpDestUnreachableMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[762]"></a>icmpv6ProcessEchoRequest</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, icmpv6.o(i.icmpv6ProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = icmpv6ProcessEchoRequest &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpEchoMessage
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[767]"></a>icmpv6ProcessMessage</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, icmpv6.o(i.icmpv6ProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpMessage
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[76a]"></a>icmpv6ProcessPacketTooBig</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, icmpv6.o(i.icmpv6ProcessPacketTooBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = icmpv6ProcessPacketTooBig &rArr; ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpPacketTooBigMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[773]"></a>icmpv6SendErrorMessage</STRONG> (Thumb, 366 bytes, Stack size 128 bytes, icmpv6.o(i.icmpv6SendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpErrorMessage
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
</UL>

<P><STRONG><a name="[786]"></a>igmpDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, igmp_common.o(i.igmpDumpMessage))
<BR><BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[776]"></a>igmpHostInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, igmp_host.o(i.igmpHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmpHostInit &rArr; netStartTimer &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[778]"></a>igmpHostJoinGroup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, igmp_host.o(i.igmpHostJoinGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[77a]"></a>igmpHostLinkChangeEvent</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, igmp_host.o(i.igmpHostLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
</UL>

<P><STRONG><a name="[77b]"></a>igmpHostProcessMembershipQuery</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = igmpHostProcessMembershipQuery &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[77d]"></a>igmpHostProcessMembershipReport</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmpHostProcessMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[77c]"></a>igmpHostProcessMessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp_host_misc.o(i.igmpHostProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipReport
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[779]"></a>igmpHostSendMembershipReport</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, igmp_host_misc.o(i.igmpHostSendMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
</UL>

<P><STRONG><a name="[780]"></a>igmpHostTick</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, igmp_host.o(i.igmpHostTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
</UL>

<P><STRONG><a name="[782]"></a>igmpInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp_common.o(i.igmpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = igmpInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[784]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, igmp_common.o(i.igmpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[785]"></a>igmpProcessMessage</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, igmp_common.o(i.igmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = igmpProcessMessage &rArr; igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpDumpMessage
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[77f]"></a>igmpSendMessage</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, igmp_common.o(i.igmpSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpDumpMessage
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[787]"></a>igmpTick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, igmp_common.o(i.igmpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = igmpTick &rArr; igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[6c7]"></a>ipAddrToString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ip.o(i.ipAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ipAddrToString &rArr; ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[756]"></a>ipAllocBuffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ip.o(i.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[77e]"></a>ipCalcChecksum</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, ip.o(i.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
</UL>

<P><STRONG><a name="[758]"></a>ipCalcChecksumEx</STRONG> (Thumb, 172 bytes, Stack size 36 bytes, ip.o(i.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[765]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, ip.o(i.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[7e6]"></a>ipIsLinkLocalAddr</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ip.o(i.ipIsLinkLocalAddr))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[8d8]"></a>ipIsMulticastAddr</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ip.o(i.ipIsMulticastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>

<P><STRONG><a name="[788]"></a>ipIsUnspecifiedAddr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip.o(i.ipIsUnspecifiedAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipIsUnspecifiedAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[789]"></a>ipSelectSourceAddr</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ip.o(i.ipSelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ipSelectSourceAddr &rArr; ipv6SelectSourceAddr &rArr; ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[78a]"></a>ipSendDatagram</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ip.o(i.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[727]"></a>ipStringToAddr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ip.o(i.ipStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipStringToAddr &rArr; ipv6StringToAddr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[78d]"></a>ipv4AddRouterAlertOption</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ipv4_misc.o(i.ipv4AddRouterAlertOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4AddRouterAlertOption
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[68c]"></a>ipv4AddrToString</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ipv4.o(i.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
</UL>

<P><STRONG><a name="[78e]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4CheckDestAddr &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[78f]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4CheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4CheckSourceAddr &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[793]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(i.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[7a3]"></a>ipv4DumpHoleList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_frag.o(i.ipv4DumpHoleList))
<BR><BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[790]"></a>ipv4FindHole</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4FindHole
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[791]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[792]"></a>ipv4FragTick</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ipv4_frag.o(i.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[794]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, ipv4_frag.o(i.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[7a4]"></a>ipv4GetAddrScope</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetAddrScope))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>

<P><STRONG><a name="[80a]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[461]"></a>ipv4GetHostAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipv4.o(i.ipv4GetHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ipv4GetHostAddr &rArr; ipv4GetHostAddrEx &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[796]"></a>ipv4GetHostAddrEx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipv4.o(i.ipv4GetHostAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv4GetHostAddrEx &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddr
</UL>

<P><STRONG><a name="[797]"></a>ipv4GetPrefixLength</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4GetPrefixLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4GetPrefixLength
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>

<P><STRONG><a name="[798]"></a>ipv4Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ipv4.o(i.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[658]"></a>ipv4IsBroadcastAddr</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4IsBroadcastAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[7a5]"></a>ipv4IsLocalHostAddr</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4IsLocalHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[7a6]"></a>ipv4IsOnLink</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4IsOnLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4IsOnLink
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[659]"></a>ipv4IsTentativeAddr</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4IsTentativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4IsTentativeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[783]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ipv4.o(i.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[79a]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipv4.o(i.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[799]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4MapMulticastAddrToMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4MapMulticastAddrToMac
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[79b]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, ipv4.o(i.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[6d8]"></a>ipv4ProcessPacket</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ipv4.o(i.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[7a0]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, ipv4_frag.o(i.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[7a1]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ipv4_frag.o(i.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[7a7]"></a>ipv4SelectDefaultGateway</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4SelectDefaultGateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SelectDefaultGateway
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[663]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, ipv4_misc.o(i.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipv4SelectSourceAddr &rArr; ipv4GetPrefixLength
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetPrefixLength
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetAddrScope
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[75a]"></a>ipv4SendDatagram</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ipv4.o(i.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[795]"></a>ipv4SendPacket</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, ipv4.o(i.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectDefaultGateway
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[78c]"></a>ipv4StringToAddr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ipv4.o(i.ipv4StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4StringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[79e]"></a>ipv4UpdateErrorStats</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[79f]"></a>ipv4UpdateInStats</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4UpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv4UpdateInStats &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[662]"></a>ipv4UpdateOutStats</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4UpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv4UpdateOutStats &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
</UL>

<P><STRONG><a name="[7a8]"></a>ipv6AddDefaultRouter</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6AddDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6AddDefaultRouter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[7a9]"></a>ipv6AddPrefix</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ipv6_misc.o(i.ipv6AddPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[70d]"></a>ipv6AddrToString</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ipv6.o(i.ipv6AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
</UL>

<P><STRONG><a name="[7ab]"></a>ipv6CheckDestAddr</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6CheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7cf]"></a>ipv6CheckSourceAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6CheckSourceAddr))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[7aa]"></a>ipv6CompPrefix</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6CompPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
</UL>

<P><STRONG><a name="[7ac]"></a>ipv6ComputeSolicitedNodeAddr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6ComputeSolicitedNodeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6ComputeSolicitedNodeAddr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[7b5]"></a>ipv6DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6.o(i.ipv6DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[7cc]"></a>ipv6DumpHoleList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_frag.o(i.ipv6DumpHoleList))
<BR><BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[7ad]"></a>ipv6FindHole</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipv6_frag.o(i.ipv6FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6FindHole
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[7ae]"></a>ipv6FlushAddrList</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6FlushAddrList))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ipv6FlushAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[7b0]"></a>ipv6FlushDefaultRouterList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6FlushDefaultRouterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6FlushDefaultRouterList &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[7b1]"></a>ipv6FlushDnsServerList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipv6_misc.o(i.ipv6FlushDnsServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv6FlushDnsServerList
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[7b2]"></a>ipv6FlushFragQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv6_frag.o(i.ipv6FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv6FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[7b3]"></a>ipv6FlushPrefixList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6FlushPrefixList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6FlushPrefixList &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[7b4]"></a>ipv6FragTick</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ipv6_frag.o(i.ipv6FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ipv6FragTick &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[7b6]"></a>ipv6FragmentDatagram</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, ipv6_frag.o(i.ipv6FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[88b]"></a>ipv6GenerateLinkLocalAddr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6GenerateLinkLocalAddr))
<BR><BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
</UL>

<P><STRONG><a name="[7b8]"></a>ipv6GetAddrScope</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6GetAddrScope))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetMulticastAddrScope
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[7d6]"></a>ipv6GetCommonPrefixLength</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipv6_misc.o(i.ipv6GetCommonPrefixLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6GetCommonPrefixLength
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[463]"></a>ipv6GetGlobalAddr</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ipv6.o(i.ipv6GetGlobalAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipv6GetGlobalAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[462]"></a>ipv6GetLinkLocalAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ipv6.o(i.ipv6GetLinkLocalAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ipv6GetLinkLocalAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
</UL>

<P><STRONG><a name="[821]"></a>ipv6GetLinkLocalAddrState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipv6.o(i.ipv6GetLinkLocalAddrState))
<BR><BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[7b9]"></a>ipv6GetMulticastAddrScope</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6GetMulticastAddrScope))
<BR><BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
</UL>

<P><STRONG><a name="[7ba]"></a>ipv6GetPathMtu</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipv6_pmtu.o(i.ipv6GetPathMtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipv6GetPathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[7bc]"></a>ipv6Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ipv6.o(i.ipv6Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6Init
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[774]"></a>ipv6IsAnycastAddr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6IsAnycastAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6IsAnycastAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[7bd]"></a>ipv6IsLocalHostAddr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ipv6_misc.o(i.ipv6IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipv6IsLocalHostAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[7be]"></a>ipv6IsOnLink</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6IsOnLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipv6IsOnLink &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[769]"></a>ipv6IsTentativeAddr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6IsTentativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6IsTentativeAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[7bf]"></a>ipv6JoinMulticastGroup</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ipv6.o(i.ipv6JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[7c2]"></a>ipv6LeaveMulticastGroup</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ipv6.o(i.ipv6LeaveMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ipv6LeaveMulticastGroup &rArr; mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[7c4]"></a>ipv6LinkChangeEvent</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ipv6.o(i.ipv6LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[7c0]"></a>ipv6MapMulticastAddrToMac</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[7d1]"></a>ipv6ParseAuthHeader</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ipv6.o(i.ipv6ParseAuthHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv6ParseAuthHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7c8]"></a>ipv6ParseDestOptHeader</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, ipv6.o(i.ipv6ParseDestOptHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ipv6ParseDestOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7d2]"></a>ipv6ParseEspHeader</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ipv6.o(i.ipv6ParseEspHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv6ParseEspHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7ca]"></a>ipv6ParseFragmentHeader</STRONG> (Thumb, 706 bytes, Stack size 88 bytes, ipv6_frag.o(i.ipv6ParseFragmentHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = ipv6ParseFragmentHeader &rArr;  ipv6ProcessPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHoleList
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7cd]"></a>ipv6ParseHopByHopOptHeader</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, ipv6.o(i.ipv6ParseHopByHopOptHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ipv6ParseHopByHopOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7c9]"></a>ipv6ParseOptions</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, ipv6.o(i.ipv6ParseOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
</UL>

<P><STRONG><a name="[7ce]"></a>ipv6ParseRoutingHeader</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, ipv6.o(i.ipv6ParseRoutingHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ipv6ParseRoutingHeader &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[6d9]"></a>ipv6ProcessPacket</STRONG> (Thumb, 578 bytes, Stack size 112 bytes, ipv6.o(i.ipv6ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateInStats
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseEspHeader
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseAuthHeader
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[7d3]"></a>ipv6RemoveDefaultRouter</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6RemoveDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6RemoveDefaultRouter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[7d5]"></a>ipv6RemovePrefix</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipv6_misc.o(i.ipv6RemovePrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[7cb]"></a>ipv6SearchFragQueue</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, ipv6_frag.o(i.ipv6SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ipv6SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHoleList
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[764]"></a>ipv6SelectSourceAddr</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, ipv6_misc.o(i.ipv6SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ipv6SelectSourceAddr &rArr; ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetCommonPrefixLength
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[766]"></a>ipv6SendDatagram</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ipv6.o(i.ipv6SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[7b7]"></a>ipv6SendPacket</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, ipv6.o(i.ipv6SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateOutStats
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsLocalHostAddr
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[7af]"></a>ipv6SetAddr</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, ipv6_misc.o(i.ipv6SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
</UL>

<P><STRONG><a name="[78b]"></a>ipv6StringToAddr</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ipv6.o(i.ipv6StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ipv6StringToAddr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[7d0]"></a>ipv6UpdateInStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6UpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[7da]"></a>ipv6UpdateOutStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_misc.o(i.ipv6UpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
</UL>

<P><STRONG><a name="[772]"></a>ipv6UpdatePathMtu</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipv6_pmtu.o(i.ipv6UpdatePathMtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
</UL>

<P><STRONG><a name="[10a]"></a>lan8742DisableIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8742DisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7e0]"></a>lan8742DumpPhyReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742DumpPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[109]"></a>lan8742EnableIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8742EnableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>lan8742EventHandler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lan8742_driver.o(i.lan8742EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lan8742EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>lan8742Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lan8742Init &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742WritePhyReg
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742DumpPhyReg
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7dd]"></a>lan8742ReadPhyReg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lan8742_driver.o(i.lan8742ReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lan8742ReadPhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[108]"></a>lan8742Tick</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lan8742_driver.o(i.lan8742Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lan8742Tick &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7df]"></a>lan8742WritePhyReg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lan8742_driver.o(i.lan8742WritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lan8742WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[7e2]"></a>llmnrFormatIpv4AddrRecord</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, llmnr_responder.o(i.llmnrFormatIpv4AddrRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = llmnrFormatIpv4AddrRecord &rArr; dnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[7e3]"></a>llmnrFormatIpv6AddrRecord</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, llmnr_responder.o(i.llmnrFormatIpv6AddrRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = llmnrFormatIpv6AddrRecord &rArr; dnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[e3]"></a>llmnrProcessQuery</STRONG> (Thumb, 302 bytes, Stack size 80 bytes, llmnr_responder.o(i.llmnrProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = llmnrProcessQuery &rArr; llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llmnr_responder.o(i.llmnrResponderInit)
</UL>
<P><STRONG><a name="[7e5]"></a>llmnrResponderInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, llmnr_responder.o(i.llmnrResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = llmnrResponderInit &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[7e4]"></a>llmnrSendResponse</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, llmnr_responder.o(i.llmnrSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsLinkLocalAddr
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrFormatIpv6AddrRecord
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrFormatIpv4AddrRecord
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[836]"></a>macAddrToEui64</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[7e7]"></a>macStringToAddr</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ethernet.o(i.macStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = macStringToAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>main</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = main &rArr; MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_JPEG_Init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S1_Init
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ETH_Init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_InitApplication
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGetDefaultSettings
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInitKernel
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LIBJPEG_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7fa]"></a>memPoolAlloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, net_mem.o(i.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[7fc]"></a>memPoolFree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_mem.o(i.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[82e]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[7ff]"></a>mldDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mld.o(i.mldDumpMessage))
<BR><BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
</UL>

<P><STRONG><a name="[829]"></a>mldInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mld.o(i.mldInit))
<BR><BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[7c5]"></a>mldLinkChangeEvent</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mld.o(i.mldLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mldLinkChangeEvent &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[76b]"></a>mldProcessListenerQuery</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, mld.o(i.mldProcessListenerQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mldProcessListenerQuery &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[76c]"></a>mldProcessListenerReport</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, mld.o(i.mldProcessListenerReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mldProcessListenerReport &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[800]"></a>mldSendListenerDone</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, mld.o(i.mldSendListenerDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
</UL>

<P><STRONG><a name="[7fe]"></a>mldSendListenerReport</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, mld.o(i.mldSendListenerReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
</UL>

<P><STRONG><a name="[7c1]"></a>mldStartListening</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mld.o(i.mldStartListening))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[7c3]"></a>mldStopListening</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mld.o(i.mldStopListening))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[801]"></a>mldTick</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mld.o(i.mldTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mldTick &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[802]"></a>nbnsCompareName</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, nbns_common.o(i.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[804]"></a>nbnsEncodeName</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[805]"></a>nbnsInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nbns_common.o(i.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[808]"></a>nbnsParseName</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[ec]"></a>nbnsProcessMessage</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nbns_common.o(i.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(i.nbnsInit)
</UL>
<P><STRONG><a name="[806]"></a>nbnsProcessQuery</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, nbns_responder.o(i.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[807]"></a>nbnsProcessResponse</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, nbns_client.o(i.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[729]"></a>nbnsResolve</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, nbns_client.o(i.nbnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = nbnsResolve &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[6ca]"></a>nbnsSendQuery</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, nbns_client.o(i.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
</UL>

<P><STRONG><a name="[809]"></a>nbnsSendResponse</STRONG> (Thumb, 342 bytes, Stack size 104 bytes, nbns_responder.o(i.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[80b]"></a>ndpAddOption</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ndp_misc.o(i.ndpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ndpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[814]"></a>ndpCheckOptions</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ndp_misc.o(i.ndpCheckOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndpCheckOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[7d8]"></a>ndpCreateDestCacheEntry</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpCreateDestCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpCreateDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[80c]"></a>ndpCreateNeighborCacheEntry</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpCreateNeighborCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
</UL>

<P><STRONG><a name="[813]"></a>ndpDumpNeighborAdvMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(i.ndpDumpNeighborAdvMessage))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[817]"></a>ndpDumpNeighborSolMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(i.ndpDumpNeighborSolMessage))
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[819]"></a>ndpDumpRedirectMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(i.ndpDumpRedirectMessage))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[81a]"></a>ndpDumpRouterAdvMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(i.ndpDumpRouterAdvMessage))
<BR><BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[81f]"></a>ndpDumpRouterSolMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(i.ndpDumpRouterSolMessage))
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
</UL>

<P><STRONG><a name="[7db]"></a>ndpEnqueuePacket</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ndp.o(i.ndpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ndpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[7bb]"></a>ndpFindDestCacheEntry</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFindDestCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[80e]"></a>ndpFindNeighborCacheEntry</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ndp_cache.o(i.ndpFindNeighborCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
</UL>

<P><STRONG><a name="[7d4]"></a>ndpFlushDestCache</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ndp_cache.o(i.ndpFlushDestCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndpFlushDestCache
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
</UL>

<P><STRONG><a name="[80f]"></a>ndpFlushNeighborCache</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ndp_cache.o(i.ndpFlushNeighborCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
</UL>

<P><STRONG><a name="[80d]"></a>ndpFlushQueuedPackets</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ndp_cache.o(i.ndpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
</UL>

<P><STRONG><a name="[815]"></a>ndpGetOption</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ndp_misc.o(i.ndpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[810]"></a>ndpInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ndp.o(i.ndpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[811]"></a>ndpIsFirstHopRouter</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpIsFirstHopRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndpIsFirstHopRouter &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[7c6]"></a>ndpLinkChangeEvent</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ndp.o(i.ndpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ndpLinkChangeEvent &rArr; ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[812]"></a>ndpParsePrefixInfoOption</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpParsePrefixInfoOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ndpParsePrefixInfoOption &rArr; ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[76f]"></a>ndpProcessNeighborAdv</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, ndp.o(i.ndpProcessNeighborAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ndpProcessNeighborAdv &rArr; ndpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborAdvMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[76e]"></a>ndpProcessNeighborSol</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, ndp.o(i.ndpProcessNeighborSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ndpProcessNeighborSol &rArr; ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborSolMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[770]"></a>ndpProcessRedirect</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, ndp.o(i.ndpProcessRedirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ndpProcessRedirect &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRedirectMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[76d]"></a>ndpProcessRouterAdv</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, ndp.o(i.ndpProcessRouterAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRouterAdvMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[7d9]"></a>ndpResolve</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ndp.o(i.ndpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[81d]"></a>ndpSelectDefaultRouter</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ndp_misc.o(i.ndpSelectDefaultRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[7d7]"></a>ndpSelectNextHop</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpSelectNextHop))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[818]"></a>ndpSendNeighborAdv</STRONG> (Thumb, 386 bytes, Stack size 120 bytes, ndp.o(i.ndpSendNeighborAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborAdvMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[81c]"></a>ndpSendNeighborSol</STRONG> (Thumb, 288 bytes, Stack size 120 bytes, ndp.o(i.ndpSendNeighborSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = ndpSendNeighborSol &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborSolMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
</UL>

<P><STRONG><a name="[816]"></a>ndpSendQueuedPackets</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ndp_cache.o(i.ndpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ndpSendQueuedPackets &rArr; ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdateOutStats
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[81e]"></a>ndpSendRouterSol</STRONG> (Thumb, 250 bytes, Stack size 104 bytes, ndp.o(i.ndpSendRouterSol))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ndpSendRouterSol &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRouterSolMessage
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[820]"></a>ndpTick</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ndp.o(i.ndpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ndpTick &rArr; ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddrState
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[823]"></a>ndpUpdateAddrList</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, ndp_misc.o(i.ndpUpdateAddrList))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddrState
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[825]"></a>ndpUpdateDefaultRouterList</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpUpdateDefaultRouterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpUpdateDefaultRouterList &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[822]"></a>ndpUpdateNeighborCache</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, ndp_cache.o(i.ndpUpdateNeighborCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ndpUpdateNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[826]"></a>ndpUpdateNextHop</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ndp_misc.o(i.ndpUpdateNextHop))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ndpUpdateNextHop &rArr; ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
</UL>

<P><STRONG><a name="[824]"></a>ndpUpdatePrefixList</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ndp_misc.o(i.ndpUpdatePrefixList))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ndpUpdatePrefixList &rArr; ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[64d]"></a>netBufferAlloc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_mem.o(i.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
</UL>

<P><STRONG><a name="[6d3]"></a>netBufferAppend</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, net_mem.o(i.netBufferAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[660]"></a>netBufferAt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, net_mem.o(i.netBufferAt))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[757]"></a>netBufferConcat</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, net_mem.o(i.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[64e]"></a>netBufferCopy</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, net_mem.o(i.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netBufferCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[64c]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(i.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[64a]"></a>netBufferGetLength</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_mem.o(i.netBufferGetLength))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthSendPacket
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[827]"></a>netBufferRead</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, net_mem.o(i.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthSendPacket
</UL>

<P><STRONG><a name="[69a]"></a>netBufferSetLength</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, net_mem.o(i.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[7a2]"></a>netBufferWrite</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, net_mem.o(i.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
</UL>

<P><STRONG><a name="[7f3]"></a>netConfigInterface</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, net.o(i.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = netConfigInterface &rArr; llmnrResponderInit &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldInit
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a6]"></a>netGenerateRand</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, net_misc.o(i.netGenerateRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[82c]"></a>netGenerateRandBit</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, net_misc.o(i.netGenerateRandBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netGenerateRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
</UL>

<P><STRONG><a name="[6a2]"></a>netGenerateRandRange</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, net_misc.o(i.netGenerateRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[68e]"></a>netGetDefaultInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.netGetDefaultInterface))
<BR><BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGetDefaultSettings
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
</UL>

<P><STRONG><a name="[7ed]"></a>netInit</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netInit &rArr; osCreateTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82a]"></a>netInitRand</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, net_misc.o(i.netInitRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = netInitRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandBit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[833]"></a>netProcessLinkChange</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, net_misc.o(i.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[7f1]"></a>netSetDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ef]"></a>netSetHostname</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetHostname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ee]"></a>netSetInterfaceName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetInterfaceName &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f0]"></a>netSetMacAddr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, net.o(i.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetMacAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f2]"></a>netSetPhyDriver</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, net.o(i.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetPhyDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[777]"></a>netStartTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_misc.o(i.netStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netStartTimer &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[8b2]"></a>netStopTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_misc.o(i.netStopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[ed]"></a>netTask</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, net.o(i.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = netTask &rArr; netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[838]"></a>netTick</STRONG> (Thumb, 674 bytes, Stack size 16 bytes, net_misc.o(i.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[781]"></a>netTimerExpired</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_misc.o(i.netTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netTimerExpired &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>

<P><STRONG><a name="[8cf]"></a>netTimerRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_misc.o(i.netTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[653]"></a>nicGetLogicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[693]"></a>nicGetPhysicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
</UL>

<P><STRONG><a name="[83c]"></a>nicGetSwitchPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nic.o(i.nicGetSwitchPort))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[83b]"></a>nicIsParentInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nic.o(i.nicIsParentInterface))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[7de]"></a>nicNotifyLinkChange</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nic.o(i.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIsParentInterface
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetSwitchPort
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[83d]"></a>nicProcessPacket</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, nic.o(i.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthReceivePacket
</UL>

<P><STRONG><a name="[6dc]"></a>nicSendPacket</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nic.o(i.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[839]"></a>nicTick</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nic.o(i.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[6cc]"></a>nicUpdateMacAddrFilter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nic.o(i.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[688]"></a>osAcquireMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(i.osAcquireMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osAcquireMutex &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddrEx
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[7fb]"></a>osAllocMem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os_port_freertos.o(i.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>

<P><STRONG><a name="[828]"></a>osCreateEvent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_port_freertos.o(i.osCreateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osCreateEvent &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[82d]"></a>osCreateMutex</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_port_freertos.o(i.osCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osCreateMutex &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[832]"></a>osCreateTask</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, os_port_freertos.o(i.osCreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osCreateTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[45f]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerTaskfun
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StarttftpTask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[6c6]"></a>osDelayTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_port_freertos.o(i.osDelayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpTaskfun
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[82b]"></a>osDeleteEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(i.osDeleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[7fd]"></a>osFreeMem</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_port_freertos.o(i.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>

<P><STRONG><a name="[647]"></a>osGetSystemTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_port_freertos.o(i.osGetSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadBody
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteFile
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeState
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientChangeRequestState
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadTrailer
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientChangeState
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
</UL>

<P><STRONG><a name="[7ec]"></a>osInitKernel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_port_freertos.o(i.osInitKernel))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f7]"></a>osKernelInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f9]"></a>osKernelStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e6]"></a>osMessageQueueGet</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>

<P><STRONG><a name="[4f1]"></a>osMessageQueueNew</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f2]"></a>osMessageQueuePut</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
</UL>

<P><STRONG><a name="[84f]"></a>osMutexAcquire</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[851]"></a>osMutexNew</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController()
</UL>

<P><STRONG><a name="[853]"></a>osMutexRelease</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame()
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[687]"></a>osReleaseMutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(i.osReleaseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddrEx
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[855]"></a>osResetEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_port_freertos.o(i.osResetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osResetEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[67a]"></a>osResumeAllTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(i.osResumeAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
</UL>

<P><STRONG><a name="[4ca]"></a>osSemaphoreAcquire</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[4cc]"></a>osSemaphoreNew</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController()
</UL>

<P><STRONG><a name="[3c7]"></a>osSemaphoreRelease</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame()
</UL>

<P><STRONG><a name="[7e1]"></a>osSetEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthSendPacket
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
</UL>

<P><STRONG><a name="[379]"></a>osSetEventFromIsr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_port_freertos.o(i.osSetEventFromIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[678]"></a>osSuspendAllTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSuspendAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSuspendAllTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuInfoParser
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientWriteHeader
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReadHeader
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientTest
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpPutFile
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseStatusLine
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
</UL>

<P><STRONG><a name="[7f8]"></a>osThreadNew</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[837]"></a>osWaitForEvent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_port_freertos.o(i.osWaitForEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[e4]"></a>pvPortMalloc</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8ed]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[878]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[21]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[889]"></a>slaacDumpConfig</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, slaac_misc.o(i.slaacDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = slaacDumpConfig &rArr; ipv6AddrToString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[88a]"></a>slaacGenerateLinkLocalAddr</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, slaac_misc.o(i.slaacGenerateLinkLocalAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GenerateLinkLocalAddr
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[7f4]"></a>slaacGetDefaultSettings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slaac.o(i.slaacGetDefaultSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slaacGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f5]"></a>slaacInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, slaac.o(i.slaacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = slaacInit &rArr; osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c7]"></a>slaacLinkChangeEvent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, slaac_misc.o(i.slaacLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[88c]"></a>slaacParsePrefixInfoOption</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, slaac_misc.o(i.slaacParsePrefixInfoOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[81b]"></a>slaacParseRouterAdv</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, slaac_misc.o(i.slaacParseRouterAdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddrState
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[7f6]"></a>slaacStart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, slaac.o(i.slaacStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = slaacStart &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[713]"></a>socketAccept</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, socket.o(i.socketAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = socketAccept &rArr; tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[88e]"></a>socketAllocate</STRONG> (Thumb, 174 bytes, Stack size 112 bytes, socket_misc.o(i.socketAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[6fc]"></a>socketClose</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, socket.o(i.socketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientCloseConnection
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientCloseChannel
</UL>

<P><STRONG><a name="[701]"></a>socketConnect</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, socket.o(i.socketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientConnect
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientEstablishConnection
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[711]"></a>socketGetLocalAddr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, socket.o(i.socketGetLocalAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = socketGetLocalAddr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[82f]"></a>socketInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, socket.o(i.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketInit &rArr; osCreateEvent &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[710]"></a>socketListen</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, socket.o(i.socketListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[717]"></a>socketOpen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, socket.o(i.socketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientOpenConnection
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
</UL>

<P><STRONG><a name="[71e]"></a>socketReceive</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, socket.o(i.socketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientReceiveData
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientReadChannel
</UL>

<P><STRONG><a name="[894]"></a>socketReceiveEx</STRONG> (Thumb, 210 bytes, Stack size 120 bytes, socket.o(i.socketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[722]"></a>socketSend</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, socket.o(i.socketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientSendData
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientWriteChannel
</UL>

<P><STRONG><a name="[897]"></a>socketSendTo</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, socket.o(i.socketSendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>

<P><STRONG><a name="[718]"></a>socketSetInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, socket.o(i.socketSetInterface))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientOpenConnection
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
</UL>

<P><STRONG><a name="[71a]"></a>socketSetRxBufferSize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, socket.o(i.socketSetRxBufferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = socketSetRxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
</UL>

<P><STRONG><a name="[714]"></a>socketSetTimeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, socket.o(i.socketSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientOpenConnection
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientInitDataTransfer
</UL>

<P><STRONG><a name="[719]"></a>socketSetTxBufferSize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, socket.o(i.socketSetTxBufferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = socketSetTxBufferSize &rArr; tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientOpenChannel
</UL>

<P><STRONG><a name="[721]"></a>socketShutdown</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, socket.o(i.socketShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientShutdownConnection
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientShutdownChannel
</UL>

<P><STRONG><a name="[89e]"></a>stm32f7xxEthCalcCrc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32f7xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[10f]"></a>stm32f7xxEthDisableIrq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthDisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f7xxEthDisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>stm32f7xxEthEnableIrq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f7xxEthEnableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>stm32f7xxEthEventHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = stm32f7xxEthEventHandler &rArr; stm32f7xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>stm32f7xxEthInit</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stm32f7xxEthInit &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthUpdateMacAddrFilter
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInitDmaDesc
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[89d]"></a>stm32f7xxEthInitDmaDesc</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthInitDmaDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f7xxEthInitDmaDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
</UL>

<P><STRONG><a name="[115]"></a>stm32f7xxEthReadPhyReg</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32f7xxEthReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[89c]"></a>stm32f7xxEthReceivePacket</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32f7xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthEventHandler
</UL>

<P><STRONG><a name="[111]"></a>stm32f7xxEthSendPacket</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32f7xxEthSendPacket &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>stm32f7xxEthTick</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f7xxEthTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>stm32f7xxEthUpdateMacAddrFilter</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stm32f7xxEthUpdateMacAddrFilter &rArr; stm32f7xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f7xxEthInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>stm32f7xxEthUpdateMacConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthUpdateMacConfig))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>stm32f7xxEthWritePhyReg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f7xx_eth_driver.o(i.stm32f7xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32f7xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[720]"></a>strRemoveTrailingSpace</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, str.o(i.strRemoveTrailingSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strRemoveTrailingSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientSendCommand
</UL>

<P><STRONG><a name="[70c]"></a>strReplaceChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, str.o(i.strReplaceChar))
<BR><BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpClientFormatPortCommand
</UL>

<P><STRONG><a name="[743]"></a>strTrimWhitespace</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, str.o(i.strTrimWhitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strTrimWhitespace
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseHeaderField
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpClientParseChunkSize
</UL>

<P><STRONG><a name="[655]"></a>swapInt16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[694]"></a>swapInt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetPrefixLength
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
</UL>

<P><STRONG><a name="[891]"></a>tcpAbort</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(i.tcpAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[88d]"></a>tcpAccept</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, tcp.o(i.tcpAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
</UL>

<P><STRONG><a name="[8a4]"></a>tcpAddOption</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcpAddOption &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[8a0]"></a>tcpChangeState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>

<P><STRONG><a name="[8a5]"></a>tcpCheckAck</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, tcp_misc.o(i.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[8ad]"></a>tcpCheckFinWait2Timer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckFinWait2Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpCheckFinWait2Timer &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8d1]"></a>tcpCheckKeepAliveTimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_timer.o(i.tcpCheckKeepAliveTimer))
<BR><BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8ae]"></a>tcpCheckOverrideTimer</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, tcp_timer.o(i.tcpCheckOverrideTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpCheckOverrideTimer &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8af]"></a>tcpCheckPersistTimer</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpCheckPersistTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8b0]"></a>tcpCheckRetransmitTimer</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckRetransmitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpCheckRetransmitTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8b3]"></a>tcpCheckSeqNum</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpCheckSeqNum &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[8b4]"></a>tcpCheckSyn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[8b5]"></a>tcpCheckTimeWaitTimer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckTimeWaitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpCheckTimeWaitTimer &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[8a8]"></a>tcpComputeRto</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpComputeRto &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[892]"></a>tcpConnect</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, tcp.o(i.tcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[8a1]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>

<P><STRONG><a name="[8bb]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[8ab]"></a>tcpFastLossRecovery</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastLossRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[8aa]"></a>tcpFastRecovery</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[8ac]"></a>tcpFastRetransmit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[8b7]"></a>tcpFlushRetransmitQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[8b8]"></a>tcpFlushSynQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushSynQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[8a2]"></a>tcpGenerateInitialSeqNum</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpGenerateInitialSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpGenerateInitialSeqNum &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRand
</UL>
<BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[88f]"></a>tcpGetDynamicPort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tcp.o(i.tcpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpGetDynamicPort &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[8d0]"></a>tcpGetOption</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[89a]"></a>tcpGetState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcpGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTxBufferSize
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetRxBufferSize
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[831]"></a>tcpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[8a6]"></a>tcpIsDuplicateAck</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, tcp_misc.o(i.tcpIsDuplicateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[8b9]"></a>tcpIsDuplicateSyn</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcpIsDuplicateSyn &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[890]"></a>tcpKillOldestConnection</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp.o(i.tcpKillOldestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpKillOldestConnection &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[893]"></a>tcpListen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(i.tcpListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
</UL>

<P><STRONG><a name="[8ba]"></a>tcpNagleAlgo</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[79c]"></a>tcpProcessSegment</STRONG> (Thumb, 668 bytes, Stack size 56 bytes, tcp_fsm.o(i.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[8c8]"></a>tcpProcessSegmentData</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[8cb]"></a>tcpReadRxBuffer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[8cc]"></a>tcpReadTxBuffer</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpReadTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[895]"></a>tcpReceive</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, tcp.o(i.tcpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[8bc]"></a>tcpRejectSegment</STRONG> (Thumb, 370 bytes, Stack size 136 bytes, tcp_misc.o(i.tcpRejectSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
</UL>

<P><STRONG><a name="[8b1]"></a>tcpRetransmitSegment</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, tcp_misc.o(i.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
</UL>

<P><STRONG><a name="[898]"></a>tcpSend</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, tcp.o(i.tcpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
</UL>

<P><STRONG><a name="[89f]"></a>tcpSendResetSegment</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>

<P><STRONG><a name="[8a3]"></a>tcpSendSegment</STRONG> (Thumb, 604 bytes, Stack size 136 bytes, tcp_misc.o(i.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerRunning
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[89b]"></a>tcpShutdown</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, tcp.o(i.tcpShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
</UL>

<P><STRONG><a name="[8c2]"></a>tcpStateCloseWait</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8bd]"></a>tcpStateClosed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcpStateClosed &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c6]"></a>tcpStateClosing</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcpStateClosing &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c1]"></a>tcpStateEstablished</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[8c4]"></a>tcpStateFinWait1</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcpStateFinWait1 &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c5]"></a>tcpStateFinWait2</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = tcpStateFinWait2 &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c3]"></a>tcpStateLastAck</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8be]"></a>tcpStateListen</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = tcpStateListen &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c0]"></a>tcpStateSynReceived</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8bf]"></a>tcpStateSynSent</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = tcpStateSynSent &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[8c7]"></a>tcpStateTimeWait</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[83a]"></a>tcpTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = tcpTick &rArr; tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckKeepAliveTimer
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[834]"></a>tcpUpdateEvents</STRONG> (Thumb, 486 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[8cd]"></a>tcpUpdateReceiveWindow</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateReceiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[8a9]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[8ca]"></a>tcpUpdateSackBlocks</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateSackBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[8a7]"></a>tcpUpdateSendWindow</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateSendWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpUpdateSendWindow &rArr; netStartTimer &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[8b6]"></a>tcpWaitForEvents</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpWaitForEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpWaitForEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[8c9]"></a>tcpWriteRxBuffer</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpWriteRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[8ce]"></a>tcpWriteTxBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpWriteTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcpWriteTxBuffer &rArr; netBufferWrite &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[459]"></a>touchgfx_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, touchgfxconfiguration.o(i.touchgfx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>

<P><STRONG><a name="[470]"></a>touchgfx_taskEntry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i.touchgfx_taskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFX_Task
</UL>

<P><STRONG><a name="[699]"></a>udpAllocBuffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, udp.o(i.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[69f]"></a>udpAttachRxCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, udp.o(i.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[6bd]"></a>udpDetachRxCallback</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, udp.o(i.udpDetachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[8d7]"></a>udpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
</UL>

<P><STRONG><a name="[6c4]"></a>udpGetDynamicPort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, udp.o(i.udpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udpGetDynamicPort &rArr; netGenerateRandRange &rArr; netGenerateRand &rArr; netGenerateRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGenerateRandRange
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[830]"></a>udpInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udpInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[8d6]"></a>udpInvokeRxCallback</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, udp.o(i.udpInvokeRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udpInvokeRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[79d]"></a>udpProcessDatagram</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, udp.o(i.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[896]"></a>udpReceiveDatagram</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, udp.o(i.udpReceiveDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[69b]"></a>udpSendBuffer</STRONG> (Thumb, 346 bytes, Stack size 104 bytes, udp.o(i.udpSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[899]"></a>udpSendDatagram</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, udp.o(i.udpSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = udpSendDatagram &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsMulticastAddr
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[835]"></a>udpUpdateEvents</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, udp.o(i.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
</UL>

<P><STRONG><a name="[864]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[8e1]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[8f1]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[872]"></a>vApplicationIdleHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationIdleHook &rArr; vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[86c]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[877]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[866]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[865]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[868]"></a>vPortEnterCritical</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[86a]"></a>vPortExitCritical</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[e5]"></a>vPortFree</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8e7]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8db]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[84c]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[846]"></a>vQueueDelete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[8dd]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[881]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[845]"></a>vTaskDelay</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>

<P><STRONG><a name="[8ea]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[886]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[8df]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[8de]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[8e0]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[8da]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskSetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[848]"></a>vTaskStartScheduler</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[85b]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2e1]"></a>vTaskSwitchContext</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; xTaskCallApplicationTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e8]"></a>videoTaskFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i.videoTaskFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = videoTaskFunc &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a]"></a>wm8994_DeInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm8994.o(i.wm8994_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wm8994_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>wm8994_Init</STRONG> (Thumb, 2906 bytes, Stack size 40 bytes, wm8994.o(i.wm8994_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wm8994_Init &rArr; wm8994_SetVolume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Delay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>wm8994_Pause</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8994_Pause &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>wm8994_Play</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8994.o(i.wm8994_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wm8994_Play &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>wm8994_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm8994.o(i.wm8994_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wm8994_ReadID &rArr; AUDIO_IO_Read &rArr; I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>wm8994_Reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wm8994_Reset &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>wm8994_Resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8994_Resume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>wm8994_SetFrequency</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wm8994_SetFrequency &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>wm8994_SetMute</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Stop
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Resume
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Play
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>wm8994_SetOutputMode</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetOutputMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wm8994_SetOutputMode &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>wm8994_SetVolume</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, wm8994.o(i.wm8994_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wm8994_SetVolume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>wm8994_Stop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wm8994_Stop &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[8e4]"></a>xPortStartScheduler</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[859]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[858]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[852]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[840]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
</UL>

<P><STRONG><a name="[84b]"></a>xQueueGenericCreate</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[83f]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[875]"></a>xQueueGenericReset</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[84e]"></a>xQueueGenericSend</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
</UL>

<P><STRONG><a name="[84d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[85a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[854]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[84a]"></a>xQueueReceive</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[849]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[83e]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[850]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[8e3]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tasks.o(i.xTaskCallApplicationTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[8eb]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[841]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>

<P><STRONG><a name="[85c]"></a>xTaskCreateStatic</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[8ec]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[856]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[847]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>

<P><STRONG><a name="[466]"></a>xTaskIncrementTick</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[871]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[8ee]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[885]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[857]"></a>xTaskResumeAll</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[8e2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[87d]"></a>xTimerGenericCommand</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1d6]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::setRGBBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE)
</UL>
<P><STRONG><a name="[8e5]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoTaskFunc
</UL>

<P><STRONG><a name="[f3]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev)
</UL>
<P><STRONG><a name="[9c4]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev), UNUSED)

<P><STRONG><a name="[4d0]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>

<P><STRONG><a name="[63f]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController() &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[9c5]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj800ELj480ELj1600ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev), UNUSED)

<P><STRONG><a name="[522]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[51e]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, texts.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEv))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::endOfString()
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[529]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>

<P><STRONG><a name="[532]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
</UL>

<P><STRONG><a name="[4dc]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[4e0]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
</UL>

<P><STRONG><a name="[4dd]"></a>T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::Screen2View()
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::Screen2Presenter(Screen2View&)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[4de]"></a>T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI13MainBoardView18MainBoardPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; MainBoardView::MainBoardView() &rArr; MainBoardViewBase::MainBoardViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int) &rArr; touchgfx::muldiv(int, int, int, int&) &rArr; touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::muldivu(unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardView::MainBoardView()
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardPresenter::MainBoardPresenter(MainBoardView&)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[4df]"></a>T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI17MarkerHistoryView22MarkerHistoryPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; MarkerHistoryView::MarkerHistoryView() &rArr; MarkerHistoryViewBase::MarkerHistoryViewBase() &rArr; CustomContainer1::CustomContainer1() &rArr; CustomContainer1Base::CustomContainer1Base() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryView::MarkerHistoryView()
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkerHistoryPresenter::MarkerHistoryPresenter(MarkerHistoryView&)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[4e1]"></a>T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI19sub_InformationView24sub_InformationPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; sub_InformationView::sub_InformationView() &rArr; sub_InformationViewBase::sub_InformationViewBase() &rArr; touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationPresenter::sub_InformationPresenter(sub_InformationView&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_InformationView::sub_InformationView()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::NoTransition::NoTransition()
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotosub_InformationScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[228]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent() &rArr; touchgfx::Drawable::moveRelative(short, short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveRelative(short, short)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[22b]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[22c]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[22a]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::init()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::init() &rArr; touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[229]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tearDown()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::tearDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[8f9]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char) &rArr; touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::makeSnapshot()
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::Transition()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[9c6]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh), UNUSED)

<P><STRONG><a name="[8f3]"></a>T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[8f4]"></a>T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[8f2]"></a>T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1& touchgfx::AbstractPartition::at&lang;touchgfx::NoTransition&rang;(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[581]"></a>T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, line.o(t._ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1) &rArr; touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[580]"></a>T1 touchgfx::abs&lang;int&rang;(T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(t._ZN8touchgfx3absIiEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::length(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[549]"></a>T1 touchgfx::abs&lang;short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(t._ZN8touchgfx3absIsEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[8f8]"></a>touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[5a0]"></a>T1 touchgfx::sign&lang;int&rang;(T1)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(t._ZN8touchgfx4signIiEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int)
</UL>

<P><STRONG><a name="[505]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[509]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE3addES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[50b]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::drawCachedAreas()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[9c7]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev), UNUSED)

<P><STRONG><a name="[4ba]"></a>touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mainboardviewbase.o(t._ZN8touchgfx7CWRUtil4toQ5IiEENS0_2Q5ET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5 touchgfx::CWRUtil::toQ5&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainBoardViewBase::MainBoardViewBase()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[285]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[288]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[28b]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[28e]"></a>touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mainboardviewbase.o(t._ZN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[291]"></a>touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, customcontainer1base.o(t._ZN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[294]"></a>touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, markerhistoryviewbase.o(t._ZN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[297]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[4da]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotosub_InformationScreenNoTransition()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMarkerHistoryScreenNoTransition()
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoMainBoardScreenNoTransition()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenNoTransition()
</UL>

<P><STRONG><a name="[9c8]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback__sub_object(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE), UNUSED)

<P><STRONG><a name="[29a]"></a>touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sub_informationviewbase.o(t._ZN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[29d]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[8fe]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::SlideTransition(unsigned char)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::init()
</UL>

<P><STRONG><a name="[9c9]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback__sub_object(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E), UNUSED)

<P><STRONG><a name="[2cd]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;MainBoardView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI13MainBoardViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[2cf]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;sub_InformationPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI24sub_InformationPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[2d1]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEE)
</UL>
<P><STRONG><a name="[52a]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::isFull() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, textprovider.o(t._ZNK8touchgfx12TextProvider14circularBufferILj10EE6isFullEv))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>

<P><STRONG><a name="[62e]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(t._ZNK8touchgfx7CWRUtil2Q52toIiEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::floor() const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::ceil() const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
</UL>

<P><STRONG><a name="[62f]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, line.o(t._ZNK8touchgfx7CWRUtil2Q52toIsEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::invalidateContent() const
</UL>

<P><STRONG><a name="[286]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[289]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::Slider&, int, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[28c]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[28f]"></a>touchgfx::Callback&lang;MainBoardViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mainboardviewbase.o(t._ZNK8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> mainboardviewbase.o(.constdata__ZTVN8touchgfx8CallbackI17MainBoardViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[292]"></a>touchgfx::Callback&lang;CustomContainer1Base, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, customcontainer1base.o(t._ZNK8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> customcontainer1base.o(.constdata__ZTVN8touchgfx8CallbackI20CustomContainer1BaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[295]"></a>touchgfx::Callback&lang;MarkerHistoryViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, markerhistoryviewbase.o(t._ZNK8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> markerhistoryviewbase.o(.constdata__ZTVN8touchgfx8CallbackI21MarkerHistoryViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[298]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[29b]"></a>touchgfx::Callback&lang;sub_InformationViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sub_informationviewbase.o(t._ZNK8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> sub_informationviewbase.o(.constdata__ZTVN8touchgfx8CallbackI23sub_InformationViewBaseRKNS_14AbstractButtonEvvEE)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[487]"></a>SCB_CleanInvalidateDCache()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, touchgfxhal.o(i._Z25SCB_CleanInvalidateDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_CleanInvalidateDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[2d5]"></a>__sti___15_TouchGFXHAL_cpp_c3b64dc6</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __sti___15_TouchGFXHAL_cpp_c3b64dc6 &rArr; touchgfx::KeySampler::init() &rArr; touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::init()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.init_array)
</UL>
<P><STRONG><a name="[2d6]"></a>__sti___25_TouchGFXConfiguration_cpp_f5abfd34</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___25_TouchGFXConfiguration_cpp_f5abfd34 &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::LCD16bpp()
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[4cf]"></a>SCB_CleanInvalidateDCache()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._Z25SCB_CleanInvalidateDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_CleanInvalidateDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::InvalidateCache()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::FlushCache()
</UL>

<P><STRONG><a name="[2d7]"></a>__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___24_TouchGFXGeneratedHAL_cpp_db822bdb &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController() &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)800, (unsigned)480, (unsigned)1600, (touchgfx::Bitmap::BitmapFormat)0&rang;::DedicatedBufferController()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.init_array)
</UL>
<P><STRONG><a name="[b6]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMA10initializeEv)
</UL>
<P><STRONG><a name="[42e]"></a>SCB_CleanInvalidateDCache()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._Z25SCB_CleanInvalidateDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_CleanInvalidateDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
</UL>

<P><STRONG><a name="[b3]"></a>JPEG_MCU_Gray_ARGB_ConvertBlocks</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JPEG_MCU_Gray_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[b4]"></a>JPEG_MCU_YCCK_ARGB_ConvertBlocks</STRONG> (Thumb, 276 bytes, Stack size 68 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_MCU_YCCK_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[b1]"></a>JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr422_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[b2]"></a>JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr444_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[46b]"></a>TGFX_JPEG_InitPostProcColorTables</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_InitPostProcColorTables))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>

<P><STRONG><a name="[469]"></a>TGFX_JPEG_InitPreProcColorTables</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_InitPreProcColorTables))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>

<P><STRONG><a name="[46a]"></a>TGFX_JPEG_Init_MCU_LUT</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_Init_MCU_LUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TGFX_JPEG_Init_MCU_LUT
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>

<P><STRONG><a name="[b0]"></a>TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</STRONG> (Thumb, 570 bytes, Stack size 84 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[317]"></a>AUDIO_ChangeSelectMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu.o(i.AUDIO_ChangeSelectMode))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_MenuProcess
</UL>

<P><STRONG><a name="[326]"></a>GetFileInfo</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, waveplayer.o(i.GetFileInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GetFileInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[327]"></a>PlayerInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, waveplayer.o(i.PlayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PlayerInit &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
</UL>

<P><STRONG><a name="[320]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, waveplayer.o(i.SCB_CleanDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Start
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Process
</UL>

<P><STRONG><a name="[32a]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, waverecorder.o(i.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[332]"></a>WavProcess_EncInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, waverecorder.o(i.WavProcess_EncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WavProcess_EncInit
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_HeaderInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Start
</UL>

<P><STRONG><a name="[473]"></a>WavProcess_HeaderInit</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, waverecorder.o(i.WavProcess_HeaderInit))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavProcess_EncInit
</UL>

<P><STRONG><a name="[32e]"></a>WavProcess_HeaderUpdate</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, waverecorder.o(i.WavProcess_HeaderUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_REC_Process
</UL>

<P><STRONG><a name="[312]"></a>AUDIO_InitApplication</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.AUDIO_InitApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AUDIO_InitApplication &rArr; AUDIO_PLAYER_Init &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_PLAYER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[363]"></a>BSP_QSPI_EnableMemoryMappedMode</STRONG> (Thumb, 74 bytes, Stack size 72 bytes, main.o(i.BSP_QSPI_EnableMemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_QSPI_EnableMemoryMappedMode &rArr; HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[435]"></a>MPU_Config</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[439]"></a>MX_CRC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43a]"></a>MX_DMA2D_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43c]"></a>MX_DMA_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43d]"></a>MX_DSIHOST_DSI_Init</STRONG> (Thumb, 380 bytes, Stack size 176 bytes, main.o(i.MX_DSIHOST_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MX_DSIHOST_DSI_Init &rArr; HAL_DSI_Init &rArr; HAL_DSI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_SetLowPowerRXFilter
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_SetGenericVCID
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigPhyTimer
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigHostTimeouts
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigFlowControl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigErrorMonitor
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigCommand
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigAdaptedCommandMode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[446]"></a>MX_ETH_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.MX_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_ETH_Init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[447]"></a>MX_FMC_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[448]"></a>MX_GPIO_Init</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44c]"></a>MX_I2S1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_I2S1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_I2S1_Init &rArr; HAL_I2S_Init &rArr; HAL_I2S_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44d]"></a>MX_JPEG_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.MX_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = MX_JPEG_Init &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44e]"></a>MX_LTDC_Init</STRONG> (Thumb, 286 bytes, Stack size 112 bytes, main.o(i.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MX_LTDC_Init &rArr; OTM8009A_Init &rArr; DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetPitch
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigCommand
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[452]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_QUADSPI_Init &rArr; QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_EnableMemoryMappedMode
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45a]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45d]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, main.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
</UL>

<P><STRONG><a name="[456]"></a>QSPI_DummyCyclesCfg</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, main.o(i.QSPI_DummyCyclesCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[455]"></a>QSPI_EnterFourBytesAddress</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, main.o(i.QSPI_EnterFourBytesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_EnterFourBytesAddress &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[454]"></a>QSPI_EnterMemory_QPI</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, main.o(i.QSPI_EnterMemory_QPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_EnterMemory_QPI &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[457]"></a>QSPI_OutDrvStrengthCfg</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, main.o(i.QSPI_OutDrvStrengthCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[453]"></a>QSPI_ResetMemory</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, main.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QSPI_ResetMemory &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[45e]"></a>QSPI_WriteEnable</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, main.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[7e9]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e8]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a9]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[36a]"></a>CODEC_IO_Write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8994.o(i.CODEC_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Stop
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetOutputMode
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetFrequency
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Reset
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Pause
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[6f8]"></a>ft6x06_GetInstance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[6f9]"></a>ft6x06_TS_Configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>

<P><STRONG><a name="[3e6]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[3e7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[390]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[391]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[392]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[41f]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[41e]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[3b0]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[3b4]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[3b1]"></a>I2C_TransferConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[3af]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[3b2]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[3b5]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[a0]"></a>DFSDM_DMAError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DFSDM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>DFSDM_DMARegularConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_DMARegularConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DFSDM_DMARegularConvCplt &rArr; HAL_DFSDM_FilterRegConvCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
</UL>
<P><STRONG><a name="[a1]"></a>DFSDM_DMARegularHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_DMARegularHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DFSDM_DMARegularHalfConvCplt &rArr; HAL_DFSDM_FilterRegConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_dfsdm.o(i.HAL_DFSDM_FilterRegularStart_DMA)
</UL>
<P><STRONG><a name="[383]"></a>DFSDM_GetChannelFromInstance</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_GetChannelFromInstance))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
</UL>

<P><STRONG><a name="[389]"></a>DFSDM_RegConvStart</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_RegConvStart))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStart_DMA
</UL>

<P><STRONG><a name="[38b]"></a>DFSDM_RegConvStop</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f7xx_hal_dfsdm.o(i.DFSDM_RegConvStop))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterRegularStop_DMA
</UL>

<P><STRONG><a name="[39b]"></a>DSI_ConfigPacketHeader</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, stm32f7xx_hal_dsi.o(i.DSI_ConfigPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>

<P><STRONG><a name="[377]"></a>DSI_ShortWrite</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32f7xx_hal_dsi.o(i.DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
</UL>

<P><STRONG><a name="[37b]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f7xx_hal_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[37a]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 566 bytes, Stack size 200 bytes, stm32f7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[3bb]"></a>I2S_GetClockFreq</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f7xx_hal_i2s.o(i.I2S_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2S_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[424]"></a>JPEG_ACHuff_BitsVals_To_SizeCodes</STRONG> (Thumb, 130 bytes, Stack size 1328 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_ACHuff_BitsVals_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>

<P><STRONG><a name="[425]"></a>JPEG_Bits_To_SizeCodes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Bits_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DCHuff_BitsVals_To_SizeCodes
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>

<P><STRONG><a name="[426]"></a>JPEG_DCHuff_BitsVals_To_SizeCodes</STRONG> (Thumb, 98 bytes, Stack size 1320 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DCHuff_BitsVals_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = JPEG_DCHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
</UL>

<P><STRONG><a name="[a8]"></a>JPEG_DMAErrorCallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JPEG_DMAErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[a7]"></a>JPEG_DMAInCpltCallback</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAInCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JPEG_DMAInCpltCallback &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[aa]"></a>JPEG_DMAOutAbortCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = JPEG_DMAOutAbortCallback &rArr; JPEG_DMA_EndProcess &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[a9]"></a>JPEG_DMAOutCpltCallback</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = JPEG_DMAOutCpltCallback &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[3d4]"></a>JPEG_DMA_ContinueProcess</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_ContinueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JPEG_DMA_ContinueProcess &rArr; JPEG_DMA_EndProcess &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[428]"></a>JPEG_DMA_EndProcess</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_EndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = JPEG_DMA_EndProcess &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutAbortCallback
</UL>

<P><STRONG><a name="[3dc]"></a>JPEG_DMA_PollResidualData</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_PollResidualData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[3ca]"></a>JPEG_DMA_StartProcess</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[3d1]"></a>JPEG_GetQuality</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_GetQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JPEG_GetQuality
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
</UL>

<P><STRONG><a name="[3c9]"></a>JPEG_Init_Process</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Init_Process))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[3d3]"></a>JPEG_Process</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[42f]"></a>JPEG_ReadInputData</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_ReadInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[431]"></a>JPEG_Set_HuffAC_Mem</STRONG> (Thumb, 192 bytes, Stack size 856 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffAC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[432]"></a>JPEG_Set_HuffDC_Mem</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffDC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = JPEG_Set_HuffDC_Mem &rArr; JPEG_DCHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DCHuff_BitsVals_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[3da]"></a>JPEG_Set_HuffEnc_Mem</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffEnc_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_Huff_DHTMem
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[433]"></a>JPEG_Set_Huff_DHTMem</STRONG> (Thumb, 890 bytes, Stack size 28 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_Huff_DHTMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JPEG_Set_Huff_DHTMem
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[430]"></a>JPEG_StoreOutputData</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_StoreOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[3df]"></a>LTDC_SetConfig</STRONG> (Thumb, 528 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[3eb]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[3ea]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[a4]"></a>SAI_DMAError</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMAError &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
<LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[a3]"></a>SAI_DMARxCplt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMARxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMARxCplt &rArr; HAL_SAI_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[a2]"></a>SAI_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMARxHalfCplt &rArr; HAL_SAI_RxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[a6]"></a>SAI_DMATxCplt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMATxCplt &rArr; HAL_SAI_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[a5]"></a>SAI_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_DMATxHalfCplt &rArr; HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[3f6]"></a>SAI_Disable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f7xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[3fe]"></a>SAI_InterruptFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.SAI_InterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxCplt
</UL>

<P><STRONG><a name="[86f]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[870]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[8ef]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[873]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[874]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[87a]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[87b]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[884]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[863]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[867]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[86d]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[86e]"></a>prvDeleteTCB</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[f1]"></a>prvIdleTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[876]"></a>prvInitialiseNewTask</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[869]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[8f0]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[86b]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[883]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[879]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[87c]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[87e]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[880]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[87f]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[882]"></a>prvSwitchTimerLists</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[f2]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[844]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[842]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[843]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[887]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[888]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ee]"></a>prvTaskExitError</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[ae]"></a>JPEG_MCU_Gray_ARGB_ConvertBlocks</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JPEG_MCU_Gray_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[af]"></a>JPEG_MCU_YCCK_ARGB_ConvertBlocks</STRONG> (Thumb, 276 bytes, Stack size 68 bytes, jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_MCU_YCCK_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[ab]"></a>JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</STRONG> (Thumb, 552 bytes, Stack size 84 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr420_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[ac]"></a>JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr422_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[ad]"></a>JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr444_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[671]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[681]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[6ee]"></a>chk_lock</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6ea]"></a>clear_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6e0]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6b3]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[675]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[67c]"></a>create_chain</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[67f]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[6df]"></a>dec_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[6ac]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6af]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6ae]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[6b4]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[6b6]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6ad]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[6ef]"></a>enq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6eb]"></a>find_volume</STRONG> (Thumb, 750 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[6ed]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[6b8]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[67d]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[6f5]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[6e4]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6f3]"></a>inc_lock</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[6f0]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[674]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[673]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[6b1]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6b7]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[682]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[672]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[6b5]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[67e]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[6b9]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6f2]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6f1]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[6e8]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[6e7]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[6b0]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6f6]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[6b2]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[6de]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[543]"></a>touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN8touchgfx17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[544]"></a>touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN8touchgfx18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;sub_InformationView, sub_InformationPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MarkerHistoryView, MarkerHistoryPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;MainBoardView, MainBoardPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[2d8]"></a>__sti___21_typedtextdatabase_cpp_05ec7672</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __sti___21_typedtextdatabase_cpp_05ec7672 &rArr; getFont_verdana_10_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_consola_20_4bpp()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_arial_30_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[420]"></a>I2Cx_Error</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f769i_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[30d]"></a>I2Cx_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[422]"></a>I2Cx_MspInit</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[30f]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32f769i_discovery.o(i.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = I2Cx_ReadMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[311]"></a>I2Cx_WriteMultiple</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32f769i_discovery.o(i.I2Cx_WriteMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = I2Cx_WriteMultiple &rArr; I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>

<P><STRONG><a name="[349]"></a>DFSDMx_ChannelMspInit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f769i_discovery_audio.o(i.DFSDMx_ChannelMspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DFSDMx_ChannelMspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_MspInit
</UL>

<P><STRONG><a name="[34a]"></a>DFSDMx_FilterMspInit</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.DFSDMx_FilterMspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DFSDMx_FilterMspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_MspInit
</UL>

<P><STRONG><a name="[343]"></a>DFSDMx_Init</STRONG> (Thumb, 2024 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.DFSDMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DFSDMx_Init &rArr; HAL_DFSDM_FilterConfigRegChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_FilterConfigRegChannel
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[34b]"></a>SAI_AUDIO_IN_MspInit</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, stm32f769i_discovery_audio.o(i.SAI_AUDIO_IN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAI_AUDIO_IN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_MspInit
</UL>

<P><STRONG><a name="[344]"></a>SAIx_In_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_In_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAIx_In_DeInit &rArr; HAL_SAI_DeInit &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[348]"></a>SAIx_In_Init</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_In_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAIx_In_Init &rArr; HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_InitEx
</UL>

<P><STRONG><a name="[350]"></a>SAIx_Out_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_Out_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAIx_Out_DeInit &rArr; HAL_SAI_DeInit &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[351]"></a>SAIx_Out_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_Out_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAIx_Out_Init &rArr; HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[66d]"></a>buffer_skip_whitespace</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[668]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[670]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(i.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[85f]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[667]"></a>get_object_item</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[85d]"></a>parse_array</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[8d9]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[85e]"></a>parse_number</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[860]"></a>parse_object</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[861]"></a>parse_string</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[66e]"></a>parse_value</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[66c]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(i.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>

<P><STRONG><a name="[862]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[2d9]"></a>__sti___15_Application_cpp_63cd8d44</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i.__sti___15_Application_cpp_63cd8d44))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.init_array)
</UL>
<P><STRONG><a name="[2da]"></a>__sti___7_LCD_cpp_86507772</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.__sti___7_LCD_cpp_86507772))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.init_array)
</UL>
<P><STRONG><a name="[2e6]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[2e7]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[641]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[638]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[644]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[643]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d6]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[d7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[63e]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2f1]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2fe]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
