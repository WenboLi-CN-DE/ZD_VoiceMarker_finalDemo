/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_800X480PX_ID));

    button1.setXY(138, 139);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
    button1.setAction(buttonCallback);

    box1.setPosition(0, 0, 800, 480);
    box1.setVisible(false);
    box1.setColor(touchgfx::Color::getColorFromRGB(212, 212, 212));

    textArea5.setXY(161, 20);
    textArea5.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea5.setLinespacing(0);
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C6M9));

    buttonPlay.setXY(286, 139);
    buttonPlay.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PLAY_32_ID));
    buttonPlay.setIconXY(20, 15);
    buttonPlay.setAction(buttonCallback);

    buttonRecordStart.setXY(555, 252);
    buttonRecordStart.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REFRESH_32_ID));
    buttonRecordStart.setIconXY(15, 16);
    buttonRecordStart.setAction(buttonCallback);

    buttonPause.setXY(434, 139);
    buttonPause.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_PAUSE_32_ID));
    buttonPause.setIconXY(18, 15);
    buttonPause.setAction(buttonCallback);

    textArea6.setXY(66, 324);
    textArea6.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea6.setLinespacing(0);
    touchgfx::Unicode::snprintf(textArea6Buffer1, TEXTAREA6BUFFER1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6JEU).getText());
    textArea6.setWildcard1(textArea6Buffer1);
    touchgfx::Unicode::snprintf(textArea6Buffer2, TEXTAREA6BUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_M9PG).getText());
    textArea6.setWildcard2(textArea6Buffer2);
    textArea6.resizeToCurrentText();
    textArea6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G8F8));

    buttonStop.setXY(555, 139);
    buttonStop.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
    buttonStop.setIconXY(15, 15);
    buttonStop.setAction(buttonCallback);

    textArea7.setXY(66, 240);
    textArea7.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea7.setLinespacing(0);
    Unicode::snprintf(textArea7Buffer, TEXTAREA7_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WY29).getText());
    textArea7.setWildcard(textArea7Buffer);
    textArea7.resizeToCurrentText();
    textArea7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IW1T));

    slider1.setXY(722, 95);
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_MEDIUM_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_MEDIUM_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_MEDIUM_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    slider1.setupVerticalSlider(7, 3, 0, 0, 285);
    slider1.setValueRange(0, 100);
    slider1.setValue(70);
    slider1.setNewValueCallback(sliderValueChangedCallback);

    toggleButton1.setXY(555, 422);
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_SMALL_BUTTON_ON_ID));
    toggleButton1.setAction(buttonCallback);

    textArea10.setXY(66, 282);
    textArea10.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea10.setLinespacing(0);
    Unicode::snprintf(textArea10Buffer, TEXTAREA10_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UBE2).getText());
    textArea10.setWildcard(textArea10Buffer);
    textArea10.resizeToCurrentText();
    textArea10.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PF3L));

    textAreaVolume.setXY(727, 57);
    textAreaVolume.setColor(touchgfx::Color::getColorFromRGB(150, 24, 24));
    textAreaVolume.setLinespacing(0);
    Unicode::snprintf(textAreaVolumeBuffer, TEXTAREAVOLUME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XWOB).getText());
    textAreaVolume.setWildcard(textAreaVolumeBuffer);
    textAreaVolume.resizeToCurrentText();
    textAreaVolume.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6ZTA));

    buttonWithIcon1.setXY(176, 392);
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_LARGE_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_LARGE_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
    buttonWithIcon1.setIconXY(22, 15);
    buttonWithIcon1.setAction(buttonCallback);

    button2.setXY(6, 69);
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    button2.setAction(buttonCallback);

    add(__background);
    add(image1);
    add(button1);
    add(box1);
    add(textArea5);
    add(buttonPlay);
    add(buttonRecordStart);
    add(buttonPause);
    add(textArea6);
    add(buttonStop);
    add(textArea7);
    add(slider1);
    add(toggleButton1);
    add(textArea10);
    add(textAreaVolume);
    add(buttonWithIcon1);
    add(button2);
}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
        //Interaction1
        //When button1 clicked call virtual function
        //Call function1
        function1();
    }
    else if (&src == &buttonPlay)
    {
        //Interaction3
        //When buttonPlay clicked call virtual function
        //Call functionPlay
        functionPlay();
    }
    else if (&src == &buttonRecordStart)
    {
        //Interaction6
        //When buttonRecordStart clicked call virtual function
        //Call functionRecordStart
        functionRecordStart();
    }
    else if (&src == &buttonPause)
    {
        //Interaction5
        //When buttonPause clicked call virtual function
        //Call functionPause
        functionPause();
    }
    else if (&src == &buttonStop)
    {
        //Interaction4
        //When buttonStop clicked call virtual function
        //Call functionStop
        functionStop();
    }
    else if (&src == &toggleButton1)
    {
        //Interaction7
        //When toggleButton1 clicked call virtual function
        //Call SWITCH_LED
        SWITCH_LED();
    }
    else if (&src == &buttonWithIcon1)
    {
        //Interaction8
        //When buttonWithIcon1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
    else if (&src == &button2)
    {
        //Interaction9
        //When button2 clicked change screen to MarkerHistory
        //Go to MarkerHistory with no screen transition
        application().gotoMarkerHistoryScreenNoTransition();
    }
}

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider1)
    {
        //InteractionVolume
        //When slider1 value changed call virtual function
        //Call functionVolume
        functionVolume(value);
    }
}
