/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @0 "VoiceMarker Application"
    0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x20, 0x2, 0x20, 0x48, 0x7a, 0x0, // @24 "Sample rate:  <> Hz"
    0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x20, 0x20, 0x2, 0x20, 0x20, 0x4b, 0x42, 0x0, // @43 "FileSize:   <>  KB"
    0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x48, 0x6f, 0x6d, 0x65, 0x20, 0x50, 0x61, 0x67, 0x65, 0x0, // @61 "back to Home Page"
    0x53, 0x53, 0x44, 0x20, 0x31, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x0, // @79 "SSD 1 Storage:"
    0x53, 0x53, 0x44, 0x20, 0x32, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x0, // @94 "SSD 2 Storage:"
    0x53, 0x65, 0x69, 0x72, 0x65, 0x73, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x0, // @109 "Seires Number:"
    0x56, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x5f, 0x2, 0x0, // @124 "VoiceFile _<>"
    0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0, // @137 "Working State:"
    0x64, 0x69, 0x73, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x20, 0x20, 0x2, 0x0, // @152 "diskload:  <>"
    0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x20, 0x2, 0x3a, 0x2, 0x0, // @165 "time:  <>:<>"
    0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x0, // @176 "Start Monitor"
    0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x31, 0x0, // @190 "TriggerInfo 1"
    0x56, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x2, 0x0, // @204 "VoiceFile_<>"
    0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x0, // @216 "Working Time:"
    0x44, 0x69, 0x73, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x2, 0x0, // @230 "Diskload:<>"
    0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x3a, 0x20, 0x2, 0x25, 0x0, // @241 "Memory: <>%"
    0x53, 0x53, 0x44, 0x20, 0x31, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0, // @252 "SSD 1 State:"
    0x53, 0x53, 0x44, 0x20, 0x32, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0, // @265 "SSD 2 State:"
    0x56, 0x6f, 0x63, 0x69, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x0, // @278 "Vocie Marker"
    0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x0, // @291 "Working Mode"
    0x44, 0x69, 0x73, 0x6b, 0x3a, 0x20, 0x2, 0x25, 0x0, // @304 "Disk: <>%"
    0x49, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @313 "Infomation"
    0x64, 0x69, 0x73, 0x6b, 0x3a, 0x20, 0x2, 0x25, 0x0, // @324 "disk: <>%"
    0x7a, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x20, 0x2, 0x0, // @333 "zone:  <>"
    0x43, 0x50, 0x55, 0x3a, 0x20, 0x2, 0x25, 0x0, // @342 "CPU: <>%"
    0x48, 0x54, 0x54, 0x50, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x0, // @350 "HTTP Post"
    0x54, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x2, 0x0, // @360 "Time: <>"
    0x63, 0x70, 0x75, 0x3a, 0x20, 0x2, 0x25, 0x0, // @368 "cpu: <>%"
    0x6d, 0x65, 0x6d, 0x3a, 0x20, 0x2, 0x25, 0x0, // @376 "mem: <>%"
    0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x2, 0x0, // @384 "time: <>"
    0x42, 0x75, 0x73, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x0, // @392 "Bus Load"
    0x48, 0x54, 0x54, 0x50, 0x20, 0x47, 0x65, 0x74, 0x0, // @401 "HTTP Get"
    0x54, 0x66, 0x74, 0x70, 0x20, 0x47, 0x65, 0x74, 0x0, // @410 "Tftp Get"
    0x54, 0x66, 0x74, 0x70, 0x20, 0x50, 0x75, 0x74, 0x0, // @419 "Tftp Put"
    0x46, 0x74, 0x70, 0x20, 0x47, 0x65, 0x74, 0x0, // @428 "Ftp Get"
    0x46, 0x74, 0x70, 0x20, 0x50, 0x75, 0x74, 0x0, // @436 "Ftp Put"
    0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x0, // @444 "Network"
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x0, // @452 "Setting"
    0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x0, // @460 "Trigger"
    0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x0, // @468 "Camera"
    0x46, 0x69, 0x6c, 0x65, 0x3a, 0x0, // @475 "File:"
    0x5a, 0x6f, 0x6e, 0x65, 0x3a, 0x0, // @481 "Zone:"
    0x37, 0x30, 0x0 // @487 "70"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
